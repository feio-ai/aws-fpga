// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module monte_sim_dev_exp_core_32_16_50_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        ap_return,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [41:0] x_V;
output  [31:0] ap_return;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] f_x_msb_4_table_V_address0;
reg    f_x_msb_4_table_V_ce0;
wire   [6:0] f_x_msb_4_table_V_q0;
wire   [4:0] f_x_msb_3_table_V_address0;
reg    f_x_msb_3_table_V_ce0;
wire   [31:0] f_x_msb_3_table_V_q0;
wire   [7:0] f_x_msb_2_table_V_address0;
reg    f_x_msb_2_table_V_ce0;
wire   [45:0] f_x_msb_2_table_V_q0;
wire   [7:0] exp_x_msb_1_table_V_address0;
reg    exp_x_msb_1_table_V_ce0;
wire   [49:0] exp_x_msb_1_table_V_q0;
wire   [17:0] trunc_ln703_fu_266_p1;
reg   [17:0] trunc_ln703_reg_1259;
wire   [0:0] tmp_fu_292_p3;
reg   [0:0] tmp_reg_1264;
reg   [0:0] tmp_reg_1264_pp0_iter1_reg;
reg   [0:0] tmp_reg_1264_pp0_iter2_reg;
reg   [0:0] tmp_reg_1264_pp0_iter3_reg;
reg   [0:0] tmp_reg_1264_pp0_iter4_reg;
reg   [0:0] tmp_reg_1264_pp0_iter5_reg;
reg   [0:0] tmp_reg_1264_pp0_iter6_reg;
reg   [0:0] tmp_reg_1264_pp0_iter7_reg;
reg   [0:0] tmp_reg_1264_pp0_iter8_reg;
reg   [0:0] tmp_reg_1264_pp0_iter9_reg;
reg   [0:0] tmp_reg_1264_pp0_iter10_reg;
reg   [0:0] tmp_reg_1264_pp0_iter11_reg;
reg   [0:0] tmp_reg_1264_pp0_iter12_reg;
reg   [0:0] tmp_reg_1264_pp0_iter13_reg;
reg   [0:0] tmp_reg_1264_pp0_iter14_reg;
reg   [6:0] p_Result_18_reg_1270;
reg   [6:0] p_Result_18_reg_1270_pp0_iter1_reg;
reg   [6:0] p_Result_18_reg_1270_pp0_iter2_reg;
reg   [6:0] p_Result_18_reg_1270_pp0_iter3_reg;
reg   [6:0] p_Result_18_reg_1270_pp0_iter4_reg;
reg   [6:0] p_Result_18_reg_1270_pp0_iter5_reg;
reg   [6:0] p_Result_18_reg_1270_pp0_iter6_reg;
reg   [6:0] p_Result_18_reg_1270_pp0_iter7_reg;
reg   [6:0] p_Result_18_reg_1270_pp0_iter8_reg;
reg   [7:0] tmp_V_reg_1275;
reg   [7:0] tmp_V_reg_1275_pp0_iter1_reg;
reg   [7:0] tmp_V_reg_1275_pp0_iter2_reg;
reg   [7:0] tmp_V_reg_1275_pp0_iter3_reg;
reg   [7:0] tmp_V_reg_1275_pp0_iter4_reg;
wire   [4:0] tmp_V_1_fu_586_p4;
reg   [4:0] tmp_V_1_reg_1281;
reg   [4:0] tmp_V_1_reg_1281_pp0_iter1_reg;
reg   [4:0] tmp_V_1_reg_1281_pp0_iter2_reg;
reg   [4:0] tmp_V_1_reg_1281_pp0_iter3_reg;
reg   [4:0] tmp_V_1_reg_1281_pp0_iter4_reg;
reg   [5:0] tmp_s_reg_1292;
reg   [6:0] tmp_44_reg_1297;
reg   [2:0] tmp_46_reg_1302;
reg   [2:0] tmp_46_reg_1302_pp0_iter1_reg;
reg   [2:0] tmp_46_reg_1302_pp0_iter2_reg;
reg   [2:0] tmp_46_reg_1302_pp0_iter3_reg;
reg   [2:0] tmp_46_reg_1302_pp0_iter4_reg;
wire   [0:0] or_ln1314_8_fu_738_p2;
reg   [0:0] or_ln1314_8_reg_1313;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter1_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter2_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter3_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter4_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter5_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter6_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter7_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter8_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter9_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter10_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter11_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter12_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter13_reg;
reg   [0:0] or_ln1314_8_reg_1313_pp0_iter14_reg;
wire   [0:0] or_ln1314_17_fu_792_p2;
reg   [0:0] or_ln1314_17_reg_1318;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter1_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter2_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter3_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter4_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter5_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter6_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter7_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter8_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter9_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter10_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter11_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter12_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter13_reg;
reg   [0:0] or_ln1314_17_reg_1318_pp0_iter14_reg;
reg   [31:0] tmp_45_reg_1323;
reg   [31:0] tmp_45_reg_1323_pp0_iter2_reg;
reg   [31:0] tmp_45_reg_1323_pp0_iter3_reg;
reg   [31:0] tmp_45_reg_1323_pp0_iter4_reg;
reg   [31:0] f_x_msb_3_V_reg_1329;
reg   [31:0] f_x_msb_3_V_reg_1329_pp0_iter2_reg;
reg   [31:0] f_x_msb_3_V_reg_1329_pp0_iter3_reg;
reg   [31:0] f_x_msb_3_V_reg_1329_pp0_iter4_reg;
wire   [46:0] add_ln731_fu_931_p2;
reg   [46:0] add_ln731_reg_1350;
wire   [8:0] ret_V_10_fu_954_p2;
reg   [8:0] ret_V_10_reg_1355;
reg   [8:0] ret_V_10_reg_1355_pp0_iter6_reg;
reg   [8:0] ret_V_10_reg_1355_pp0_iter7_reg;
reg   [8:0] ret_V_10_reg_1355_pp0_iter8_reg;
reg   [8:0] ret_V_10_reg_1355_pp0_iter9_reg;
wire   [40:0] trunc_ln612_1_fu_960_p1;
reg   [40:0] trunc_ln612_1_reg_1361;
reg   [40:0] trunc_ln612_1_reg_1361_pp0_iter6_reg;
reg   [40:0] trunc_ln612_1_reg_1361_pp0_iter7_reg;
reg   [40:0] trunc_ln612_1_reg_1361_pp0_iter8_reg;
reg   [40:0] trunc_ln612_1_reg_1361_pp0_iter9_reg;
wire   [47:0] exp_x_msb_3_4_lsb_m_1_V_fu_964_p3;
reg   [47:0] exp_x_msb_3_4_lsb_m_1_V_reg_1367;
reg   [47:0] exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter7_reg;
reg   [47:0] exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter8_reg;
reg   [47:0] exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter9_reg;
reg   [45:0] f_x_msb_2_3_4_lsb_s_V_reg_1382;
reg   [49:0] exp_x_msb_2_3_4_lsb_m_1_V_reg_1392;
reg   [49:0] exp_x_msb_1_V_reg_1397;
reg   [49:0] exp_x_msb_1_V_reg_1397_pp0_iter11_reg;
reg   [49:0] exp_x_msb_1_V_reg_1397_pp0_iter12_reg;
reg   [49:0] exp_x_msb_1_V_reg_1397_pp0_iter13_reg;
reg   [49:0] exp_x_msb_1_V_reg_1397_pp0_iter14_reg;
reg   [47:0] y_lo_s_V_reg_1413;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln544_1_fu_606_p1;
wire   [63:0] zext_ln544_2_fu_667_p1;
wire   [63:0] zext_ln544_3_fu_881_p1;
wire   [63:0] zext_ln544_4_fu_1007_p1;
wire  signed [41:0] x_l_V_fu_262_p0;
wire  signed [41:0] trunc_ln703_fu_266_p0;
wire  signed [41:0] p_Result_29_fu_270_p1;
wire  signed [41:0] trunc_ln612_fu_280_p0;
wire   [33:0] trunc_ln612_fu_280_p1;
wire  signed [41:0] tmp_fu_292_p1;
wire  signed [72:0] x_l_V_fu_262_p1;
wire   [0:0] p_Result_s_fu_300_p3;
wire   [0:0] p_Result_1_fu_314_p3;
wire   [0:0] p_Result_2_fu_328_p3;
wire   [0:0] p_Result_3_fu_342_p3;
wire   [0:0] p_Result_4_fu_356_p3;
wire   [0:0] p_Result_5_fu_370_p3;
wire   [0:0] p_Result_6_fu_384_p3;
wire   [0:0] p_Result_7_fu_398_p3;
wire   [0:0] p_Result_8_fu_412_p3;
wire   [0:0] p_Result_9_fu_426_p3;
wire   [0:0] p_Result_10_fu_440_p3;
wire   [0:0] p_Result_s_85_fu_454_p3;
wire   [0:0] p_Result_11_fu_468_p3;
wire   [0:0] p_Result_12_fu_482_p3;
wire   [0:0] p_Result_13_fu_496_p3;
wire   [0:0] p_Result_14_fu_510_p3;
wire   [0:0] p_Result_15_fu_524_p3;
wire   [0:0] p_Result_16_fu_538_p3;
wire   [0:0] p_Result_17_fu_552_p3;
wire  signed [41:0] p_Result_18_fu_566_p1;
wire  signed [41:0] tmp_V_fu_576_p1;
wire  signed [41:0] tmp_V_1_fu_586_p1;
wire  signed [41:0] tmp_V_2_fu_596_p1;
wire   [2:0] tmp_V_2_fu_596_p4;
wire  signed [41:0] trunc_ln708_fu_611_p0;
wire   [14:0] trunc_ln708_fu_611_p1;
wire   [15:0] x_msb_5_lsb_V_fu_615_p3;
wire   [2:0] r_V_48_fu_631_p0;
wire   [15:0] r_V_48_fu_631_p1;
wire   [18:0] r_V_48_fu_631_p2;
wire   [4:0] p_Result_29_fu_270_p4;
wire   [48:0] p_Result_30_fu_284_p3;
wire   [0:0] icmp_ln1314_1_fu_678_p2;
wire   [0:0] icmp_ln1314_fu_672_p2;
wire   [0:0] xor_ln1311_fu_308_p2;
wire   [0:0] xor_ln1311_1_fu_322_p2;
wire   [0:0] xor_ln1311_3_fu_350_p2;
wire   [0:0] xor_ln1311_4_fu_364_p2;
wire   [0:0] or_ln1314_1_fu_696_p2;
wire   [0:0] xor_ln1311_2_fu_336_p2;
wire   [0:0] or_ln1314_2_fu_702_p2;
wire   [0:0] or_ln1314_fu_690_p2;
wire   [0:0] xor_ln1311_5_fu_378_p2;
wire   [0:0] xor_ln1311_6_fu_392_p2;
wire   [0:0] xor_ln1311_8_fu_420_p2;
wire   [0:0] xor_ln1311_9_fu_434_p2;
wire   [0:0] or_ln1314_5_fu_720_p2;
wire   [0:0] xor_ln1311_7_fu_406_p2;
wire   [0:0] or_ln1314_6_fu_726_p2;
wire   [0:0] or_ln1314_4_fu_714_p2;
wire   [0:0] or_ln1314_7_fu_732_p2;
wire   [0:0] or_ln1314_3_fu_708_p2;
wire   [0:0] xor_ln1311_10_fu_448_p2;
wire   [0:0] xor_ln1311_11_fu_462_p2;
wire   [0:0] xor_ln1311_13_fu_490_p2;
wire   [0:0] xor_ln1311_14_fu_504_p2;
wire   [0:0] or_ln1314_10_fu_750_p2;
wire   [0:0] xor_ln1311_12_fu_476_p2;
wire   [0:0] or_ln1314_11_fu_756_p2;
wire   [0:0] or_ln1314_9_fu_744_p2;
wire   [0:0] xor_ln1311_15_fu_518_p2;
wire   [0:0] xor_ln1311_16_fu_532_p2;
wire   [0:0] xor_ln1311_18_fu_560_p2;
wire   [0:0] and_ln1314_fu_684_p2;
wire   [0:0] or_ln1314_14_fu_774_p2;
wire   [0:0] xor_ln1311_17_fu_546_p2;
wire   [0:0] or_ln1314_15_fu_780_p2;
wire   [0:0] or_ln1314_13_fu_768_p2;
wire   [0:0] or_ln1314_16_fu_786_p2;
wire   [0:0] or_ln1314_12_fu_762_p2;
wire   [7:0] p_Result_32_fu_805_p1;
wire   [7:0] zext_ln703_2_fu_808_p1;
wire   [7:0] exp_x_msb_4_5_lsb_m_1_m5_s_V_fu_812_p2;
wire   [16:0] lhs_V_fu_818_p4;
wire   [32:0] x_msb_4_5_lsb_V_fu_798_p3;
wire   [33:0] zext_ln703_fu_831_p1;
wire   [33:0] zext_ln728_fu_827_p1;
wire   [33:0] ret_V_fu_835_p2;
wire   [43:0] p_Result_34_fu_859_p4;
wire   [35:0] p_Result_33_fu_851_p4;
wire   [35:0] grp_fu_875_p0;
wire   [43:0] grp_fu_875_p1;
wire   [79:0] grp_fu_875_p2;
wire   [30:0] f_x_msb_3_4_lsb_s_V_fu_885_p4;
wire   [45:0] rhs_V_fu_899_p5;
wire   [41:0] shl_ln_fu_913_p4;
wire   [46:0] lhs_V_9_fu_895_p1;
wire   [46:0] zext_ln728_8_fu_909_p1;
wire   [46:0] zext_ln1192_fu_921_p1;
wire   [46:0] add_ln731_1_fu_925_p2;
wire   [4:0] p_Result_35_fu_937_p4;
wire   [8:0] lhs_V_10_fu_947_p1;
wire   [8:0] rhs_V_8_fu_951_p1;
wire   [49:0] p_Result_36_fu_971_p3;
wire   [47:0] grp_fu_985_p0;
wire   [49:0] grp_fu_985_p1;
wire   [97:0] grp_fu_985_p2;
wire   [7:0] p_Result_31_fu_991_p3;
wire   [55:0] rhs_V_9_fu_1015_p4;
wire   [56:0] lhs_V_11_fu_1012_p1;
wire   [56:0] zext_ln728_9_fu_1023_p1;
wire   [56:0] zext_ln703_7_fu_1033_p1;
wire   [56:0] ret_V_11_fu_1027_p2;
wire   [56:0] ret_V_12_fu_1036_p2;
wire   [49:0] grp_fu_1058_p0;
wire   [49:0] grp_fu_1058_p1;
wire   [99:0] grp_fu_1058_p2;
wire   [49:0] zext_ln703_8_fu_1074_p1;
wire   [49:0] y_l_V_fu_1077_p2;
wire   [0:0] xor_ln1315_fu_1092_p2;
wire   [0:0] or_ln1314_18_fu_1105_p2;
wire   [45:0] select_ln1315_fu_1097_p3;
wire   [45:0] trunc_ln5_fu_1082_p4;
wire   [45:0] p_Val2_84_fu_1109_p3;
wire   [46:0] zext_ln1314_fu_1117_p1;
wire   [41:0] trunc_ln703_4_fu_1133_p1;
wire   [43:0] trunc_ln703_3_fu_1129_p1;
wire   [44:0] trunc_ln703_2_fu_1125_p1;
wire   [46:0] y_V_fu_1137_p2;
wire   [1:0] tmp_141_fu_1161_p4;
wire   [44:0] add_ln703_35_fu_1155_p2;
wire   [0:0] icmp_ln1513_fu_1171_p2;
wire   [0:0] tmp_142_fu_1177_p3;
wire   [43:0] add_ln703_34_fu_1149_p2;
wire   [1:0] tmp_143_fu_1191_p4;
wire   [0:0] icmp_ln1513_1_fu_1201_p2;
wire   [0:0] or_ln1513_fu_1185_p2;
wire   [41:0] add_ln703_33_fu_1143_p2;
wire   [3:0] tmp_144_fu_1213_p4;
wire   [0:0] icmp_ln1513_2_fu_1223_p2;
wire   [0:0] or_ln1513_1_fu_1207_p2;
wire   [38:0] trunc_ln703_1_fu_1121_p1;
wire   [38:0] add_ln700_fu_1235_p2;
wire   [0:0] or_ln1513_2_fu_1229_p2;
wire   [31:0] tmp_47_fu_1241_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to14;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [99:0] grp_fu_1058_p00;
wire   [99:0] grp_fu_1058_p10;
wire   [79:0] grp_fu_875_p00;
wire   [79:0] grp_fu_875_p10;
wire   [97:0] grp_fu_985_p00;
wire   [97:0] grp_fu_985_p10;
wire   [18:0] r_V_48_fu_631_p00;
wire   [18:0] r_V_48_fu_631_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

monte_sim_dev_exp_core_32_16_50_s_f_x_msb_4_table_V #(
    .DataWidth( 7 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
f_x_msb_4_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_msb_4_table_V_address0),
    .ce0(f_x_msb_4_table_V_ce0),
    .q0(f_x_msb_4_table_V_q0)
);

monte_sim_dev_exp_core_32_16_50_s_f_x_msb_3_table_V #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
f_x_msb_3_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_msb_3_table_V_address0),
    .ce0(f_x_msb_3_table_V_ce0),
    .q0(f_x_msb_3_table_V_q0)
);

monte_sim_dev_exp_core_32_16_50_s_f_x_msb_2_table_V #(
    .DataWidth( 46 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
f_x_msb_2_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_msb_2_table_V_address0),
    .ce0(f_x_msb_2_table_V_ce0),
    .q0(f_x_msb_2_table_V_q0)
);

monte_sim_dev_exp_core_32_16_50_s_exp_x_msb_1_table_V #(
    .DataWidth( 50 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
exp_x_msb_1_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table_V_address0),
    .ce0(exp_x_msb_1_table_V_ce0),
    .q0(exp_x_msb_1_table_V_q0)
);

monte_sim_dev_monte_sim_dev_mul_36ns_44ns_80_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 36 ),
    .din1_WIDTH( 44 ),
    .dout_WIDTH( 80 ))
monte_sim_dev_mul_36ns_44ns_80_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_875_p0),
    .din1(grp_fu_875_p1),
    .ce(1'b1),
    .dout(grp_fu_875_p2)
);

monte_sim_dev_monte_sim_dev_mul_48ns_50ns_98_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 48 ),
    .din1_WIDTH( 50 ),
    .dout_WIDTH( 98 ))
monte_sim_dev_mul_48ns_50ns_98_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_985_p0),
    .din1(grp_fu_985_p1),
    .ce(1'b1),
    .dout(grp_fu_985_p2)
);

monte_sim_dev_monte_sim_dev_mul_50ns_50ns_100_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 50 ),
    .din1_WIDTH( 50 ),
    .dout_WIDTH( 100 ))
monte_sim_dev_mul_50ns_50ns_100_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1058_p0),
    .din1(grp_fu_1058_p1),
    .ce(1'b1),
    .dout(grp_fu_1058_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln731_reg_1350 <= add_ln731_fu_931_p2;
        exp_x_msb_1_V_reg_1397 <= exp_x_msb_1_table_V_q0;
        exp_x_msb_1_V_reg_1397_pp0_iter11_reg <= exp_x_msb_1_V_reg_1397;
        exp_x_msb_1_V_reg_1397_pp0_iter12_reg <= exp_x_msb_1_V_reg_1397_pp0_iter11_reg;
        exp_x_msb_1_V_reg_1397_pp0_iter13_reg <= exp_x_msb_1_V_reg_1397_pp0_iter12_reg;
        exp_x_msb_1_V_reg_1397_pp0_iter14_reg <= exp_x_msb_1_V_reg_1397_pp0_iter13_reg;
        exp_x_msb_2_3_4_lsb_m_1_V_reg_1392 <= {{ret_V_12_fu_1036_p2[55:6]}};
        exp_x_msb_3_4_lsb_m_1_V_reg_1367[47 : 1] <= exp_x_msb_3_4_lsb_m_1_V_fu_964_p3[47 : 1];
        exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter7_reg[47 : 1] <= exp_x_msb_3_4_lsb_m_1_V_reg_1367[47 : 1];
        exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter8_reg[47 : 1] <= exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter7_reg[47 : 1];
        exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter9_reg[47 : 1] <= exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter8_reg[47 : 1];
        f_x_msb_2_3_4_lsb_s_V_reg_1382 <= {{grp_fu_985_p2[97:52]}};
        f_x_msb_3_V_reg_1329_pp0_iter2_reg <= f_x_msb_3_V_reg_1329;
        f_x_msb_3_V_reg_1329_pp0_iter3_reg <= f_x_msb_3_V_reg_1329_pp0_iter2_reg;
        f_x_msb_3_V_reg_1329_pp0_iter4_reg <= f_x_msb_3_V_reg_1329_pp0_iter3_reg;
        or_ln1314_17_reg_1318_pp0_iter10_reg <= or_ln1314_17_reg_1318_pp0_iter9_reg;
        or_ln1314_17_reg_1318_pp0_iter11_reg <= or_ln1314_17_reg_1318_pp0_iter10_reg;
        or_ln1314_17_reg_1318_pp0_iter12_reg <= or_ln1314_17_reg_1318_pp0_iter11_reg;
        or_ln1314_17_reg_1318_pp0_iter13_reg <= or_ln1314_17_reg_1318_pp0_iter12_reg;
        or_ln1314_17_reg_1318_pp0_iter14_reg <= or_ln1314_17_reg_1318_pp0_iter13_reg;
        or_ln1314_17_reg_1318_pp0_iter2_reg <= or_ln1314_17_reg_1318_pp0_iter1_reg;
        or_ln1314_17_reg_1318_pp0_iter3_reg <= or_ln1314_17_reg_1318_pp0_iter2_reg;
        or_ln1314_17_reg_1318_pp0_iter4_reg <= or_ln1314_17_reg_1318_pp0_iter3_reg;
        or_ln1314_17_reg_1318_pp0_iter5_reg <= or_ln1314_17_reg_1318_pp0_iter4_reg;
        or_ln1314_17_reg_1318_pp0_iter6_reg <= or_ln1314_17_reg_1318_pp0_iter5_reg;
        or_ln1314_17_reg_1318_pp0_iter7_reg <= or_ln1314_17_reg_1318_pp0_iter6_reg;
        or_ln1314_17_reg_1318_pp0_iter8_reg <= or_ln1314_17_reg_1318_pp0_iter7_reg;
        or_ln1314_17_reg_1318_pp0_iter9_reg <= or_ln1314_17_reg_1318_pp0_iter8_reg;
        or_ln1314_8_reg_1313_pp0_iter10_reg <= or_ln1314_8_reg_1313_pp0_iter9_reg;
        or_ln1314_8_reg_1313_pp0_iter11_reg <= or_ln1314_8_reg_1313_pp0_iter10_reg;
        or_ln1314_8_reg_1313_pp0_iter12_reg <= or_ln1314_8_reg_1313_pp0_iter11_reg;
        or_ln1314_8_reg_1313_pp0_iter13_reg <= or_ln1314_8_reg_1313_pp0_iter12_reg;
        or_ln1314_8_reg_1313_pp0_iter14_reg <= or_ln1314_8_reg_1313_pp0_iter13_reg;
        or_ln1314_8_reg_1313_pp0_iter2_reg <= or_ln1314_8_reg_1313_pp0_iter1_reg;
        or_ln1314_8_reg_1313_pp0_iter3_reg <= or_ln1314_8_reg_1313_pp0_iter2_reg;
        or_ln1314_8_reg_1313_pp0_iter4_reg <= or_ln1314_8_reg_1313_pp0_iter3_reg;
        or_ln1314_8_reg_1313_pp0_iter5_reg <= or_ln1314_8_reg_1313_pp0_iter4_reg;
        or_ln1314_8_reg_1313_pp0_iter6_reg <= or_ln1314_8_reg_1313_pp0_iter5_reg;
        or_ln1314_8_reg_1313_pp0_iter7_reg <= or_ln1314_8_reg_1313_pp0_iter6_reg;
        or_ln1314_8_reg_1313_pp0_iter8_reg <= or_ln1314_8_reg_1313_pp0_iter7_reg;
        or_ln1314_8_reg_1313_pp0_iter9_reg <= or_ln1314_8_reg_1313_pp0_iter8_reg;
        p_Result_18_reg_1270_pp0_iter2_reg <= p_Result_18_reg_1270_pp0_iter1_reg;
        p_Result_18_reg_1270_pp0_iter3_reg <= p_Result_18_reg_1270_pp0_iter2_reg;
        p_Result_18_reg_1270_pp0_iter4_reg <= p_Result_18_reg_1270_pp0_iter3_reg;
        p_Result_18_reg_1270_pp0_iter5_reg <= p_Result_18_reg_1270_pp0_iter4_reg;
        p_Result_18_reg_1270_pp0_iter6_reg <= p_Result_18_reg_1270_pp0_iter5_reg;
        p_Result_18_reg_1270_pp0_iter7_reg <= p_Result_18_reg_1270_pp0_iter6_reg;
        p_Result_18_reg_1270_pp0_iter8_reg <= p_Result_18_reg_1270_pp0_iter7_reg;
        ret_V_10_reg_1355 <= ret_V_10_fu_954_p2;
        ret_V_10_reg_1355_pp0_iter6_reg <= ret_V_10_reg_1355;
        ret_V_10_reg_1355_pp0_iter7_reg <= ret_V_10_reg_1355_pp0_iter6_reg;
        ret_V_10_reg_1355_pp0_iter8_reg <= ret_V_10_reg_1355_pp0_iter7_reg;
        ret_V_10_reg_1355_pp0_iter9_reg <= ret_V_10_reg_1355_pp0_iter8_reg;
        tmp_45_reg_1323_pp0_iter2_reg <= tmp_45_reg_1323;
        tmp_45_reg_1323_pp0_iter3_reg <= tmp_45_reg_1323_pp0_iter2_reg;
        tmp_45_reg_1323_pp0_iter4_reg <= tmp_45_reg_1323_pp0_iter3_reg;
        tmp_46_reg_1302_pp0_iter2_reg <= tmp_46_reg_1302_pp0_iter1_reg;
        tmp_46_reg_1302_pp0_iter3_reg <= tmp_46_reg_1302_pp0_iter2_reg;
        tmp_46_reg_1302_pp0_iter4_reg <= tmp_46_reg_1302_pp0_iter3_reg;
        tmp_V_1_reg_1281_pp0_iter2_reg <= tmp_V_1_reg_1281_pp0_iter1_reg;
        tmp_V_1_reg_1281_pp0_iter3_reg <= tmp_V_1_reg_1281_pp0_iter2_reg;
        tmp_V_1_reg_1281_pp0_iter4_reg <= tmp_V_1_reg_1281_pp0_iter3_reg;
        tmp_V_reg_1275_pp0_iter2_reg <= tmp_V_reg_1275_pp0_iter1_reg;
        tmp_V_reg_1275_pp0_iter3_reg <= tmp_V_reg_1275_pp0_iter2_reg;
        tmp_V_reg_1275_pp0_iter4_reg <= tmp_V_reg_1275_pp0_iter3_reg;
        tmp_reg_1264_pp0_iter10_reg <= tmp_reg_1264_pp0_iter9_reg;
        tmp_reg_1264_pp0_iter11_reg <= tmp_reg_1264_pp0_iter10_reg;
        tmp_reg_1264_pp0_iter12_reg <= tmp_reg_1264_pp0_iter11_reg;
        tmp_reg_1264_pp0_iter13_reg <= tmp_reg_1264_pp0_iter12_reg;
        tmp_reg_1264_pp0_iter14_reg <= tmp_reg_1264_pp0_iter13_reg;
        tmp_reg_1264_pp0_iter2_reg <= tmp_reg_1264_pp0_iter1_reg;
        tmp_reg_1264_pp0_iter3_reg <= tmp_reg_1264_pp0_iter2_reg;
        tmp_reg_1264_pp0_iter4_reg <= tmp_reg_1264_pp0_iter3_reg;
        tmp_reg_1264_pp0_iter5_reg <= tmp_reg_1264_pp0_iter4_reg;
        tmp_reg_1264_pp0_iter6_reg <= tmp_reg_1264_pp0_iter5_reg;
        tmp_reg_1264_pp0_iter7_reg <= tmp_reg_1264_pp0_iter6_reg;
        tmp_reg_1264_pp0_iter8_reg <= tmp_reg_1264_pp0_iter7_reg;
        tmp_reg_1264_pp0_iter9_reg <= tmp_reg_1264_pp0_iter8_reg;
        trunc_ln612_1_reg_1361 <= trunc_ln612_1_fu_960_p1;
        trunc_ln612_1_reg_1361_pp0_iter6_reg <= trunc_ln612_1_reg_1361;
        trunc_ln612_1_reg_1361_pp0_iter7_reg <= trunc_ln612_1_reg_1361_pp0_iter6_reg;
        trunc_ln612_1_reg_1361_pp0_iter8_reg <= trunc_ln612_1_reg_1361_pp0_iter7_reg;
        trunc_ln612_1_reg_1361_pp0_iter9_reg <= trunc_ln612_1_reg_1361_pp0_iter8_reg;
        y_lo_s_V_reg_1413 <= {{grp_fu_1058_p2[99:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_msb_3_V_reg_1329 <= f_x_msb_3_table_V_q0;
        or_ln1314_17_reg_1318 <= or_ln1314_17_fu_792_p2;
        or_ln1314_17_reg_1318_pp0_iter1_reg <= or_ln1314_17_reg_1318;
        or_ln1314_8_reg_1313 <= or_ln1314_8_fu_738_p2;
        or_ln1314_8_reg_1313_pp0_iter1_reg <= or_ln1314_8_reg_1313;
        p_Result_18_reg_1270 <= {{p_Result_18_fu_566_p1[37:31]}};
        p_Result_18_reg_1270_pp0_iter1_reg <= p_Result_18_reg_1270;
        tmp_44_reg_1297 <= {{r_V_48_fu_631_p2[12:6]}};
        tmp_45_reg_1323 <= {{ret_V_fu_835_p2[33:2]}};
        tmp_46_reg_1302 <= {{r_V_48_fu_631_p2[5:3]}};
        tmp_46_reg_1302_pp0_iter1_reg <= tmp_46_reg_1302;
        tmp_V_1_reg_1281 <= {{tmp_V_1_fu_586_p1[22:18]}};
        tmp_V_1_reg_1281_pp0_iter1_reg <= tmp_V_1_reg_1281;
        tmp_V_reg_1275 <= {{tmp_V_fu_576_p1[30:23]}};
        tmp_V_reg_1275_pp0_iter1_reg <= tmp_V_reg_1275;
        tmp_reg_1264 <= tmp_fu_292_p1[32'd41];
        tmp_reg_1264_pp0_iter1_reg <= tmp_reg_1264;
        tmp_s_reg_1292 <= {{r_V_48_fu_631_p2[18:13]}};
        trunc_ln703_reg_1259 <= trunc_ln703_fu_266_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to14 = 1'b1;
    end else begin
        ap_idle_pp0_0to14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to14 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        exp_x_msb_1_table_V_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        f_x_msb_2_table_V_ce0 = 1'b1;
    end else begin
        f_x_msb_2_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_msb_3_table_V_ce0 = 1'b1;
    end else begin
        f_x_msb_3_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_msb_4_table_V_ce0 = 1'b1;
    end else begin
        f_x_msb_4_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_1235_p2 = (39'd64 + trunc_ln703_1_fu_1121_p1);

assign add_ln703_33_fu_1143_p2 = (42'd64 + trunc_ln703_4_fu_1133_p1);

assign add_ln703_34_fu_1149_p2 = (44'd64 + trunc_ln703_3_fu_1129_p1);

assign add_ln703_35_fu_1155_p2 = (45'd64 + trunc_ln703_2_fu_1125_p1);

assign add_ln731_1_fu_925_p2 = (lhs_V_9_fu_895_p1 + zext_ln728_8_fu_909_p1);

assign add_ln731_fu_931_p2 = (zext_ln1192_fu_921_p1 + add_ln731_1_fu_925_p2);

assign and_ln1314_fu_684_p2 = (icmp_ln1314_fu_672_p2 & icmp_ln1314_1_fu_678_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_n = (1'b1 & 1'b1);

assign ap_return = ((or_ln1513_2_fu_1229_p2[0:0] === 1'b1) ? 32'd2147483647 : tmp_47_fu_1241_p4);

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign exp_x_msb_1_table_V_address0 = zext_ln544_4_fu_1007_p1;

assign exp_x_msb_3_4_lsb_m_1_V_fu_964_p3 = {{add_ln731_reg_1350}, {1'd0}};

assign exp_x_msb_4_5_lsb_m_1_m5_s_V_fu_812_p2 = (p_Result_32_fu_805_p1 + zext_ln703_2_fu_808_p1);

assign f_x_msb_2_table_V_address0 = zext_ln544_3_fu_881_p1;

assign f_x_msb_3_4_lsb_s_V_fu_885_p4 = {{grp_fu_875_p2[79:49]}};

assign f_x_msb_3_table_V_address0 = zext_ln544_2_fu_667_p1;

assign f_x_msb_4_table_V_address0 = zext_ln544_1_fu_606_p1;

assign grp_fu_1058_p0 = grp_fu_1058_p00;

assign grp_fu_1058_p00 = exp_x_msb_1_V_reg_1397;

assign grp_fu_1058_p1 = grp_fu_1058_p10;

assign grp_fu_1058_p10 = exp_x_msb_2_3_4_lsb_m_1_V_reg_1392;

assign grp_fu_875_p0 = grp_fu_875_p00;

assign grp_fu_875_p00 = p_Result_33_fu_851_p4;

assign grp_fu_875_p1 = grp_fu_875_p10;

assign grp_fu_875_p10 = p_Result_34_fu_859_p4;

assign grp_fu_985_p0 = grp_fu_985_p00;

assign grp_fu_985_p00 = exp_x_msb_3_4_lsb_m_1_V_fu_964_p3;

assign grp_fu_985_p1 = grp_fu_985_p10;

assign grp_fu_985_p10 = p_Result_36_fu_971_p3;

assign icmp_ln1314_1_fu_678_p2 = ((p_Result_30_fu_284_p3 > 49'd530515677918014) ? 1'b1 : 1'b0);

assign icmp_ln1314_fu_672_p2 = ((p_Result_29_fu_270_p4 == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln1513_1_fu_1201_p2 = ((tmp_143_fu_1191_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln1513_2_fu_1223_p2 = ((tmp_144_fu_1213_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln1513_fu_1171_p2 = ((tmp_141_fu_1161_p4 != 2'd0) ? 1'b1 : 1'b0);

assign lhs_V_10_fu_947_p1 = p_Result_35_fu_937_p4;

assign lhs_V_11_fu_1012_p1 = f_x_msb_2_3_4_lsb_s_V_reg_1382;

assign lhs_V_9_fu_895_p1 = f_x_msb_3_4_lsb_s_V_fu_885_p4;

assign lhs_V_fu_818_p4 = {{{exp_x_msb_4_5_lsb_m_1_m5_s_V_fu_812_p2}, {tmp_44_reg_1297}}, {2'd0}};

assign or_ln1314_10_fu_750_p2 = (xor_ln1311_14_fu_504_p2 | xor_ln1311_13_fu_490_p2);

assign or_ln1314_11_fu_756_p2 = (xor_ln1311_12_fu_476_p2 | or_ln1314_10_fu_750_p2);

assign or_ln1314_12_fu_762_p2 = (or_ln1314_9_fu_744_p2 | or_ln1314_11_fu_756_p2);

assign or_ln1314_13_fu_768_p2 = (xor_ln1311_16_fu_532_p2 | xor_ln1311_15_fu_518_p2);

assign or_ln1314_14_fu_774_p2 = (xor_ln1311_18_fu_560_p2 | and_ln1314_fu_684_p2);

assign or_ln1314_15_fu_780_p2 = (xor_ln1311_17_fu_546_p2 | or_ln1314_14_fu_774_p2);

assign or_ln1314_16_fu_786_p2 = (or_ln1314_15_fu_780_p2 | or_ln1314_13_fu_768_p2);

assign or_ln1314_17_fu_792_p2 = (or_ln1314_16_fu_786_p2 | or_ln1314_12_fu_762_p2);

assign or_ln1314_18_fu_1105_p2 = (or_ln1314_8_reg_1313_pp0_iter14_reg | or_ln1314_17_reg_1318_pp0_iter14_reg);

assign or_ln1314_1_fu_696_p2 = (xor_ln1311_4_fu_364_p2 | xor_ln1311_3_fu_350_p2);

assign or_ln1314_2_fu_702_p2 = (xor_ln1311_2_fu_336_p2 | or_ln1314_1_fu_696_p2);

assign or_ln1314_3_fu_708_p2 = (or_ln1314_fu_690_p2 | or_ln1314_2_fu_702_p2);

assign or_ln1314_4_fu_714_p2 = (xor_ln1311_6_fu_392_p2 | xor_ln1311_5_fu_378_p2);

assign or_ln1314_5_fu_720_p2 = (xor_ln1311_9_fu_434_p2 | xor_ln1311_8_fu_420_p2);

assign or_ln1314_6_fu_726_p2 = (xor_ln1311_7_fu_406_p2 | or_ln1314_5_fu_720_p2);

assign or_ln1314_7_fu_732_p2 = (or_ln1314_6_fu_726_p2 | or_ln1314_4_fu_714_p2);

assign or_ln1314_8_fu_738_p2 = (or_ln1314_7_fu_732_p2 | or_ln1314_3_fu_708_p2);

assign or_ln1314_9_fu_744_p2 = (xor_ln1311_11_fu_462_p2 | xor_ln1311_10_fu_448_p2);

assign or_ln1314_fu_690_p2 = (xor_ln1311_fu_308_p2 | xor_ln1311_1_fu_322_p2);

assign or_ln1513_1_fu_1207_p2 = (or_ln1513_fu_1185_p2 | icmp_ln1513_1_fu_1201_p2);

assign or_ln1513_2_fu_1229_p2 = (or_ln1513_1_fu_1207_p2 | icmp_ln1513_2_fu_1223_p2);

assign or_ln1513_fu_1185_p2 = (tmp_142_fu_1177_p3 | icmp_ln1513_fu_1171_p2);

assign p_Result_10_fu_440_p3 = x_l_V_fu_262_p1[32'd48];

assign p_Result_11_fu_468_p3 = x_l_V_fu_262_p1[32'd50];

assign p_Result_12_fu_482_p3 = x_l_V_fu_262_p1[32'd51];

assign p_Result_13_fu_496_p3 = x_l_V_fu_262_p1[32'd52];

assign p_Result_14_fu_510_p3 = x_l_V_fu_262_p1[32'd53];

assign p_Result_15_fu_524_p3 = x_l_V_fu_262_p1[32'd54];

assign p_Result_16_fu_538_p3 = x_l_V_fu_262_p1[32'd55];

assign p_Result_17_fu_552_p3 = x_l_V_fu_262_p1[32'd56];

assign p_Result_18_fu_566_p1 = x_V;

assign p_Result_1_fu_314_p3 = x_l_V_fu_262_p1[32'd39];

assign p_Result_29_fu_270_p1 = x_V;

assign p_Result_29_fu_270_p4 = {{p_Result_29_fu_270_p1[38:34]}};

assign p_Result_2_fu_328_p3 = x_l_V_fu_262_p1[32'd40];

assign p_Result_30_fu_284_p3 = {{trunc_ln612_fu_280_p1}, {15'd0}};

assign p_Result_31_fu_991_p3 = {{tmp_reg_1264_pp0_iter8_reg}, {p_Result_18_reg_1270_pp0_iter8_reg}};

assign p_Result_32_fu_805_p1 = tmp_s_reg_1292;

assign p_Result_33_fu_851_p4 = {{{tmp_45_reg_1323}, {tmp_46_reg_1302_pp0_iter1_reg}}, {1'd0}};

assign p_Result_34_fu_859_p4 = {{{tmp_V_1_reg_1281_pp0_iter1_reg}, {7'd0}}, {f_x_msb_3_V_reg_1329}};

assign p_Result_35_fu_937_p4 = {{f_x_msb_2_table_V_q0[45:41]}};

assign p_Result_36_fu_971_p3 = {{ret_V_10_reg_1355}, {trunc_ln612_1_reg_1361}};

assign p_Result_3_fu_342_p3 = x_l_V_fu_262_p1[32'd41];

assign p_Result_4_fu_356_p3 = x_l_V_fu_262_p1[32'd42];

assign p_Result_5_fu_370_p3 = x_l_V_fu_262_p1[32'd43];

assign p_Result_6_fu_384_p3 = x_l_V_fu_262_p1[32'd44];

assign p_Result_7_fu_398_p3 = x_l_V_fu_262_p1[32'd45];

assign p_Result_8_fu_412_p3 = x_l_V_fu_262_p1[32'd46];

assign p_Result_9_fu_426_p3 = x_l_V_fu_262_p1[32'd47];

assign p_Result_s_85_fu_454_p3 = x_l_V_fu_262_p1[32'd49];

assign p_Result_s_fu_300_p3 = x_l_V_fu_262_p1[32'd38];

assign p_Val2_84_fu_1109_p3 = ((or_ln1314_18_fu_1105_p2[0:0] === 1'b1) ? select_ln1315_fu_1097_p3 : trunc_ln5_fu_1082_p4);

assign r_V_48_fu_631_p0 = r_V_48_fu_631_p00;

assign r_V_48_fu_631_p00 = tmp_V_2_fu_596_p4;

assign r_V_48_fu_631_p1 = r_V_48_fu_631_p10;

assign r_V_48_fu_631_p10 = x_msb_5_lsb_V_fu_615_p3;

assign r_V_48_fu_631_p2 = (r_V_48_fu_631_p0 * r_V_48_fu_631_p1);

assign ret_V_10_fu_954_p2 = (lhs_V_10_fu_947_p1 + rhs_V_8_fu_951_p1);

assign ret_V_11_fu_1027_p2 = (lhs_V_11_fu_1012_p1 + zext_ln728_9_fu_1023_p1);

assign ret_V_12_fu_1036_p2 = (zext_ln703_7_fu_1033_p1 + ret_V_11_fu_1027_p2);

assign ret_V_fu_835_p2 = (zext_ln703_fu_831_p1 + zext_ln728_fu_827_p1);

assign rhs_V_8_fu_951_p1 = tmp_V_reg_1275_pp0_iter4_reg;

assign rhs_V_9_fu_1015_p4 = {{{ret_V_10_reg_1355_pp0_iter9_reg}, {trunc_ln612_1_reg_1361_pp0_iter9_reg}}, {6'd0}};

assign rhs_V_fu_899_p5 = {{{{tmp_V_1_reg_1281_pp0_iter4_reg}, {7'd0}}, {f_x_msb_3_V_reg_1329_pp0_iter4_reg}}, {2'd0}};

assign select_ln1315_fu_1097_p3 = ((xor_ln1315_fu_1092_p2[0:0] === 1'b1) ? 46'd70368744177663 : 46'd0);

assign shl_ln_fu_913_p4 = {{{tmp_45_reg_1323_pp0_iter4_reg}, {tmp_46_reg_1302_pp0_iter4_reg}}, {7'd0}};

assign tmp_141_fu_1161_p4 = {{y_V_fu_1137_p2[46:45]}};

assign tmp_142_fu_1177_p3 = add_ln703_35_fu_1155_p2[32'd44];

assign tmp_143_fu_1191_p4 = {{add_ln703_34_fu_1149_p2[43:42]}};

assign tmp_144_fu_1213_p4 = {{add_ln703_33_fu_1143_p2[41:38]}};

assign tmp_47_fu_1241_p4 = {{add_ln700_fu_1235_p2[38:7]}};

assign tmp_V_1_fu_586_p1 = x_V;

assign tmp_V_1_fu_586_p4 = {{tmp_V_1_fu_586_p1[22:18]}};

assign tmp_V_2_fu_596_p1 = x_V;

assign tmp_V_2_fu_596_p4 = {{tmp_V_2_fu_596_p1[17:15]}};

assign tmp_V_fu_576_p1 = x_V;

assign tmp_fu_292_p1 = x_V;

assign tmp_fu_292_p3 = tmp_fu_292_p1[32'd41];

assign trunc_ln5_fu_1082_p4 = {{y_l_V_fu_1077_p2[49:4]}};

assign trunc_ln612_1_fu_960_p1 = f_x_msb_2_table_V_q0[40:0];

assign trunc_ln612_fu_280_p0 = x_V;

assign trunc_ln612_fu_280_p1 = trunc_ln612_fu_280_p0[33:0];

assign trunc_ln703_1_fu_1121_p1 = p_Val2_84_fu_1109_p3[38:0];

assign trunc_ln703_2_fu_1125_p1 = p_Val2_84_fu_1109_p3[44:0];

assign trunc_ln703_3_fu_1129_p1 = p_Val2_84_fu_1109_p3[43:0];

assign trunc_ln703_4_fu_1133_p1 = p_Val2_84_fu_1109_p3[41:0];

assign trunc_ln703_fu_266_p0 = x_V;

assign trunc_ln703_fu_266_p1 = trunc_ln703_fu_266_p0[17:0];

assign trunc_ln708_fu_611_p0 = x_V;

assign trunc_ln708_fu_611_p1 = trunc_ln708_fu_611_p0[14:0];

assign x_l_V_fu_262_p0 = x_V;

assign x_l_V_fu_262_p1 = x_l_V_fu_262_p0;

assign x_msb_4_5_lsb_V_fu_798_p3 = {{trunc_ln703_reg_1259}, {15'd0}};

assign x_msb_5_lsb_V_fu_615_p3 = {{trunc_ln708_fu_611_p1}, {1'd0}};

assign xor_ln1311_10_fu_448_p2 = (tmp_fu_292_p3 ^ p_Result_10_fu_440_p3);

assign xor_ln1311_11_fu_462_p2 = (tmp_fu_292_p3 ^ p_Result_s_85_fu_454_p3);

assign xor_ln1311_12_fu_476_p2 = (tmp_fu_292_p3 ^ p_Result_11_fu_468_p3);

assign xor_ln1311_13_fu_490_p2 = (tmp_fu_292_p3 ^ p_Result_12_fu_482_p3);

assign xor_ln1311_14_fu_504_p2 = (tmp_fu_292_p3 ^ p_Result_13_fu_496_p3);

assign xor_ln1311_15_fu_518_p2 = (tmp_fu_292_p3 ^ p_Result_14_fu_510_p3);

assign xor_ln1311_16_fu_532_p2 = (tmp_fu_292_p3 ^ p_Result_15_fu_524_p3);

assign xor_ln1311_17_fu_546_p2 = (tmp_fu_292_p3 ^ p_Result_16_fu_538_p3);

assign xor_ln1311_18_fu_560_p2 = (tmp_fu_292_p3 ^ p_Result_17_fu_552_p3);

assign xor_ln1311_1_fu_322_p2 = (tmp_fu_292_p3 ^ p_Result_1_fu_314_p3);

assign xor_ln1311_2_fu_336_p2 = (tmp_fu_292_p3 ^ p_Result_2_fu_328_p3);

assign xor_ln1311_3_fu_350_p2 = (tmp_fu_292_p3 ^ p_Result_3_fu_342_p3);

assign xor_ln1311_4_fu_364_p2 = (tmp_fu_292_p3 ^ p_Result_4_fu_356_p3);

assign xor_ln1311_5_fu_378_p2 = (tmp_fu_292_p3 ^ p_Result_5_fu_370_p3);

assign xor_ln1311_6_fu_392_p2 = (tmp_fu_292_p3 ^ p_Result_6_fu_384_p3);

assign xor_ln1311_7_fu_406_p2 = (tmp_fu_292_p3 ^ p_Result_7_fu_398_p3);

assign xor_ln1311_8_fu_420_p2 = (tmp_fu_292_p3 ^ p_Result_8_fu_412_p3);

assign xor_ln1311_9_fu_434_p2 = (tmp_fu_292_p3 ^ p_Result_9_fu_426_p3);

assign xor_ln1311_fu_308_p2 = (tmp_fu_292_p3 ^ p_Result_s_fu_300_p3);

assign xor_ln1315_fu_1092_p2 = (tmp_reg_1264_pp0_iter14_reg ^ 1'd1);

assign y_V_fu_1137_p2 = (47'd64 + zext_ln1314_fu_1117_p1);

assign y_l_V_fu_1077_p2 = (zext_ln703_8_fu_1074_p1 + exp_x_msb_1_V_reg_1397_pp0_iter14_reg);

assign zext_ln1192_fu_921_p1 = shl_ln_fu_913_p4;

assign zext_ln1314_fu_1117_p1 = p_Val2_84_fu_1109_p3;

assign zext_ln544_1_fu_606_p1 = tmp_V_2_fu_596_p4;

assign zext_ln544_2_fu_667_p1 = tmp_V_1_fu_586_p4;

assign zext_ln544_3_fu_881_p1 = tmp_V_reg_1275_pp0_iter3_reg;

assign zext_ln544_4_fu_1007_p1 = p_Result_31_fu_991_p3;

assign zext_ln703_2_fu_808_p1 = f_x_msb_4_table_V_q0;

assign zext_ln703_7_fu_1033_p1 = exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter9_reg;

assign zext_ln703_8_fu_1074_p1 = y_lo_s_V_reg_1413;

assign zext_ln703_fu_831_p1 = x_msb_4_5_lsb_V_fu_798_p3;

assign zext_ln728_8_fu_909_p1 = rhs_V_fu_899_p5;

assign zext_ln728_9_fu_1023_p1 = rhs_V_9_fu_1015_p4;

assign zext_ln728_fu_827_p1 = lhs_V_fu_818_p4;

always @ (posedge ap_clk) begin
    exp_x_msb_3_4_lsb_m_1_V_reg_1367[0] <= 1'b0;
    exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter7_reg[0] <= 1'b0;
    exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter8_reg[0] <= 1'b0;
    exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter9_reg[0] <= 1'b0;
end

endmodule //monte_sim_dev_exp_core_32_16_50_s
