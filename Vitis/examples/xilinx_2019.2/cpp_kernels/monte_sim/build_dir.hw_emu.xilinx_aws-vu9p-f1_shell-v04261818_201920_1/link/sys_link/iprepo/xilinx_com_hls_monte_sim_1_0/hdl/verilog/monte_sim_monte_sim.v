// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="monte_sim_monte_sim,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=64,HLS_SYN_FF=8722,HLS_SYN_LUT=9331,HLS_VERSION=2019_2}" *)

module monte_sim_monte_sim (
        ap_clk,
        ap_rst_n,
        event_done,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        event_start,
        stall_start_ext,
        stall_done_ext,
        stall_start_str,
        stall_done_str,
        stall_start_int,
        stall_done_int
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_pp0_stage0 = 39'd512;
parameter    ap_ST_fsm_state13 = 39'd1024;
parameter    ap_ST_fsm_state14 = 39'd2048;
parameter    ap_ST_fsm_state15 = 39'd4096;
parameter    ap_ST_fsm_state16 = 39'd8192;
parameter    ap_ST_fsm_state17 = 39'd16384;
parameter    ap_ST_fsm_state18 = 39'd32768;
parameter    ap_ST_fsm_state19 = 39'd65536;
parameter    ap_ST_fsm_state20 = 39'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 39'd262144;
parameter    ap_ST_fsm_state24 = 39'd524288;
parameter    ap_ST_fsm_state25 = 39'd1048576;
parameter    ap_ST_fsm_state26 = 39'd2097152;
parameter    ap_ST_fsm_state27 = 39'd4194304;
parameter    ap_ST_fsm_state28 = 39'd8388608;
parameter    ap_ST_fsm_state29 = 39'd16777216;
parameter    ap_ST_fsm_state30 = 39'd33554432;
parameter    ap_ST_fsm_state31 = 39'd67108864;
parameter    ap_ST_fsm_state32 = 39'd134217728;
parameter    ap_ST_fsm_state33 = 39'd268435456;
parameter    ap_ST_fsm_state34 = 39'd536870912;
parameter    ap_ST_fsm_pp2_stage0 = 39'd1073741824;
parameter    ap_ST_fsm_state76 = 39'd2147483648;
parameter    ap_ST_fsm_state77 = 39'd4294967296;
parameter    ap_ST_fsm_pp3_stage0 = 39'd8589934592;
parameter    ap_ST_fsm_state81 = 39'd17179869184;
parameter    ap_ST_fsm_state82 = 39'd34359738368;
parameter    ap_ST_fsm_state83 = 39'd68719476736;
parameter    ap_ST_fsm_state84 = 39'd137438953472;
parameter    ap_ST_fsm_state85 = 39'd274877906944;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   event_done;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
output   event_start;
output   stall_start_ext;
output   stall_done_ext;
output   stall_start_str;
output   stall_done_str;
output   stall_start_int;
output   stall_done_int;

reg stall_start_ext;
reg stall_done_ext;
reg stall_start_str;
reg stall_done_str;
reg stall_start_int;
reg stall_done_int;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] in1_V;
wire   [63:0] in2_V;
wire   [63:0] out_r_V;
wire   [31:0] size;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln55_reg_1110;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln62_reg_1130;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state77;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln97_reg_1363;
reg   [0:0] icmp_ln97_reg_1363_pp3_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state85;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [30:0] j_0_reg_322;
reg   [30:0] j_0_reg_322_pp0_iter1_reg;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [30:0] j3_0_reg_334;
reg   [30:0] j3_0_reg_334_pp1_iter1_reg;
wire    ap_block_state21_pp1_stage0_iter0;
reg    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [30:0] j4_0_reg_346;
reg   [30:0] j4_0_reg_346_pp2_iter1_reg;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state35_pp2_stage0_iter0;
wire    ap_block_state36_pp2_stage0_iter1;
wire    ap_block_state37_pp2_stage0_iter2;
wire    ap_block_state38_pp2_stage0_iter3;
wire    ap_block_state39_pp2_stage0_iter4;
wire    ap_block_state40_pp2_stage0_iter5;
wire    ap_block_state41_pp2_stage0_iter6;
wire    ap_block_state42_pp2_stage0_iter7;
wire    ap_block_state43_pp2_stage0_iter8;
wire    ap_block_state44_pp2_stage0_iter9;
wire    ap_block_state45_pp2_stage0_iter10;
wire    ap_block_state46_pp2_stage0_iter11;
wire    ap_block_state47_pp2_stage0_iter12;
wire    ap_block_state48_pp2_stage0_iter13;
wire    ap_block_state49_pp2_stage0_iter14;
wire    ap_block_state50_pp2_stage0_iter15;
wire    ap_block_state51_pp2_stage0_iter16;
wire    ap_block_state52_pp2_stage0_iter17;
wire    ap_block_state53_pp2_stage0_iter18;
wire    ap_block_state54_pp2_stage0_iter19;
wire    ap_block_state55_pp2_stage0_iter20;
wire    ap_block_state56_pp2_stage0_iter21;
wire    ap_block_state57_pp2_stage0_iter22;
wire    ap_block_state58_pp2_stage0_iter23;
wire    ap_block_state59_pp2_stage0_iter24;
wire    ap_block_state60_pp2_stage0_iter25;
wire    ap_block_state61_pp2_stage0_iter26;
wire    ap_block_state62_pp2_stage0_iter27;
wire    ap_block_state63_pp2_stage0_iter28;
wire    ap_block_state64_pp2_stage0_iter29;
wire    ap_block_state65_pp2_stage0_iter30;
wire    ap_block_state66_pp2_stage0_iter31;
wire    ap_block_state67_pp2_stage0_iter32;
wire    ap_block_state68_pp2_stage0_iter33;
wire    ap_block_state69_pp2_stage0_iter34;
wire    ap_block_state70_pp2_stage0_iter35;
wire    ap_block_state71_pp2_stage0_iter36;
wire    ap_block_state72_pp2_stage0_iter37;
wire    ap_block_state73_pp2_stage0_iter38;
wire    ap_block_state74_pp2_stage0_iter39;
wire    ap_block_state75_pp2_stage0_iter40;
wire    ap_block_pp2_stage0_11001;
reg   [30:0] j4_0_reg_346_pp2_iter2_reg;
reg   [30:0] j4_0_reg_346_pp2_iter3_reg;
reg   [30:0] j4_0_reg_346_pp2_iter4_reg;
reg   [30:0] j4_0_reg_346_pp2_iter5_reg;
reg   [30:0] j4_0_reg_346_pp2_iter6_reg;
reg   [30:0] j4_0_reg_346_pp2_iter7_reg;
reg   [30:0] j5_0_reg_358;
wire   [31:0] v2_buffer_V_q0;
reg  signed [31:0] reg_374;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
reg   [31:0] size_read_reg_1033;
wire   [63:0] empty_fu_389_p1;
reg   [63:0] empty_reg_1039;
wire   [63:0] empty_40_fu_403_p1;
reg   [63:0] empty_40_reg_1044;
wire   [63:0] empty_41_fu_417_p1;
reg   [63:0] empty_41_reg_1049;
wire   [31:0] tmp_60_fu_491_p3;
reg   [31:0] tmp_60_reg_1074;
wire   [31:0] i_fu_504_p2;
reg   [31:0] i_reg_1082;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln46_fu_499_p2;
wire   [31:0] select_ln50_fu_520_p3;
reg   [31:0] select_ln50_reg_1087;
wire  signed [63:0] sext_ln58_fu_528_p1;
reg  signed [63:0] sext_ln58_reg_1098;
reg   [63:0] gmem_addr_reg_1104;
wire   [0:0] icmp_ln55_fu_547_p2;
reg   [0:0] icmp_ln55_reg_1110_pp0_iter1_reg;
wire   [30:0] j_fu_552_p2;
reg   [30:0] j_reg_1114;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] gmem_addr_read_reg_1119;
reg   [63:0] gmem_addr_1_reg_1124;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln62_fu_577_p2;
reg   [0:0] icmp_ln62_reg_1130_pp1_iter1_reg;
wire   [30:0] j_1_fu_582_p2;
reg   [30:0] j_1_reg_1134;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] gmem_addr_1_read_reg_1139;
wire  signed [63:0] r_V_2_fu_593_p1;
reg  signed [63:0] r_V_2_reg_1144;
wire    ap_CS_fsm_state26;
reg   [0:0] tmp_61_reg_1151;
wire    ap_CS_fsm_state29;
reg   [30:0] lshr_ln709_1_reg_1156;
reg   [30:0] trunc_ln709_1_reg_1161;
wire   [31:0] select_ln709_fu_659_p3;
reg  signed [31:0] select_ln709_reg_1166;
wire    ap_CS_fsm_state31;
wire   [63:0] lhs_V_1_fu_693_p3;
reg   [63:0] lhs_V_1_reg_1181;
wire    ap_CS_fsm_state34;
wire  signed [47:0] sext_ln74_fu_701_p1;
reg  signed [47:0] sext_ln74_reg_1186;
wire   [0:0] icmp_ln74_fu_709_p2;
reg   [0:0] icmp_ln74_reg_1191;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter1_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter2_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter3_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter4_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter5_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter6_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter7_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter8_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter9_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter10_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter11_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter12_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter13_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter14_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter15_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter16_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter17_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter18_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter19_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter20_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter21_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter22_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter23_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter24_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter25_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter26_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter27_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter28_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter29_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter30_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter31_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter32_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter33_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter34_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter35_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter36_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter37_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter38_reg;
reg   [0:0] icmp_ln74_reg_1191_pp2_iter39_reg;
wire   [30:0] j_2_fu_714_p2;
reg   [30:0] j_2_reg_1195;
reg    ap_enable_reg_pp2_iter0;
wire   [63:0] zext_ln78_fu_720_p1;
reg   [63:0] zext_ln78_reg_1200;
reg   [63:0] zext_ln78_reg_1200_pp2_iter9_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter10_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter11_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter12_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter13_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter14_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter15_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter16_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter17_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter18_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter19_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter20_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter21_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter22_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter23_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter24_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter25_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter26_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter27_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter28_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter29_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter30_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter31_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter32_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter33_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter34_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter35_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter36_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter37_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter38_reg;
reg   [63:0] zext_ln78_reg_1200_pp2_iter39_reg;
wire   [31:0] v1_buffer_V_q0;
reg  signed [31:0] x_V_reg_1210;
reg    ap_enable_reg_pp2_iter9;
wire   [23:0] grp_sqrt_fixed_32_16_s_fu_369_ap_return;
reg   [23:0] hls_sq_V_reg_1220;
wire  signed [63:0] grp_fu_728_p2;
reg  signed [63:0] r_V_4_reg_1225;
wire   [63:0] grp_fu_736_p2;
reg   [63:0] mul_ln1192_reg_1235;
reg  signed [31:0] xo_V_reg_1240;
reg  signed [31:0] xo_V_reg_1240_pp2_iter20_reg;
reg  signed [31:0] xo_V_reg_1240_pp2_iter21_reg;
reg  signed [31:0] xo_V_reg_1240_pp2_iter22_reg;
reg  signed [31:0] xo_V_reg_1240_pp2_iter23_reg;
reg  signed [31:0] xo_V_reg_1240_pp2_iter24_reg;
reg  signed [31:0] xo_V_reg_1240_pp2_iter25_reg;
reg  signed [31:0] xo_V_reg_1240_pp2_iter26_reg;
reg  signed [31:0] xo_V_reg_1240_pp2_iter27_reg;
reg  signed [31:0] xo_V_reg_1240_pp2_iter28_reg;
reg  signed [31:0] xo_V_reg_1240_pp2_iter29_reg;
reg  signed [31:0] xo_V_reg_1240_pp2_iter30_reg;
wire  signed [47:0] sext_ln1116_fu_755_p1;
reg  signed [47:0] sext_ln1116_reg_1246;
reg  signed [47:0] sext_ln1116_reg_1246_pp2_iter21_reg;
reg  signed [47:0] sext_ln1116_reg_1246_pp2_iter22_reg;
reg  signed [47:0] sext_ln1116_reg_1246_pp2_iter23_reg;
reg  signed [31:0] x2_V_reg_1253;
reg  signed [31:0] x2_V_reg_1253_pp2_iter24_reg;
reg  signed [31:0] x2_V_reg_1253_pp2_iter25_reg;
reg  signed [31:0] x2_V_reg_1253_pp2_iter26_reg;
reg  signed [31:0] x2_V_reg_1253_pp2_iter27_reg;
reg  signed [31:0] x2_V_reg_1253_pp2_iter28_reg;
reg  signed [31:0] x2_V_reg_1253_pp2_iter29_reg;
reg  signed [31:0] x2_V_reg_1253_pp2_iter30_reg;
wire  signed [47:0] sext_ln1116_1_fu_774_p1;
reg  signed [47:0] sext_ln1116_1_reg_1259;
reg  signed [47:0] sext_ln1116_1_reg_1259_pp2_iter25_reg;
reg  signed [47:0] sext_ln1116_1_reg_1259_pp2_iter26_reg;
reg  signed [47:0] sext_ln1116_1_reg_1259_pp2_iter27_reg;
reg  signed [31:0] x3_V_reg_1267;
reg  signed [31:0] x4_V_reg_1273;
wire  signed [47:0] sext_ln1118_1_fu_811_p1;
wire  signed [47:0] sext_ln1118_2_fu_825_p1;
reg  signed [47:0] sext_ln1118_2_reg_1291;
reg  signed [47:0] sext_ln1118_2_reg_1291_pp2_iter29_reg;
reg  signed [47:0] sext_ln1118_2_reg_1291_pp2_iter30_reg;
reg  signed [47:0] sext_ln1118_2_reg_1291_pp2_iter31_reg;
reg  signed [31:0] x5_V_reg_1297;
reg  signed [31:0] x6_V_reg_1302;
reg  signed [31:0] x7_V_reg_1307;
wire   [47:0] add_ln700_2_fu_904_p2;
reg   [47:0] add_ln700_2_reg_1312;
reg   [47:0] add_ln700_2_reg_1312_pp2_iter32_reg;
reg   [47:0] add_ln700_2_reg_1312_pp2_iter33_reg;
reg   [47:0] add_ln700_2_reg_1312_pp2_iter34_reg;
wire   [47:0] add_ln700_4_fu_951_p2;
reg   [47:0] add_ln700_4_reg_1332;
wire   [39:0] grp_fu_927_p2;
reg   [39:0] r_V_30_reg_1337;
wire   [36:0] grp_fu_936_p2;
reg   [36:0] r_V_31_reg_1342;
reg   [31:0] s_V_reg_1352;
reg   [63:0] gmem_addr_2_reg_1357;
wire    ap_CS_fsm_state76;
wire   [0:0] icmp_ln97_fu_1017_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state78_pp3_stage0_iter0;
wire    ap_block_state79_pp3_stage0_iter1;
wire    ap_block_state80_pp3_stage0_iter2;
reg    ap_block_state80_io;
reg    ap_block_pp3_stage0_11001;
wire   [30:0] j_3_fu_1022_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [31:0] vout_buffer_V_q0;
reg   [31:0] vout_buffer_V_load_reg_1377;
reg    ap_enable_reg_pp3_iter1;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state35;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
reg    ap_enable_reg_pp2_iter17;
reg    ap_enable_reg_pp2_iter18;
reg    ap_enable_reg_pp2_iter19;
reg    ap_enable_reg_pp2_iter20;
reg    ap_enable_reg_pp2_iter21;
reg    ap_enable_reg_pp2_iter22;
reg    ap_enable_reg_pp2_iter23;
reg    ap_enable_reg_pp2_iter24;
reg    ap_enable_reg_pp2_iter25;
reg    ap_enable_reg_pp2_iter26;
reg    ap_enable_reg_pp2_iter27;
reg    ap_enable_reg_pp2_iter28;
reg    ap_enable_reg_pp2_iter29;
reg    ap_enable_reg_pp2_iter30;
reg    ap_enable_reg_pp2_iter31;
reg    ap_enable_reg_pp2_iter32;
reg    ap_enable_reg_pp2_iter33;
reg    ap_enable_reg_pp2_iter34;
reg    ap_enable_reg_pp2_iter35;
reg    ap_enable_reg_pp2_iter36;
reg    ap_enable_reg_pp2_iter37;
reg    ap_enable_reg_pp2_iter38;
reg    ap_enable_reg_pp2_iter39;
reg    ap_enable_reg_pp2_iter40;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state78;
reg   [9:0] v1_buffer_V_address0;
reg    v1_buffer_V_ce0;
reg    v1_buffer_V_we0;
reg   [9:0] v2_buffer_V_address0;
reg    v2_buffer_V_ce0;
reg    v2_buffer_V_we0;
wire   [9:0] v2_buffer_V_address1;
reg    v2_buffer_V_ce1;
wire   [31:0] v2_buffer_V_q1;
reg   [9:0] vout_buffer_V_address0;
reg    vout_buffer_V_ce0;
reg    vout_buffer_V_we0;
wire    grp_sqrt_fixed_32_16_s_fu_369_ap_ext_blocking_n;
wire    grp_sqrt_fixed_32_16_s_fu_369_ap_str_blocking_n;
wire    grp_sqrt_fixed_32_16_s_fu_369_ap_int_blocking_n;
reg  signed [31:0] i_0_reg_311;
reg   [30:0] ap_phi_mux_j_0_phi_fu_326_p4;
reg   [30:0] ap_phi_mux_j3_0_phi_fu_338_p4;
reg   [30:0] ap_phi_mux_j4_0_phi_fu_350_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln58_fu_558_p1;
wire   [63:0] zext_ln65_fu_588_p1;
wire   [63:0] zext_ln100_fu_1028_p1;
wire   [63:0] add_ln203_fu_532_p2;
wire   [63:0] add_ln203_1_fu_563_p2;
wire   [63:0] add_ln203_2_fu_1003_p2;
wire    ap_block_pp3_stage0_01001;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state33;
wire   [61:0] out_r_V5_fu_379_p4;
wire   [61:0] in2_V3_fu_393_p4;
wire   [61:0] in1_V1_fu_407_p4;
wire   [31:0] add_ln46_fu_429_p2;
wire   [31:0] sub_ln46_fu_443_p2;
wire   [21:0] p_lshr_fu_449_p4;
wire   [0:0] tmp_58_fu_435_p3;
wire   [21:0] sub_ln46_1_fu_459_p2;
wire   [21:0] tmp_59_fu_465_p4;
wire   [0:0] tmp_57_fu_421_p3;
wire   [21:0] select_ln46_fu_475_p3;
wire   [21:0] select_ln46_1_fu_483_p3;
wire   [0:0] icmp_ln50_fu_510_p2;
wire   [31:0] chunk_size_fu_515_p2;
wire   [31:0] zext_ln55_fu_543_p1;
wire   [31:0] zext_ln62_fu_573_p1;
wire  signed [31:0] grp_fu_597_p0;
wire  signed [31:0] grp_fu_597_p1;
wire   [63:0] grp_fu_597_p2;
wire   [31:0] hls_p_V_fu_603_p4;
wire   [31:0] sub_ln709_fu_621_p2;
wire   [31:0] zext_ln709_1_fu_647_p1;
wire   [31:0] sub_ln709_1_fu_650_p2;
wire   [31:0] zext_ln709_fu_656_p1;
wire   [47:0] lhs_V_fu_679_p3;
wire   [47:0] grp_fu_673_p2;
wire   [47:0] sub_ln728_fu_687_p2;
wire   [31:0] zext_ln74_fu_705_p1;
wire  signed [31:0] grp_fu_728_p0;
wire   [23:0] grp_fu_736_p1;
wire   [63:0] ret_V_fu_741_p2;
wire  signed [31:0] grp_fu_758_p0;
wire  signed [31:0] grp_fu_758_p1;
wire   [47:0] grp_fu_758_p2;
wire  signed [31:0] grp_fu_777_p0;
wire  signed [31:0] grp_fu_777_p1;
wire  signed [31:0] grp_fu_782_p0;
wire  signed [31:0] grp_fu_782_p1;
wire   [47:0] grp_fu_777_p2;
wire   [47:0] grp_fu_782_p2;
wire  signed [31:0] grp_fu_814_p0;
wire  signed [31:0] grp_fu_814_p1;
wire  signed [31:0] grp_fu_819_p0;
wire  signed [31:0] grp_fu_819_p1;
wire  signed [31:0] grp_fu_828_p1;
wire   [14:0] grp_fu_834_p1;
wire   [47:0] grp_fu_814_p2;
wire   [47:0] grp_fu_819_p2;
wire   [47:0] grp_fu_828_p2;
wire   [31:0] add_ln700_fu_877_p2;
wire   [46:0] r_V_26_fu_870_p3;
wire   [47:0] shl_ln_fu_882_p3;
wire  signed [47:0] sext_ln700_fu_890_p1;
wire   [46:0] grp_fu_834_p2;
wire   [47:0] add_ln700_1_fu_894_p2;
wire  signed [47:0] sext_ln700_1_fu_900_p1;
wire  signed [31:0] grp_fu_910_p0;
wire   [15:0] grp_fu_910_p1;
wire   [10:0] grp_fu_918_p1;
wire   [7:0] grp_fu_927_p1;
wire   [4:0] grp_fu_936_p1;
wire   [47:0] grp_fu_910_p2;
wire   [42:0] grp_fu_918_p2;
wire   [47:0] add_ln700_3_fu_942_p2;
wire  signed [47:0] sext_ln700_2_fu_947_p1;
wire  signed [47:0] sext_ln700_3_fu_957_p1;
wire   [47:0] add_ln700_5_fu_960_p2;
wire  signed [47:0] sext_ln1192_fu_965_p1;
wire   [47:0] ret_V_1_fu_968_p2;
wire  signed [31:0] exp_result_V_fu_974_p4;
wire  signed [31:0] grp_fu_988_p0;
wire   [47:0] grp_fu_988_p2;
wire   [31:0] zext_ln97_fu_1013_p1;
reg   [38:0] ap_NS_fsm;
wire    ap_ext_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
wire    ap_ext_blocking_n;
wire    ap_str_blocking_n;
wire    ap_int_blocking_n;
reg    ap_ext_blocking_n_reg;
reg    ap_str_blocking_n_reg;
reg    ap_int_blocking_n_reg;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [63:0] grp_fu_736_p10;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 39'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
#0 ap_enable_reg_pp2_iter18 = 1'b0;
#0 ap_enable_reg_pp2_iter19 = 1'b0;
#0 ap_enable_reg_pp2_iter20 = 1'b0;
#0 ap_enable_reg_pp2_iter21 = 1'b0;
#0 ap_enable_reg_pp2_iter22 = 1'b0;
#0 ap_enable_reg_pp2_iter23 = 1'b0;
#0 ap_enable_reg_pp2_iter24 = 1'b0;
#0 ap_enable_reg_pp2_iter25 = 1'b0;
#0 ap_enable_reg_pp2_iter26 = 1'b0;
#0 ap_enable_reg_pp2_iter27 = 1'b0;
#0 ap_enable_reg_pp2_iter28 = 1'b0;
#0 ap_enable_reg_pp2_iter29 = 1'b0;
#0 ap_enable_reg_pp2_iter30 = 1'b0;
#0 ap_enable_reg_pp2_iter31 = 1'b0;
#0 ap_enable_reg_pp2_iter32 = 1'b0;
#0 ap_enable_reg_pp2_iter33 = 1'b0;
#0 ap_enable_reg_pp2_iter34 = 1'b0;
#0 ap_enable_reg_pp2_iter35 = 1'b0;
#0 ap_enable_reg_pp2_iter36 = 1'b0;
#0 ap_enable_reg_pp2_iter37 = 1'b0;
#0 ap_enable_reg_pp2_iter38 = 1'b0;
#0 ap_enable_reg_pp2_iter39 = 1'b0;
#0 ap_enable_reg_pp2_iter40 = 1'b0;
end

monte_sim_monte_sim_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
monte_sim_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .event_start(event_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in1_V(in1_V),
    .in2_V(in2_V),
    .out_r_V(out_r_V),
    .size(size)
);

monte_sim_monte_sim_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
monte_sim_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(select_ln50_reg_1087),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_2_reg_1357),
    .I_AWID(1'd0),
    .I_AWLEN(select_ln50_reg_1087),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(vout_buffer_V_load_reg_1377),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

monte_sim_monte_sim_v1_buffer_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
v1_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v1_buffer_V_address0),
    .ce0(v1_buffer_V_ce0),
    .we0(v1_buffer_V_we0),
    .d0(gmem_addr_read_reg_1119),
    .q0(v1_buffer_V_q0)
);

monte_sim_monte_sim_v2_buffer_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
v2_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v2_buffer_V_address0),
    .ce0(v2_buffer_V_ce0),
    .we0(v2_buffer_V_we0),
    .d0(gmem_addr_1_read_reg_1139),
    .q0(v2_buffer_V_q0),
    .address1(v2_buffer_V_address1),
    .ce1(v2_buffer_V_ce1),
    .q1(v2_buffer_V_q1)
);

monte_sim_monte_sim_v1_buffer_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
vout_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(vout_buffer_V_address0),
    .ce0(vout_buffer_V_ce0),
    .we0(vout_buffer_V_we0),
    .d0(s_V_reg_1352),
    .q0(vout_buffer_V_q0)
);

monte_sim_sqrt_fixed_32_16_s grp_sqrt_fixed_32_16_s_fu_369(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x_V(reg_374),
    .ap_return(grp_sqrt_fixed_32_16_s_fu_369_ap_return),
    .ap_ext_blocking_n(grp_sqrt_fixed_32_16_s_fu_369_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_sqrt_fixed_32_16_s_fu_369_ap_str_blocking_n),
    .ap_int_blocking_n(grp_sqrt_fixed_32_16_s_fu_369_ap_int_blocking_n)
);

monte_sim_monte_sim_mul_32s_32s_64_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
monte_sim_mul_32s_32s_64_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_597_p0),
    .din1(grp_fu_597_p1),
    .ce(1'b1),
    .dout(grp_fu_597_p2)
);

monte_sim_monte_sim_mul_32s_32s_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
monte_sim_mul_32s_32s_48_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_374),
    .din1(select_ln709_reg_1166),
    .ce(1'b1),
    .dout(grp_fu_673_p2)
);

monte_sim_monte_sim_mul_32s_32s_64_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
monte_sim_mul_32s_32s_64_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_728_p0),
    .din1(x_V_reg_1210),
    .ce(1'b1),
    .dout(grp_fu_728_p2)
);

monte_sim_monte_sim_mul_64s_24ns_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 64 ))
monte_sim_mul_64s_24ns_64_5_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_4_reg_1225),
    .din1(grp_fu_736_p1),
    .ce(1'b1),
    .dout(grp_fu_736_p2)
);

monte_sim_monte_sim_mul_32s_32s_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
monte_sim_mul_32s_32s_48_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_758_p0),
    .din1(grp_fu_758_p1),
    .ce(1'b1),
    .dout(grp_fu_758_p2)
);

monte_sim_monte_sim_mul_32s_32s_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
monte_sim_mul_32s_32s_48_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_777_p0),
    .din1(grp_fu_777_p1),
    .ce(1'b1),
    .dout(grp_fu_777_p2)
);

monte_sim_monte_sim_mul_32s_32s_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
monte_sim_mul_32s_32s_48_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_782_p0),
    .din1(grp_fu_782_p1),
    .ce(1'b1),
    .dout(grp_fu_782_p2)
);

monte_sim_monte_sim_mul_32s_32s_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
monte_sim_mul_32s_32s_48_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_814_p0),
    .din1(grp_fu_814_p1),
    .ce(1'b1),
    .dout(grp_fu_814_p2)
);

monte_sim_monte_sim_mul_32s_32s_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
monte_sim_mul_32s_32s_48_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_819_p0),
    .din1(grp_fu_819_p1),
    .ce(1'b1),
    .dout(grp_fu_819_p2)
);

monte_sim_monte_sim_mul_32s_32s_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
monte_sim_mul_32s_32s_48_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x4_V_reg_1273),
    .din1(grp_fu_828_p1),
    .ce(1'b1),
    .dout(grp_fu_828_p2)
);

monte_sim_monte_sim_mul_32s_15ns_47_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 47 ))
monte_sim_mul_32s_15ns_47_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x3_V_reg_1267),
    .din1(grp_fu_834_p1),
    .ce(1'b1),
    .dout(grp_fu_834_p2)
);

monte_sim_monte_sim_mul_32s_16ns_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
monte_sim_mul_32s_16ns_48_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_910_p0),
    .din1(grp_fu_910_p1),
    .ce(1'b1),
    .dout(grp_fu_910_p2)
);

monte_sim_monte_sim_mul_32s_11ns_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 43 ))
monte_sim_mul_32s_11ns_43_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x5_V_reg_1297),
    .din1(grp_fu_918_p1),
    .ce(1'b1),
    .dout(grp_fu_918_p2)
);

monte_sim_monte_sim_mul_32s_8ns_40_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
monte_sim_mul_32s_8ns_40_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x6_V_reg_1302),
    .din1(grp_fu_927_p1),
    .ce(1'b1),
    .dout(grp_fu_927_p2)
);

monte_sim_monte_sim_mul_32s_5ns_37_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 37 ))
monte_sim_mul_32s_5ns_37_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x7_V_reg_1307),
    .din1(grp_fu_936_p1),
    .ce(1'b1),
    .dout(grp_fu_936_p2)
);

monte_sim_monte_sim_mul_32s_32s_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
monte_sim_mul_32s_32s_48_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_988_p0),
    .din1(exp_result_V_fu_974_p4),
    .ce(1'b1),
    .dout(grp_fu_988_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state35) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state34)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state35)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state35);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter30 <= ap_enable_reg_pp2_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter31 <= ap_enable_reg_pp2_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter32 <= ap_enable_reg_pp2_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter33 <= ap_enable_reg_pp2_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter34 <= ap_enable_reg_pp2_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter35 <= ap_enable_reg_pp2_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter36 <= ap_enable_reg_pp2_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter37 <= ap_enable_reg_pp2_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter38 <= ap_enable_reg_pp2_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter39 <= ap_enable_reg_pp2_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter40 <= ap_enable_reg_pp2_iter39;
        end else if ((1'b1 == ap_CS_fsm_state34)) begin
            ap_enable_reg_pp2_iter40 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state78) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state78)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state78);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_ext_blocking_n_reg <= ap_ext_blocking_n;
end

always @ (posedge ap_clk) begin
    ap_int_blocking_n_reg <= ap_int_blocking_n;
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    ap_str_blocking_n_reg <= ap_str_blocking_n;
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_311 <= 32'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
        i_0_reg_311 <= i_reg_1082;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j3_0_reg_334 <= 31'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln62_reg_1130 == 1'd1))) begin
        j3_0_reg_334 <= j_1_reg_1134;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln74_reg_1191 == 1'd1))) begin
        j4_0_reg_346 <= j_2_reg_1195;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        j4_0_reg_346 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
        j5_0_reg_358 <= 31'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln97_fu_1017_p2 == 1'd1))) begin
        j5_0_reg_358 <= j_3_fu_1022_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_1110 == 1'd1))) begin
        j_0_reg_322 <= j_reg_1114;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_322 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter30_reg == 1'd1))) begin
        add_ln700_2_reg_1312 <= add_ln700_2_fu_904_p2;
        x5_V_reg_1297 <= {{grp_fu_814_p2[47:16]}};
        x6_V_reg_1302 <= {{grp_fu_819_p2[47:16]}};
        x7_V_reg_1307 <= {{grp_fu_828_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        add_ln700_2_reg_1312_pp2_iter32_reg <= add_ln700_2_reg_1312;
        add_ln700_2_reg_1312_pp2_iter33_reg <= add_ln700_2_reg_1312_pp2_iter32_reg;
        add_ln700_2_reg_1312_pp2_iter34_reg <= add_ln700_2_reg_1312_pp2_iter33_reg;
        icmp_ln74_reg_1191_pp2_iter10_reg <= icmp_ln74_reg_1191_pp2_iter9_reg;
        icmp_ln74_reg_1191_pp2_iter11_reg <= icmp_ln74_reg_1191_pp2_iter10_reg;
        icmp_ln74_reg_1191_pp2_iter12_reg <= icmp_ln74_reg_1191_pp2_iter11_reg;
        icmp_ln74_reg_1191_pp2_iter13_reg <= icmp_ln74_reg_1191_pp2_iter12_reg;
        icmp_ln74_reg_1191_pp2_iter14_reg <= icmp_ln74_reg_1191_pp2_iter13_reg;
        icmp_ln74_reg_1191_pp2_iter15_reg <= icmp_ln74_reg_1191_pp2_iter14_reg;
        icmp_ln74_reg_1191_pp2_iter16_reg <= icmp_ln74_reg_1191_pp2_iter15_reg;
        icmp_ln74_reg_1191_pp2_iter17_reg <= icmp_ln74_reg_1191_pp2_iter16_reg;
        icmp_ln74_reg_1191_pp2_iter18_reg <= icmp_ln74_reg_1191_pp2_iter17_reg;
        icmp_ln74_reg_1191_pp2_iter19_reg <= icmp_ln74_reg_1191_pp2_iter18_reg;
        icmp_ln74_reg_1191_pp2_iter20_reg <= icmp_ln74_reg_1191_pp2_iter19_reg;
        icmp_ln74_reg_1191_pp2_iter21_reg <= icmp_ln74_reg_1191_pp2_iter20_reg;
        icmp_ln74_reg_1191_pp2_iter22_reg <= icmp_ln74_reg_1191_pp2_iter21_reg;
        icmp_ln74_reg_1191_pp2_iter23_reg <= icmp_ln74_reg_1191_pp2_iter22_reg;
        icmp_ln74_reg_1191_pp2_iter24_reg <= icmp_ln74_reg_1191_pp2_iter23_reg;
        icmp_ln74_reg_1191_pp2_iter25_reg <= icmp_ln74_reg_1191_pp2_iter24_reg;
        icmp_ln74_reg_1191_pp2_iter26_reg <= icmp_ln74_reg_1191_pp2_iter25_reg;
        icmp_ln74_reg_1191_pp2_iter27_reg <= icmp_ln74_reg_1191_pp2_iter26_reg;
        icmp_ln74_reg_1191_pp2_iter28_reg <= icmp_ln74_reg_1191_pp2_iter27_reg;
        icmp_ln74_reg_1191_pp2_iter29_reg <= icmp_ln74_reg_1191_pp2_iter28_reg;
        icmp_ln74_reg_1191_pp2_iter2_reg <= icmp_ln74_reg_1191_pp2_iter1_reg;
        icmp_ln74_reg_1191_pp2_iter30_reg <= icmp_ln74_reg_1191_pp2_iter29_reg;
        icmp_ln74_reg_1191_pp2_iter31_reg <= icmp_ln74_reg_1191_pp2_iter30_reg;
        icmp_ln74_reg_1191_pp2_iter32_reg <= icmp_ln74_reg_1191_pp2_iter31_reg;
        icmp_ln74_reg_1191_pp2_iter33_reg <= icmp_ln74_reg_1191_pp2_iter32_reg;
        icmp_ln74_reg_1191_pp2_iter34_reg <= icmp_ln74_reg_1191_pp2_iter33_reg;
        icmp_ln74_reg_1191_pp2_iter35_reg <= icmp_ln74_reg_1191_pp2_iter34_reg;
        icmp_ln74_reg_1191_pp2_iter36_reg <= icmp_ln74_reg_1191_pp2_iter35_reg;
        icmp_ln74_reg_1191_pp2_iter37_reg <= icmp_ln74_reg_1191_pp2_iter36_reg;
        icmp_ln74_reg_1191_pp2_iter38_reg <= icmp_ln74_reg_1191_pp2_iter37_reg;
        icmp_ln74_reg_1191_pp2_iter39_reg <= icmp_ln74_reg_1191_pp2_iter38_reg;
        icmp_ln74_reg_1191_pp2_iter3_reg <= icmp_ln74_reg_1191_pp2_iter2_reg;
        icmp_ln74_reg_1191_pp2_iter4_reg <= icmp_ln74_reg_1191_pp2_iter3_reg;
        icmp_ln74_reg_1191_pp2_iter5_reg <= icmp_ln74_reg_1191_pp2_iter4_reg;
        icmp_ln74_reg_1191_pp2_iter6_reg <= icmp_ln74_reg_1191_pp2_iter5_reg;
        icmp_ln74_reg_1191_pp2_iter7_reg <= icmp_ln74_reg_1191_pp2_iter6_reg;
        icmp_ln74_reg_1191_pp2_iter8_reg <= icmp_ln74_reg_1191_pp2_iter7_reg;
        icmp_ln74_reg_1191_pp2_iter9_reg <= icmp_ln74_reg_1191_pp2_iter8_reg;
        j4_0_reg_346_pp2_iter2_reg <= j4_0_reg_346_pp2_iter1_reg;
        j4_0_reg_346_pp2_iter3_reg <= j4_0_reg_346_pp2_iter2_reg;
        j4_0_reg_346_pp2_iter4_reg <= j4_0_reg_346_pp2_iter3_reg;
        j4_0_reg_346_pp2_iter5_reg <= j4_0_reg_346_pp2_iter4_reg;
        j4_0_reg_346_pp2_iter6_reg <= j4_0_reg_346_pp2_iter5_reg;
        j4_0_reg_346_pp2_iter7_reg <= j4_0_reg_346_pp2_iter6_reg;
        sext_ln1116_1_reg_1259_pp2_iter25_reg <= sext_ln1116_1_reg_1259;
        sext_ln1116_1_reg_1259_pp2_iter26_reg <= sext_ln1116_1_reg_1259_pp2_iter25_reg;
        sext_ln1116_1_reg_1259_pp2_iter27_reg <= sext_ln1116_1_reg_1259_pp2_iter26_reg;
        sext_ln1116_reg_1246_pp2_iter21_reg <= sext_ln1116_reg_1246;
        sext_ln1116_reg_1246_pp2_iter22_reg <= sext_ln1116_reg_1246_pp2_iter21_reg;
        sext_ln1116_reg_1246_pp2_iter23_reg <= sext_ln1116_reg_1246_pp2_iter22_reg;
        sext_ln1118_2_reg_1291_pp2_iter29_reg <= sext_ln1118_2_reg_1291;
        sext_ln1118_2_reg_1291_pp2_iter30_reg <= sext_ln1118_2_reg_1291_pp2_iter29_reg;
        sext_ln1118_2_reg_1291_pp2_iter31_reg <= sext_ln1118_2_reg_1291_pp2_iter30_reg;
        x2_V_reg_1253_pp2_iter24_reg <= x2_V_reg_1253;
        x2_V_reg_1253_pp2_iter25_reg <= x2_V_reg_1253_pp2_iter24_reg;
        x2_V_reg_1253_pp2_iter26_reg <= x2_V_reg_1253_pp2_iter25_reg;
        x2_V_reg_1253_pp2_iter27_reg <= x2_V_reg_1253_pp2_iter26_reg;
        x2_V_reg_1253_pp2_iter28_reg <= x2_V_reg_1253_pp2_iter27_reg;
        x2_V_reg_1253_pp2_iter29_reg <= x2_V_reg_1253_pp2_iter28_reg;
        x2_V_reg_1253_pp2_iter30_reg <= x2_V_reg_1253_pp2_iter29_reg;
        xo_V_reg_1240_pp2_iter20_reg <= xo_V_reg_1240;
        xo_V_reg_1240_pp2_iter21_reg <= xo_V_reg_1240_pp2_iter20_reg;
        xo_V_reg_1240_pp2_iter22_reg <= xo_V_reg_1240_pp2_iter21_reg;
        xo_V_reg_1240_pp2_iter23_reg <= xo_V_reg_1240_pp2_iter22_reg;
        xo_V_reg_1240_pp2_iter24_reg <= xo_V_reg_1240_pp2_iter23_reg;
        xo_V_reg_1240_pp2_iter25_reg <= xo_V_reg_1240_pp2_iter24_reg;
        xo_V_reg_1240_pp2_iter26_reg <= xo_V_reg_1240_pp2_iter25_reg;
        xo_V_reg_1240_pp2_iter27_reg <= xo_V_reg_1240_pp2_iter26_reg;
        xo_V_reg_1240_pp2_iter28_reg <= xo_V_reg_1240_pp2_iter27_reg;
        xo_V_reg_1240_pp2_iter29_reg <= xo_V_reg_1240_pp2_iter28_reg;
        xo_V_reg_1240_pp2_iter30_reg <= xo_V_reg_1240_pp2_iter29_reg;
        zext_ln78_reg_1200_pp2_iter10_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter9_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter11_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter10_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter12_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter11_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter13_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter12_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter14_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter13_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter15_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter14_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter16_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter15_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter17_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter16_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter18_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter17_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter19_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter18_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter20_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter19_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter21_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter20_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter22_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter21_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter23_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter22_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter24_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter23_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter25_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter24_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter26_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter25_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter27_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter26_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter28_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter27_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter29_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter28_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter30_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter29_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter31_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter30_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter32_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter31_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter33_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter32_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter34_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter33_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter35_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter34_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter36_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter35_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter37_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter36_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter38_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter37_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter39_reg[30 : 0] <= zext_ln78_reg_1200_pp2_iter38_reg[30 : 0];
        zext_ln78_reg_1200_pp2_iter9_reg[30 : 0] <= zext_ln78_reg_1200[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter34_reg == 1'd1))) begin
        add_ln700_4_reg_1332 <= add_ln700_4_fu_951_p2;
        r_V_30_reg_1337 <= grp_fu_927_p2;
        r_V_31_reg_1342 <= grp_fu_936_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_40_reg_1044[61 : 0] <= empty_40_fu_403_p1[61 : 0];
        empty_41_reg_1049[61 : 0] <= empty_41_fu_417_p1[61 : 0];
        empty_reg_1039[61 : 0] <= empty_fu_389_p1[61 : 0];
        size_read_reg_1033 <= size;
        tmp_60_reg_1074[31 : 10] <= tmp_60_fu_491_p3[31 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln62_reg_1130 == 1'd1))) begin
        gmem_addr_1_read_reg_1139 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_addr_1_reg_1124 <= add_ln203_1_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        gmem_addr_2_reg_1357 <= add_ln203_2_fu_1003_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_1110 == 1'd1))) begin
        gmem_addr_read_reg_1119 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_addr_reg_1104 <= add_ln203_fu_532_p2;
        i_reg_1082 <= i_fu_504_p2;
        select_ln50_reg_1087 <= select_ln50_fu_520_p3;
        sext_ln58_reg_1098 <= sext_ln58_fu_528_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter12_reg == 1'd1))) begin
        hls_sq_V_reg_1220 <= grp_sqrt_fixed_32_16_s_fu_369_ap_return;
        r_V_4_reg_1225 <= grp_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln55_reg_1110 <= icmp_ln55_fu_547_p2;
        icmp_ln55_reg_1110_pp0_iter1_reg <= icmp_ln55_reg_1110;
        j_0_reg_322_pp0_iter1_reg <= j_0_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln62_reg_1130 <= icmp_ln62_fu_577_p2;
        icmp_ln62_reg_1130_pp1_iter1_reg <= icmp_ln62_reg_1130;
        j3_0_reg_334_pp1_iter1_reg <= j3_0_reg_334;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln74_reg_1191 <= icmp_ln74_fu_709_p2;
        icmp_ln74_reg_1191_pp2_iter1_reg <= icmp_ln74_reg_1191;
        j4_0_reg_346_pp2_iter1_reg <= j4_0_reg_346;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln97_reg_1363 <= icmp_ln97_fu_1017_p2;
        icmp_ln97_reg_1363_pp3_iter1_reg <= icmp_ln97_reg_1363;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_1_reg_1134 <= j_1_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_2_reg_1195 <= j_2_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_1114 <= j_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        lhs_V_1_reg_1181[63 : 16] <= lhs_V_1_fu_693_p3[63 : 16];
        sext_ln74_reg_1186 <= sext_ln74_fu_701_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        lshr_ln709_1_reg_1156 <= {{sub_ln709_fu_621_p2[31:1]}};
        tmp_61_reg_1151 <= grp_fu_597_p2[32'd47];
        trunc_ln709_1_reg_1161 <= {{grp_fu_597_p2[47:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter17_reg == 1'd1))) begin
        mul_ln1192_reg_1235 <= grp_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        r_V_2_reg_1144 <= r_V_2_fu_593_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_374 <= v2_buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter38_reg == 1'd1))) begin
        s_V_reg_1352 <= {{grp_fu_988_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        select_ln709_reg_1166 <= select_ln709_fu_659_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter23_reg == 1'd1))) begin
        sext_ln1116_1_reg_1259 <= sext_ln1116_1_fu_774_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter19_reg == 1'd1))) begin
        sext_ln1116_reg_1246 <= sext_ln1116_fu_755_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter27_reg == 1'd1))) begin
        sext_ln1118_2_reg_1291 <= sext_ln1118_2_fu_825_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln97_reg_1363 == 1'd1))) begin
        vout_buffer_V_load_reg_1377 <= vout_buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter22_reg == 1'd1))) begin
        x2_V_reg_1253 <= {{grp_fu_758_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter26_reg == 1'd1))) begin
        x3_V_reg_1267 <= {{grp_fu_777_p2[47:16]}};
        x4_V_reg_1273 <= {{grp_fu_782_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter9 == 1'b1) & (icmp_ln74_reg_1191_pp2_iter8_reg == 1'd1))) begin
        x_V_reg_1210 <= v1_buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter18_reg == 1'd1))) begin
        xo_V_reg_1240 <= {{ret_V_fu_741_p2[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln74_reg_1191_pp2_iter7_reg == 1'd1))) begin
        zext_ln78_reg_1200[30 : 0] <= zext_ln78_fu_720_p1[30 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln55_fu_547_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln62_fu_577_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln74_fu_709_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state35 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state35 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln97_fu_1017_p2 == 1'd0)) begin
        ap_condition_pp3_exit_iter0_state78 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state78 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_499_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter40 == 1'b0) & (ap_enable_reg_pp2_iter39 == 1'b0) & (ap_enable_reg_pp2_iter38 == 1'b0) & (ap_enable_reg_pp2_iter37 == 1'b0) & (ap_enable_reg_pp2_iter36 == 1'b0) & (ap_enable_reg_pp2_iter35 == 1'b0) & (ap_enable_reg_pp2_iter34 == 1'b0) & (ap_enable_reg_pp2_iter33 == 1'b0) & (ap_enable_reg_pp2_iter32 == 1'b0) & (ap_enable_reg_pp2_iter31 == 1'b0) & (ap_enable_reg_pp2_iter30 == 1'b0) & (ap_enable_reg_pp2_iter29 == 1'b0) & (ap_enable_reg_pp2_iter28 == 1'b0) & (ap_enable_reg_pp2_iter27 == 1'b0) & (ap_enable_reg_pp2_iter26 == 1'b0) & (ap_enable_reg_pp2_iter25 == 1'b0) & (ap_enable_reg_pp2_iter24 == 1'b0) & (ap_enable_reg_pp2_iter23 == 1'b0) & (ap_enable_reg_pp2_iter22 == 1'b0) & (ap_enable_reg_pp2_iter21 == 1'b0) & (ap_enable_reg_pp2_iter20 == 1'b0) & (ap_enable_reg_pp2_iter19 == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b0) & (ap_enable_reg_pp2_iter17 == 1'b0) & (ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln62_reg_1130 == 1'd1))) begin
        ap_phi_mux_j3_0_phi_fu_338_p4 = j_1_reg_1134;
    end else begin
        ap_phi_mux_j3_0_phi_fu_338_p4 = j3_0_reg_334;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln74_reg_1191 == 1'd1))) begin
        ap_phi_mux_j4_0_phi_fu_350_p4 = j_2_reg_1195;
    end else begin
        ap_phi_mux_j4_0_phi_fu_350_p4 = j4_0_reg_346;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_1110 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_326_p4 = j_reg_1114;
    end else begin
        ap_phi_mux_j_0_phi_fu_326_p4 = j_0_reg_322;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_499_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_sqrt_fixed_32_16_s_fu_369_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_sqrt_fixed_32_16_s_fu_369_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_sqrt_fixed_32_16_s_fu_369_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_pp2_stage0 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            gmem_ARADDR = gmem_addr_1_reg_1124;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem_ARADDR = gmem_addr_reg_1104;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln62_reg_1130 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_1110 == 1'd1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln97_reg_1363_pp3_iter1_reg == 1'd1))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln62_reg_1130 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_1110 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (icmp_ln97_reg_1363_pp3_iter1_reg == 1'd1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b0) & (ap_ext_blocking_n == 1'b1))) begin
        stall_done_ext = 1'b1;
    end else begin
        stall_done_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b0) & (ap_int_blocking_n == 1'b1))) begin
        stall_done_int = 1'b1;
    end else begin
        stall_done_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b0) & (ap_str_blocking_n == 1'b1))) begin
        stall_done_str = 1'b1;
    end else begin
        stall_done_str = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n == 1'b0) & (ap_ext_blocking_n_reg == 1'b1))) begin
        stall_start_ext = 1'b1;
    end else begin
        stall_start_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n == 1'b0) & (ap_int_blocking_n_reg == 1'b1))) begin
        stall_start_int = 1'b1;
    end else begin
        stall_start_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n == 1'b0) & (ap_str_blocking_n_reg == 1'b1))) begin
        stall_start_str = 1'b1;
    end else begin
        stall_start_str = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter8 == 1'b1))) begin
        v1_buffer_V_address0 = zext_ln78_fu_720_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        v1_buffer_V_address0 = zext_ln58_fu_558_p1;
    end else begin
        v1_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter8 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        v1_buffer_V_ce0 = 1'b1;
    end else begin
        v1_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln55_reg_1110_pp0_iter1_reg == 1'd1))) begin
        v1_buffer_V_we0 = 1'b1;
    end else begin
        v1_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        v2_buffer_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        v2_buffer_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        v2_buffer_V_address0 = 64'd3;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        v2_buffer_V_address0 = zext_ln65_fu_588_p1;
    end else begin
        v2_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state24) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        v2_buffer_V_ce0 = 1'b1;
    end else begin
        v2_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        v2_buffer_V_ce1 = 1'b1;
    end else begin
        v2_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln62_reg_1130_pp1_iter1_reg == 1'd1))) begin
        v2_buffer_V_we0 = 1'b1;
    end else begin
        v2_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        vout_buffer_V_address0 = zext_ln100_fu_1028_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter40 == 1'b1))) begin
        vout_buffer_V_address0 = zext_ln78_reg_1200_pp2_iter39_reg;
    end else begin
        vout_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter40 == 1'b1)))) begin
        vout_buffer_V_ce0 = 1'b1;
    end else begin
        vout_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter40 == 1'b1) & (icmp_ln74_reg_1191_pp2_iter39_reg == 1'd1))) begin
        vout_buffer_V_we0 = 1'b1;
    end else begin
        vout_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_499_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln55_fu_547_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln55_fu_547_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln62_fu_577_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln62_fu_577_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln74_fu_709_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter39 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter40 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter39 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter40 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln74_fu_709_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln97_fu_1017_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln97_fu_1017_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_1_fu_563_p2 = ($signed(empty_40_reg_1044) + $signed(sext_ln58_reg_1098));

assign add_ln203_2_fu_1003_p2 = ($signed(empty_reg_1039) + $signed(sext_ln58_reg_1098));

assign add_ln203_fu_532_p2 = ($signed(empty_41_reg_1049) + $signed(sext_ln58_fu_528_p1));

assign add_ln46_fu_429_p2 = (size + 32'd1023);

assign add_ln700_1_fu_894_p2 = ($signed(shl_ln_fu_882_p3) + $signed(sext_ln700_fu_890_p1));

assign add_ln700_2_fu_904_p2 = ($signed(add_ln700_1_fu_894_p2) + $signed(sext_ln700_1_fu_900_p1));

assign add_ln700_3_fu_942_p2 = (add_ln700_2_reg_1312_pp2_iter34_reg + grp_fu_910_p2);

assign add_ln700_4_fu_951_p2 = ($signed(add_ln700_3_fu_942_p2) + $signed(sext_ln700_2_fu_947_p1));

assign add_ln700_5_fu_960_p2 = ($signed(add_ln700_4_reg_1332) + $signed(sext_ln700_3_fu_957_p1));

assign add_ln700_fu_877_p2 = ($signed(xo_V_reg_1240_pp2_iter30_reg) + $signed(32'd65536));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln55_reg_1110 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln55_reg_1110 == 1'd1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln62_reg_1130 == 1'd1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln62_reg_1130 == 1'd1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state80_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state80_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln55_reg_1110 == 1'd1));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln62_reg_1130 == 1'd1));
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp2_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp2_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp2_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp2_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp2_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp2_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp2_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp2_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp2_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp2_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp2_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp2_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp2_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp2_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp2_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp2_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp2_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp2_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp2_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp2_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp2_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp2_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp2_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp2_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state80_io = ((gmem_WREADY == 1'b0) & (icmp_ln97_reg_1363_pp3_iter1_reg == 1'd1));
end

assign ap_block_state80_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem_blk_n_W & gmem_blk_n_R & gmem_blk_n_B & gmem_blk_n_AW & gmem_blk_n_AR);

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & ap_ext_blocking_cur_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & 1'b1);

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign chunk_size_fu_515_p2 = ($signed(size_read_reg_1033) - $signed(i_0_reg_311));

assign empty_40_fu_403_p1 = in2_V3_fu_393_p4;

assign empty_41_fu_417_p1 = in1_V1_fu_407_p4;

assign empty_fu_389_p1 = out_r_V5_fu_379_p4;

assign event_done = ap_done;

assign exp_result_V_fu_974_p4 = {{ret_V_1_fu_968_p2[47:16]}};

assign grp_fu_597_p0 = r_V_2_fu_593_p1;

assign grp_fu_597_p1 = r_V_2_fu_593_p1;

assign grp_fu_728_p0 = r_V_2_reg_1144;

assign grp_fu_736_p1 = grp_fu_736_p10;

assign grp_fu_736_p10 = hls_sq_V_reg_1220;

assign grp_fu_758_p0 = sext_ln1116_fu_755_p1;

assign grp_fu_758_p1 = sext_ln1116_fu_755_p1;

assign grp_fu_777_p0 = sext_ln1116_reg_1246_pp2_iter23_reg;

assign grp_fu_777_p1 = sext_ln1116_1_fu_774_p1;

assign grp_fu_782_p0 = sext_ln1116_1_fu_774_p1;

assign grp_fu_782_p1 = sext_ln1116_1_fu_774_p1;

assign grp_fu_814_p0 = sext_ln1116_1_reg_1259_pp2_iter27_reg;

assign grp_fu_814_p1 = sext_ln1118_1_fu_811_p1;

assign grp_fu_819_p0 = sext_ln1118_1_fu_811_p1;

assign grp_fu_819_p1 = sext_ln1118_1_fu_811_p1;

assign grp_fu_828_p1 = sext_ln1118_1_fu_811_p1;

assign grp_fu_834_p1 = 47'd10922;

assign grp_fu_910_p0 = sext_ln1118_2_reg_1291_pp2_iter31_reg;

assign grp_fu_910_p1 = 48'd27306;

assign grp_fu_918_p1 = 43'd546;

assign grp_fu_927_p1 = 40'd91;

assign grp_fu_936_p1 = 37'd13;

assign grp_fu_988_p0 = sext_ln74_reg_1186;

assign hls_p_V_fu_603_p4 = {{grp_fu_597_p2[47:16]}};

assign i_fu_504_p2 = ($signed(i_0_reg_311) + $signed(32'd1024));

assign icmp_ln46_fu_499_p2 = ((i_0_reg_311 == tmp_60_reg_1074) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_510_p2 = (($signed(i_fu_504_p2) > $signed(size_read_reg_1033)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_547_p2 = (($signed(zext_ln55_fu_543_p1) < $signed(select_ln50_reg_1087)) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_577_p2 = (($signed(zext_ln62_fu_573_p1) < $signed(select_ln50_reg_1087)) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_709_p2 = (($signed(zext_ln74_fu_705_p1) < $signed(select_ln50_reg_1087)) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_1017_p2 = (($signed(zext_ln97_fu_1013_p1) < $signed(select_ln50_reg_1087)) ? 1'b1 : 1'b0);

assign in1_V1_fu_407_p4 = {{in1_V[63:2]}};

assign in2_V3_fu_393_p4 = {{in2_V[63:2]}};

assign j_1_fu_582_p2 = (ap_phi_mux_j3_0_phi_fu_338_p4 + 31'd1);

assign j_2_fu_714_p2 = (ap_phi_mux_j4_0_phi_fu_350_p4 + 31'd1);

assign j_3_fu_1022_p2 = (j5_0_reg_358 + 31'd1);

assign j_fu_552_p2 = (ap_phi_mux_j_0_phi_fu_326_p4 + 31'd1);

assign lhs_V_1_fu_693_p3 = {{sub_ln728_fu_687_p2}, {16'd0}};

assign lhs_V_fu_679_p3 = {{v2_buffer_V_q1}, {16'd0}};

assign out_r_V5_fu_379_p4 = {{out_r_V[63:2]}};

assign p_lshr_fu_449_p4 = {{sub_ln46_fu_443_p2[31:10]}};

assign r_V_26_fu_870_p3 = {{x2_V_reg_1253_pp2_iter30_reg}, {15'd0}};

assign r_V_2_fu_593_p1 = reg_374;

assign ret_V_1_fu_968_p2 = ($signed(add_ln700_5_fu_960_p2) + $signed(sext_ln1192_fu_965_p1));

assign ret_V_fu_741_p2 = (lhs_V_1_reg_1181 + mul_ln1192_reg_1235);

assign select_ln46_1_fu_483_p3 = ((tmp_57_fu_421_p3[0:0] === 1'b1) ? 22'd0 : select_ln46_fu_475_p3);

assign select_ln46_fu_475_p3 = ((tmp_58_fu_435_p3[0:0] === 1'b1) ? sub_ln46_1_fu_459_p2 : tmp_59_fu_465_p4);

assign select_ln50_fu_520_p3 = ((icmp_ln50_fu_510_p2[0:0] === 1'b1) ? chunk_size_fu_515_p2 : 32'd1024);

assign select_ln709_fu_659_p3 = ((tmp_61_reg_1151[0:0] === 1'b1) ? sub_ln709_1_fu_650_p2 : zext_ln709_fu_656_p1);

assign sext_ln1116_1_fu_774_p1 = x2_V_reg_1253;

assign sext_ln1116_fu_755_p1 = xo_V_reg_1240;

assign sext_ln1118_1_fu_811_p1 = x3_V_reg_1267;

assign sext_ln1118_2_fu_825_p1 = x4_V_reg_1273;

assign sext_ln1192_fu_965_p1 = $signed(r_V_31_reg_1342);

assign sext_ln58_fu_528_p1 = i_0_reg_311;

assign sext_ln700_1_fu_900_p1 = $signed(grp_fu_834_p2);

assign sext_ln700_2_fu_947_p1 = $signed(grp_fu_918_p2);

assign sext_ln700_3_fu_957_p1 = $signed(r_V_30_reg_1337);

assign sext_ln700_fu_890_p1 = $signed(r_V_26_fu_870_p3);

assign sext_ln74_fu_701_p1 = $signed(v2_buffer_V_q0);

assign shl_ln_fu_882_p3 = {{add_ln700_fu_877_p2}, {16'd0}};

assign sub_ln46_1_fu_459_p2 = (22'd0 - p_lshr_fu_449_p4);

assign sub_ln46_fu_443_p2 = ($signed(32'd4294966273) - $signed(size));

assign sub_ln709_1_fu_650_p2 = (32'd0 - zext_ln709_1_fu_647_p1);

assign sub_ln709_fu_621_p2 = (32'd0 - hls_p_V_fu_603_p4);

assign sub_ln728_fu_687_p2 = (lhs_V_fu_679_p3 - grp_fu_673_p2);

assign tmp_57_fu_421_p3 = size[32'd31];

assign tmp_58_fu_435_p3 = add_ln46_fu_429_p2[32'd31];

assign tmp_59_fu_465_p4 = {{add_ln46_fu_429_p2[31:10]}};

assign tmp_60_fu_491_p3 = {{select_ln46_1_fu_483_p3}, {10'd0}};

assign v2_buffer_V_address1 = 64'd2;

assign zext_ln100_fu_1028_p1 = j5_0_reg_358;

assign zext_ln55_fu_543_p1 = ap_phi_mux_j_0_phi_fu_326_p4;

assign zext_ln58_fu_558_p1 = j_0_reg_322_pp0_iter1_reg;

assign zext_ln62_fu_573_p1 = ap_phi_mux_j3_0_phi_fu_338_p4;

assign zext_ln65_fu_588_p1 = j3_0_reg_334_pp1_iter1_reg;

assign zext_ln709_1_fu_647_p1 = lshr_ln709_1_reg_1156;

assign zext_ln709_fu_656_p1 = trunc_ln709_1_reg_1161;

assign zext_ln74_fu_705_p1 = ap_phi_mux_j4_0_phi_fu_350_p4;

assign zext_ln78_fu_720_p1 = j4_0_reg_346_pp2_iter7_reg;

assign zext_ln97_fu_1013_p1 = j5_0_reg_358;

always @ (posedge ap_clk) begin
    empty_reg_1039[63:62] <= 2'b00;
    empty_40_reg_1044[63:62] <= 2'b00;
    empty_41_reg_1049[63:62] <= 2'b00;
    tmp_60_reg_1074[9:0] <= 10'b0000000000;
    lhs_V_1_reg_1181[15:0] <= 16'b0000000000000000;
    zext_ln78_reg_1200[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter9_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter10_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter11_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter12_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter13_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter14_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter15_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter16_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter17_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter18_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter19_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter20_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter21_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter22_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter23_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter24_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter25_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter26_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter27_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter28_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter29_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter30_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter31_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter32_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter33_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter34_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter35_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter36_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter37_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter38_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln78_reg_1200_pp2_iter39_reg[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //monte_sim_monte_sim
