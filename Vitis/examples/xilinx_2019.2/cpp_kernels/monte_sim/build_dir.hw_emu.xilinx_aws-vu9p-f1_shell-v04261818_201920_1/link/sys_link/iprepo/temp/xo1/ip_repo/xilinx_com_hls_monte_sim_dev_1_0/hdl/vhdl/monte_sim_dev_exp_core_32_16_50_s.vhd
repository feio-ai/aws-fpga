-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity monte_sim_dev_exp_core_32_16_50_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (41 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of monte_sim_dev_exp_core_32_16_50_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv49_1E2804E87B33E : STD_LOGIC_VECTOR (48 downto 0) := "1111000101000000001001110100001111011001100111110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv46_3FFFFFFFFFFF : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111111111111111111111111111111111";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv47_40 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_const_lv42_40 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_const_lv44_40 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_const_lv45_40 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv39_40 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_msb_4_table_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_x_msb_4_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_4_table_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (49 downto 0);
    signal trunc_ln703_fu_266_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln703_reg_1259 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1264_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_reg_1270 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1270_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1270_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1270_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1270_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1270_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1270_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1270_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1270_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_reg_1275 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1275_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1275_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1275_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1275_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_586_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1281 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1281_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1281_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1281_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1281_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_1292 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_reg_1297 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_46_reg_1302 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_46_reg_1302_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_46_reg_1302_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_46_reg_1302_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_46_reg_1302_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln1314_8_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1313_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1318_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_reg_1323 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_1323_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_1323_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_1323_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1329 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1329_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1329_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1329_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln731_fu_931_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln731_reg_1350 : STD_LOGIC_VECTOR (46 downto 0);
    signal ret_V_10_fu_954_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_10_reg_1355 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_10_reg_1355_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_10_reg_1355_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_10_reg_1355_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_10_reg_1355_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln612_1_fu_960_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_1_reg_1361 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_1_reg_1361_pp0_iter6_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_1_reg_1361_pp0_iter7_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_1_reg_1361_pp0_iter8_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_1_reg_1361_pp0_iter9_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_fu_964_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_1367 : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter7_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter8_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter9_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal f_x_msb_2_3_4_lsb_s_V_reg_1382 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_2_3_4_lsb_m_1_V_reg_1392 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1397 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1397_pp0_iter11_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1397_pp0_iter12_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1397_pp0_iter13_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1397_pp0_iter14_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal y_lo_s_V_reg_1413 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_1_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_3_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_4_fu_1007_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_l_V_fu_262_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal trunc_ln703_fu_266_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Result_29_fu_270_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal trunc_ln612_fu_280_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal trunc_ln612_fu_280_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_fu_292_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal x_l_V_fu_262_p1 : STD_LOGIC_VECTOR (72 downto 0);
    signal p_Result_s_fu_300_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_328_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_384_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_426_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_fu_440_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_85_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_468_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_482_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_566_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_V_fu_576_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_V_1_fu_586_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_V_2_fu_596_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_V_2_fu_596_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln708_fu_611_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal trunc_ln708_fu_611_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_msb_5_lsb_V_fu_615_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_48_fu_631_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_48_fu_631_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_48_fu_631_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_29_fu_270_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_30_fu_284_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal icmp_ln1314_1_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1314_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_1_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_3_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_4_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_1_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_2_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_2_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_5_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_6_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_8_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_9_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_5_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_7_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_6_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_4_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_7_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_3_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_10_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_11_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_13_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_14_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_10_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_12_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_11_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_9_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_15_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_16_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_18_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1314_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_14_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_17_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_15_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_13_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_16_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_12_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_805_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln703_2_fu_808_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_s_V_fu_812_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_818_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_msb_4_5_lsb_V_fu_798_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln703_fu_831_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln728_fu_827_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_V_fu_835_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Result_34_fu_859_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Result_33_fu_851_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_875_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_875_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_875_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal f_x_msb_3_4_lsb_s_V_fu_885_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal rhs_V_fu_899_p5 : STD_LOGIC_VECTOR (45 downto 0);
    signal shl_ln_fu_913_p4 : STD_LOGIC_VECTOR (41 downto 0);
    signal lhs_V_9_fu_895_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln728_8_fu_909_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln1192_fu_921_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln731_1_fu_925_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Result_35_fu_937_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_10_fu_947_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_8_fu_951_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_36_fu_971_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_985_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_985_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_985_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal p_Result_31_fu_991_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_9_fu_1015_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal lhs_V_11_fu_1012_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln728_9_fu_1023_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln703_7_fu_1033_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal ret_V_11_fu_1027_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal ret_V_12_fu_1036_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_1058_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_1058_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_1058_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal zext_ln703_8_fu_1074_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_l_V_fu_1077_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal xor_ln1315_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_18_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1315_fu_1097_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln5_fu_1082_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_84_fu_1109_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal zext_ln1314_fu_1117_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln703_4_fu_1133_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal trunc_ln703_3_fu_1129_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln703_2_fu_1125_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal y_V_fu_1137_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_141_fu_1161_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln703_35_fu_1155_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal icmp_ln1513_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_fu_1177_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_34_fu_1149_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_143_fu_1191_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1513_1_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1513_fu_1185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_33_fu_1143_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_144_fu_1213_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1513_2_fu_1223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1513_1_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_1_fu_1121_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln700_fu_1235_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal or_ln1513_2_fu_1229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_1241_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to14 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1058_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_1058_p10 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_875_p00 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_875_p10 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_985_p00 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_985_p10 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_48_fu_631_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_48_fu_631_p10 : STD_LOGIC_VECTOR (18 downto 0);

    component monte_sim_dev_monte_sim_dev_mul_36ns_44ns_80_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;


    component monte_sim_dev_monte_sim_dev_mul_48ns_50ns_98_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component monte_sim_dev_monte_sim_dev_mul_50ns_50ns_100_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component monte_sim_dev_exp_core_32_16_50_s_f_x_msb_4_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component monte_sim_dev_exp_core_32_16_50_s_f_x_msb_3_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component monte_sim_dev_exp_core_32_16_50_s_f_x_msb_2_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component monte_sim_dev_exp_core_32_16_50_s_exp_x_msb_1_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;



begin
    f_x_msb_4_table_V_U : component monte_sim_dev_exp_core_32_16_50_s_f_x_msb_4_table_V
    generic map (
        DataWidth => 7,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_4_table_V_address0,
        ce0 => f_x_msb_4_table_V_ce0,
        q0 => f_x_msb_4_table_V_q0);

    f_x_msb_3_table_V_U : component monte_sim_dev_exp_core_32_16_50_s_f_x_msb_3_table_V
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component monte_sim_dev_exp_core_32_16_50_s_f_x_msb_2_table_V
    generic map (
        DataWidth => 46,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component monte_sim_dev_exp_core_32_16_50_s_exp_x_msb_1_table_V
    generic map (
        DataWidth => 50,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    monte_sim_dev_mul_36ns_44ns_80_4_1_U20 : component monte_sim_dev_monte_sim_dev_mul_36ns_44ns_80_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 36,
        din1_WIDTH => 44,
        dout_WIDTH => 80)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_875_p0,
        din1 => grp_fu_875_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_875_p2);

    monte_sim_dev_mul_48ns_50ns_98_4_1_U21 : component monte_sim_dev_monte_sim_dev_mul_48ns_50ns_98_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 48,
        din1_WIDTH => 50,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_985_p0,
        din1 => grp_fu_985_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_985_p2);

    monte_sim_dev_mul_50ns_50ns_100_4_1_U22 : component monte_sim_dev_monte_sim_dev_mul_50ns_50ns_100_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1058_p0,
        din1 => grp_fu_1058_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1058_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln731_reg_1350 <= add_ln731_fu_931_p2;
                exp_x_msb_1_V_reg_1397 <= exp_x_msb_1_table_V_q0;
                exp_x_msb_1_V_reg_1397_pp0_iter11_reg <= exp_x_msb_1_V_reg_1397;
                exp_x_msb_1_V_reg_1397_pp0_iter12_reg <= exp_x_msb_1_V_reg_1397_pp0_iter11_reg;
                exp_x_msb_1_V_reg_1397_pp0_iter13_reg <= exp_x_msb_1_V_reg_1397_pp0_iter12_reg;
                exp_x_msb_1_V_reg_1397_pp0_iter14_reg <= exp_x_msb_1_V_reg_1397_pp0_iter13_reg;
                exp_x_msb_2_3_4_lsb_m_1_V_reg_1392 <= ret_V_12_fu_1036_p2(55 downto 6);
                    exp_x_msb_3_4_lsb_m_1_V_reg_1367(47 downto 1) <= exp_x_msb_3_4_lsb_m_1_V_fu_964_p3(47 downto 1);
                    exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter7_reg(47 downto 1) <= exp_x_msb_3_4_lsb_m_1_V_reg_1367(47 downto 1);
                    exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter8_reg(47 downto 1) <= exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter7_reg(47 downto 1);
                    exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter9_reg(47 downto 1) <= exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter8_reg(47 downto 1);
                f_x_msb_2_3_4_lsb_s_V_reg_1382 <= grp_fu_985_p2(97 downto 52);
                f_x_msb_3_V_reg_1329_pp0_iter2_reg <= f_x_msb_3_V_reg_1329;
                f_x_msb_3_V_reg_1329_pp0_iter3_reg <= f_x_msb_3_V_reg_1329_pp0_iter2_reg;
                f_x_msb_3_V_reg_1329_pp0_iter4_reg <= f_x_msb_3_V_reg_1329_pp0_iter3_reg;
                or_ln1314_17_reg_1318_pp0_iter10_reg <= or_ln1314_17_reg_1318_pp0_iter9_reg;
                or_ln1314_17_reg_1318_pp0_iter11_reg <= or_ln1314_17_reg_1318_pp0_iter10_reg;
                or_ln1314_17_reg_1318_pp0_iter12_reg <= or_ln1314_17_reg_1318_pp0_iter11_reg;
                or_ln1314_17_reg_1318_pp0_iter13_reg <= or_ln1314_17_reg_1318_pp0_iter12_reg;
                or_ln1314_17_reg_1318_pp0_iter14_reg <= or_ln1314_17_reg_1318_pp0_iter13_reg;
                or_ln1314_17_reg_1318_pp0_iter2_reg <= or_ln1314_17_reg_1318_pp0_iter1_reg;
                or_ln1314_17_reg_1318_pp0_iter3_reg <= or_ln1314_17_reg_1318_pp0_iter2_reg;
                or_ln1314_17_reg_1318_pp0_iter4_reg <= or_ln1314_17_reg_1318_pp0_iter3_reg;
                or_ln1314_17_reg_1318_pp0_iter5_reg <= or_ln1314_17_reg_1318_pp0_iter4_reg;
                or_ln1314_17_reg_1318_pp0_iter6_reg <= or_ln1314_17_reg_1318_pp0_iter5_reg;
                or_ln1314_17_reg_1318_pp0_iter7_reg <= or_ln1314_17_reg_1318_pp0_iter6_reg;
                or_ln1314_17_reg_1318_pp0_iter8_reg <= or_ln1314_17_reg_1318_pp0_iter7_reg;
                or_ln1314_17_reg_1318_pp0_iter9_reg <= or_ln1314_17_reg_1318_pp0_iter8_reg;
                or_ln1314_8_reg_1313_pp0_iter10_reg <= or_ln1314_8_reg_1313_pp0_iter9_reg;
                or_ln1314_8_reg_1313_pp0_iter11_reg <= or_ln1314_8_reg_1313_pp0_iter10_reg;
                or_ln1314_8_reg_1313_pp0_iter12_reg <= or_ln1314_8_reg_1313_pp0_iter11_reg;
                or_ln1314_8_reg_1313_pp0_iter13_reg <= or_ln1314_8_reg_1313_pp0_iter12_reg;
                or_ln1314_8_reg_1313_pp0_iter14_reg <= or_ln1314_8_reg_1313_pp0_iter13_reg;
                or_ln1314_8_reg_1313_pp0_iter2_reg <= or_ln1314_8_reg_1313_pp0_iter1_reg;
                or_ln1314_8_reg_1313_pp0_iter3_reg <= or_ln1314_8_reg_1313_pp0_iter2_reg;
                or_ln1314_8_reg_1313_pp0_iter4_reg <= or_ln1314_8_reg_1313_pp0_iter3_reg;
                or_ln1314_8_reg_1313_pp0_iter5_reg <= or_ln1314_8_reg_1313_pp0_iter4_reg;
                or_ln1314_8_reg_1313_pp0_iter6_reg <= or_ln1314_8_reg_1313_pp0_iter5_reg;
                or_ln1314_8_reg_1313_pp0_iter7_reg <= or_ln1314_8_reg_1313_pp0_iter6_reg;
                or_ln1314_8_reg_1313_pp0_iter8_reg <= or_ln1314_8_reg_1313_pp0_iter7_reg;
                or_ln1314_8_reg_1313_pp0_iter9_reg <= or_ln1314_8_reg_1313_pp0_iter8_reg;
                p_Result_18_reg_1270_pp0_iter2_reg <= p_Result_18_reg_1270_pp0_iter1_reg;
                p_Result_18_reg_1270_pp0_iter3_reg <= p_Result_18_reg_1270_pp0_iter2_reg;
                p_Result_18_reg_1270_pp0_iter4_reg <= p_Result_18_reg_1270_pp0_iter3_reg;
                p_Result_18_reg_1270_pp0_iter5_reg <= p_Result_18_reg_1270_pp0_iter4_reg;
                p_Result_18_reg_1270_pp0_iter6_reg <= p_Result_18_reg_1270_pp0_iter5_reg;
                p_Result_18_reg_1270_pp0_iter7_reg <= p_Result_18_reg_1270_pp0_iter6_reg;
                p_Result_18_reg_1270_pp0_iter8_reg <= p_Result_18_reg_1270_pp0_iter7_reg;
                ret_V_10_reg_1355 <= ret_V_10_fu_954_p2;
                ret_V_10_reg_1355_pp0_iter6_reg <= ret_V_10_reg_1355;
                ret_V_10_reg_1355_pp0_iter7_reg <= ret_V_10_reg_1355_pp0_iter6_reg;
                ret_V_10_reg_1355_pp0_iter8_reg <= ret_V_10_reg_1355_pp0_iter7_reg;
                ret_V_10_reg_1355_pp0_iter9_reg <= ret_V_10_reg_1355_pp0_iter8_reg;
                tmp_45_reg_1323_pp0_iter2_reg <= tmp_45_reg_1323;
                tmp_45_reg_1323_pp0_iter3_reg <= tmp_45_reg_1323_pp0_iter2_reg;
                tmp_45_reg_1323_pp0_iter4_reg <= tmp_45_reg_1323_pp0_iter3_reg;
                tmp_46_reg_1302_pp0_iter2_reg <= tmp_46_reg_1302_pp0_iter1_reg;
                tmp_46_reg_1302_pp0_iter3_reg <= tmp_46_reg_1302_pp0_iter2_reg;
                tmp_46_reg_1302_pp0_iter4_reg <= tmp_46_reg_1302_pp0_iter3_reg;
                tmp_V_1_reg_1281_pp0_iter2_reg <= tmp_V_1_reg_1281_pp0_iter1_reg;
                tmp_V_1_reg_1281_pp0_iter3_reg <= tmp_V_1_reg_1281_pp0_iter2_reg;
                tmp_V_1_reg_1281_pp0_iter4_reg <= tmp_V_1_reg_1281_pp0_iter3_reg;
                tmp_V_reg_1275_pp0_iter2_reg <= tmp_V_reg_1275_pp0_iter1_reg;
                tmp_V_reg_1275_pp0_iter3_reg <= tmp_V_reg_1275_pp0_iter2_reg;
                tmp_V_reg_1275_pp0_iter4_reg <= tmp_V_reg_1275_pp0_iter3_reg;
                tmp_reg_1264_pp0_iter10_reg <= tmp_reg_1264_pp0_iter9_reg;
                tmp_reg_1264_pp0_iter11_reg <= tmp_reg_1264_pp0_iter10_reg;
                tmp_reg_1264_pp0_iter12_reg <= tmp_reg_1264_pp0_iter11_reg;
                tmp_reg_1264_pp0_iter13_reg <= tmp_reg_1264_pp0_iter12_reg;
                tmp_reg_1264_pp0_iter14_reg <= tmp_reg_1264_pp0_iter13_reg;
                tmp_reg_1264_pp0_iter2_reg <= tmp_reg_1264_pp0_iter1_reg;
                tmp_reg_1264_pp0_iter3_reg <= tmp_reg_1264_pp0_iter2_reg;
                tmp_reg_1264_pp0_iter4_reg <= tmp_reg_1264_pp0_iter3_reg;
                tmp_reg_1264_pp0_iter5_reg <= tmp_reg_1264_pp0_iter4_reg;
                tmp_reg_1264_pp0_iter6_reg <= tmp_reg_1264_pp0_iter5_reg;
                tmp_reg_1264_pp0_iter7_reg <= tmp_reg_1264_pp0_iter6_reg;
                tmp_reg_1264_pp0_iter8_reg <= tmp_reg_1264_pp0_iter7_reg;
                tmp_reg_1264_pp0_iter9_reg <= tmp_reg_1264_pp0_iter8_reg;
                trunc_ln612_1_reg_1361 <= trunc_ln612_1_fu_960_p1;
                trunc_ln612_1_reg_1361_pp0_iter6_reg <= trunc_ln612_1_reg_1361;
                trunc_ln612_1_reg_1361_pp0_iter7_reg <= trunc_ln612_1_reg_1361_pp0_iter6_reg;
                trunc_ln612_1_reg_1361_pp0_iter8_reg <= trunc_ln612_1_reg_1361_pp0_iter7_reg;
                trunc_ln612_1_reg_1361_pp0_iter9_reg <= trunc_ln612_1_reg_1361_pp0_iter8_reg;
                y_lo_s_V_reg_1413 <= grp_fu_1058_p2(99 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                f_x_msb_3_V_reg_1329 <= f_x_msb_3_table_V_q0;
                or_ln1314_17_reg_1318 <= or_ln1314_17_fu_792_p2;
                or_ln1314_17_reg_1318_pp0_iter1_reg <= or_ln1314_17_reg_1318;
                or_ln1314_8_reg_1313 <= or_ln1314_8_fu_738_p2;
                or_ln1314_8_reg_1313_pp0_iter1_reg <= or_ln1314_8_reg_1313;
                p_Result_18_reg_1270 <= p_Result_18_fu_566_p1(37 downto 31);
                p_Result_18_reg_1270_pp0_iter1_reg <= p_Result_18_reg_1270;
                tmp_44_reg_1297 <= r_V_48_fu_631_p2(12 downto 6);
                tmp_45_reg_1323 <= ret_V_fu_835_p2(33 downto 2);
                tmp_46_reg_1302 <= r_V_48_fu_631_p2(5 downto 3);
                tmp_46_reg_1302_pp0_iter1_reg <= tmp_46_reg_1302;
                tmp_V_1_reg_1281 <= tmp_V_1_fu_586_p1(22 downto 18);
                tmp_V_1_reg_1281_pp0_iter1_reg <= tmp_V_1_reg_1281;
                tmp_V_reg_1275 <= tmp_V_fu_576_p1(30 downto 23);
                tmp_V_reg_1275_pp0_iter1_reg <= tmp_V_reg_1275;
                tmp_reg_1264 <= tmp_fu_292_p1(41 downto 41);
                tmp_reg_1264_pp0_iter1_reg <= tmp_reg_1264;
                tmp_s_reg_1292 <= r_V_48_fu_631_p2(18 downto 13);
                trunc_ln703_reg_1259 <= trunc_ln703_fu_266_p1;
            end if;
        end if;
    end process;
    exp_x_msb_3_4_lsb_m_1_V_reg_1367(0) <= '0';
    exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter7_reg(0) <= '0';
    exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter8_reg(0) <= '0';
    exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter9_reg(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln700_fu_1235_p2 <= std_logic_vector(unsigned(ap_const_lv39_40) + unsigned(trunc_ln703_1_fu_1121_p1));
    add_ln703_33_fu_1143_p2 <= std_logic_vector(unsigned(ap_const_lv42_40) + unsigned(trunc_ln703_4_fu_1133_p1));
    add_ln703_34_fu_1149_p2 <= std_logic_vector(unsigned(ap_const_lv44_40) + unsigned(trunc_ln703_3_fu_1129_p1));
    add_ln703_35_fu_1155_p2 <= std_logic_vector(unsigned(ap_const_lv45_40) + unsigned(trunc_ln703_2_fu_1125_p1));
    add_ln731_1_fu_925_p2 <= std_logic_vector(unsigned(lhs_V_9_fu_895_p1) + unsigned(zext_ln728_8_fu_909_p1));
    add_ln731_fu_931_p2 <= std_logic_vector(unsigned(zext_ln1192_fu_921_p1) + unsigned(add_ln731_1_fu_925_p2));
    and_ln1314_fu_684_p2 <= (icmp_ln1314_fu_672_p2 and icmp_ln1314_1_fu_678_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;
    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to14_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to14 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to14 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to14)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to14 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv32_7FFFFFFF when (or_ln1513_2_fu_1229_p2(0) = '1') else 
        tmp_47_fu_1241_p4;
    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    exp_x_msb_1_table_V_address0 <= zext_ln544_4_fu_1007_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_3_4_lsb_m_1_V_fu_964_p3 <= (add_ln731_reg_1350 & ap_const_lv1_0);
    exp_x_msb_4_5_lsb_m_1_m5_s_V_fu_812_p2 <= std_logic_vector(unsigned(p_Result_32_fu_805_p1) + unsigned(zext_ln703_2_fu_808_p1));
    f_x_msb_2_table_V_address0 <= zext_ln544_3_fu_881_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_4_lsb_s_V_fu_885_p4 <= grp_fu_875_p2(79 downto 49);
    f_x_msb_3_table_V_address0 <= zext_ln544_2_fu_667_p1(5 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_4_table_V_address0 <= zext_ln544_1_fu_606_p1(3 - 1 downto 0);

    f_x_msb_4_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_4_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_4_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1058_p0 <= grp_fu_1058_p00(50 - 1 downto 0);
    grp_fu_1058_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_1397),100));
    grp_fu_1058_p1 <= grp_fu_1058_p10(50 - 1 downto 0);
    grp_fu_1058_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_lsb_m_1_V_reg_1392),100));
    grp_fu_875_p0 <= grp_fu_875_p00(36 - 1 downto 0);
    grp_fu_875_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_33_fu_851_p4),80));
    grp_fu_875_p1 <= grp_fu_875_p10(44 - 1 downto 0);
    grp_fu_875_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_34_fu_859_p4),80));
    grp_fu_985_p0 <= grp_fu_985_p00(48 - 1 downto 0);
    grp_fu_985_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_lsb_m_1_V_fu_964_p3),98));
    grp_fu_985_p1 <= grp_fu_985_p10(50 - 1 downto 0);
    grp_fu_985_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_36_fu_971_p3),98));
    icmp_ln1314_1_fu_678_p2 <= "1" when (unsigned(p_Result_30_fu_284_p3) > unsigned(ap_const_lv49_1E2804E87B33E)) else "0";
    icmp_ln1314_fu_672_p2 <= "1" when (p_Result_29_fu_270_p4 = ap_const_lv5_F) else "0";
    icmp_ln1513_1_fu_1201_p2 <= "0" when (tmp_143_fu_1191_p4 = ap_const_lv2_0) else "1";
    icmp_ln1513_2_fu_1223_p2 <= "0" when (tmp_144_fu_1213_p4 = ap_const_lv4_0) else "1";
    icmp_ln1513_fu_1171_p2 <= "0" when (tmp_141_fu_1161_p4 = ap_const_lv2_0) else "1";
    lhs_V_10_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_35_fu_937_p4),9));
    lhs_V_11_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_2_3_4_lsb_s_V_reg_1382),57));
    lhs_V_9_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_3_4_lsb_s_V_fu_885_p4),47));
    lhs_V_fu_818_p4 <= ((exp_x_msb_4_5_lsb_m_1_m5_s_V_fu_812_p2 & tmp_44_reg_1297) & ap_const_lv2_0);
    or_ln1314_10_fu_750_p2 <= (xor_ln1311_14_fu_504_p2 or xor_ln1311_13_fu_490_p2);
    or_ln1314_11_fu_756_p2 <= (xor_ln1311_12_fu_476_p2 or or_ln1314_10_fu_750_p2);
    or_ln1314_12_fu_762_p2 <= (or_ln1314_9_fu_744_p2 or or_ln1314_11_fu_756_p2);
    or_ln1314_13_fu_768_p2 <= (xor_ln1311_16_fu_532_p2 or xor_ln1311_15_fu_518_p2);
    or_ln1314_14_fu_774_p2 <= (xor_ln1311_18_fu_560_p2 or and_ln1314_fu_684_p2);
    or_ln1314_15_fu_780_p2 <= (xor_ln1311_17_fu_546_p2 or or_ln1314_14_fu_774_p2);
    or_ln1314_16_fu_786_p2 <= (or_ln1314_15_fu_780_p2 or or_ln1314_13_fu_768_p2);
    or_ln1314_17_fu_792_p2 <= (or_ln1314_16_fu_786_p2 or or_ln1314_12_fu_762_p2);
    or_ln1314_18_fu_1105_p2 <= (or_ln1314_8_reg_1313_pp0_iter14_reg or or_ln1314_17_reg_1318_pp0_iter14_reg);
    or_ln1314_1_fu_696_p2 <= (xor_ln1311_4_fu_364_p2 or xor_ln1311_3_fu_350_p2);
    or_ln1314_2_fu_702_p2 <= (xor_ln1311_2_fu_336_p2 or or_ln1314_1_fu_696_p2);
    or_ln1314_3_fu_708_p2 <= (or_ln1314_fu_690_p2 or or_ln1314_2_fu_702_p2);
    or_ln1314_4_fu_714_p2 <= (xor_ln1311_6_fu_392_p2 or xor_ln1311_5_fu_378_p2);
    or_ln1314_5_fu_720_p2 <= (xor_ln1311_9_fu_434_p2 or xor_ln1311_8_fu_420_p2);
    or_ln1314_6_fu_726_p2 <= (xor_ln1311_7_fu_406_p2 or or_ln1314_5_fu_720_p2);
    or_ln1314_7_fu_732_p2 <= (or_ln1314_6_fu_726_p2 or or_ln1314_4_fu_714_p2);
    or_ln1314_8_fu_738_p2 <= (or_ln1314_7_fu_732_p2 or or_ln1314_3_fu_708_p2);
    or_ln1314_9_fu_744_p2 <= (xor_ln1311_11_fu_462_p2 or xor_ln1311_10_fu_448_p2);
    or_ln1314_fu_690_p2 <= (xor_ln1311_fu_308_p2 or xor_ln1311_1_fu_322_p2);
    or_ln1513_1_fu_1207_p2 <= (or_ln1513_fu_1185_p2 or icmp_ln1513_1_fu_1201_p2);
    or_ln1513_2_fu_1229_p2 <= (or_ln1513_1_fu_1207_p2 or icmp_ln1513_2_fu_1223_p2);
    or_ln1513_fu_1185_p2 <= (tmp_142_fu_1177_p3 or icmp_ln1513_fu_1171_p2);
    p_Result_10_fu_440_p3 <= x_l_V_fu_262_p1(48 downto 48);
    p_Result_11_fu_468_p3 <= x_l_V_fu_262_p1(50 downto 50);
    p_Result_12_fu_482_p3 <= x_l_V_fu_262_p1(51 downto 51);
    p_Result_13_fu_496_p3 <= x_l_V_fu_262_p1(52 downto 52);
    p_Result_14_fu_510_p3 <= x_l_V_fu_262_p1(53 downto 53);
    p_Result_15_fu_524_p3 <= x_l_V_fu_262_p1(54 downto 54);
    p_Result_16_fu_538_p3 <= x_l_V_fu_262_p1(55 downto 55);
    p_Result_17_fu_552_p3 <= x_l_V_fu_262_p1(56 downto 56);
    p_Result_18_fu_566_p1 <= x_V;
    p_Result_1_fu_314_p3 <= x_l_V_fu_262_p1(39 downto 39);
    p_Result_29_fu_270_p1 <= x_V;
    p_Result_29_fu_270_p4 <= p_Result_29_fu_270_p1(38 downto 34);
    p_Result_2_fu_328_p3 <= x_l_V_fu_262_p1(40 downto 40);
    p_Result_30_fu_284_p3 <= (trunc_ln612_fu_280_p1 & ap_const_lv15_0);
    p_Result_31_fu_991_p3 <= (tmp_reg_1264_pp0_iter8_reg & p_Result_18_reg_1270_pp0_iter8_reg);
    p_Result_32_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_1292),8));
    p_Result_33_fu_851_p4 <= ((tmp_45_reg_1323 & tmp_46_reg_1302_pp0_iter1_reg) & ap_const_lv1_0);
    p_Result_34_fu_859_p4 <= ((tmp_V_1_reg_1281_pp0_iter1_reg & ap_const_lv7_0) & f_x_msb_3_V_reg_1329);
    p_Result_35_fu_937_p4 <= f_x_msb_2_table_V_q0(45 downto 41);
    p_Result_36_fu_971_p3 <= (ret_V_10_reg_1355 & trunc_ln612_1_reg_1361);
    p_Result_3_fu_342_p3 <= x_l_V_fu_262_p1(41 downto 41);
    p_Result_4_fu_356_p3 <= x_l_V_fu_262_p1(42 downto 42);
    p_Result_5_fu_370_p3 <= x_l_V_fu_262_p1(43 downto 43);
    p_Result_6_fu_384_p3 <= x_l_V_fu_262_p1(44 downto 44);
    p_Result_7_fu_398_p3 <= x_l_V_fu_262_p1(45 downto 45);
    p_Result_8_fu_412_p3 <= x_l_V_fu_262_p1(46 downto 46);
    p_Result_9_fu_426_p3 <= x_l_V_fu_262_p1(47 downto 47);
    p_Result_s_85_fu_454_p3 <= x_l_V_fu_262_p1(49 downto 49);
    p_Result_s_fu_300_p3 <= x_l_V_fu_262_p1(38 downto 38);
    p_Val2_84_fu_1109_p3 <= 
        select_ln1315_fu_1097_p3 when (or_ln1314_18_fu_1105_p2(0) = '1') else 
        trunc_ln5_fu_1082_p4;
    r_V_48_fu_631_p0 <= r_V_48_fu_631_p00(3 - 1 downto 0);
    r_V_48_fu_631_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_596_p4),19));
    r_V_48_fu_631_p1 <= r_V_48_fu_631_p10(16 - 1 downto 0);
    r_V_48_fu_631_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_5_lsb_V_fu_615_p3),19));
    r_V_48_fu_631_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_48_fu_631_p0) * unsigned(r_V_48_fu_631_p1), 19));
    ret_V_10_fu_954_p2 <= std_logic_vector(unsigned(lhs_V_10_fu_947_p1) + unsigned(rhs_V_8_fu_951_p1));
    ret_V_11_fu_1027_p2 <= std_logic_vector(unsigned(lhs_V_11_fu_1012_p1) + unsigned(zext_ln728_9_fu_1023_p1));
    ret_V_12_fu_1036_p2 <= std_logic_vector(unsigned(zext_ln703_7_fu_1033_p1) + unsigned(ret_V_11_fu_1027_p2));
    ret_V_fu_835_p2 <= std_logic_vector(unsigned(zext_ln703_fu_831_p1) + unsigned(zext_ln728_fu_827_p1));
    rhs_V_8_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_1275_pp0_iter4_reg),9));
    rhs_V_9_fu_1015_p4 <= ((ret_V_10_reg_1355_pp0_iter9_reg & trunc_ln612_1_reg_1361_pp0_iter9_reg) & ap_const_lv6_0);
    rhs_V_fu_899_p5 <= (((tmp_V_1_reg_1281_pp0_iter4_reg & ap_const_lv7_0) & f_x_msb_3_V_reg_1329_pp0_iter4_reg) & ap_const_lv2_0);
    select_ln1315_fu_1097_p3 <= 
        ap_const_lv46_3FFFFFFFFFFF when (xor_ln1315_fu_1092_p2(0) = '1') else 
        ap_const_lv46_0;
    shl_ln_fu_913_p4 <= ((tmp_45_reg_1323_pp0_iter4_reg & tmp_46_reg_1302_pp0_iter4_reg) & ap_const_lv7_0);
    tmp_141_fu_1161_p4 <= y_V_fu_1137_p2(46 downto 45);
    tmp_142_fu_1177_p3 <= add_ln703_35_fu_1155_p2(44 downto 44);
    tmp_143_fu_1191_p4 <= add_ln703_34_fu_1149_p2(43 downto 42);
    tmp_144_fu_1213_p4 <= add_ln703_33_fu_1143_p2(41 downto 38);
    tmp_47_fu_1241_p4 <= add_ln700_fu_1235_p2(38 downto 7);
    tmp_V_1_fu_586_p1 <= x_V;
    tmp_V_1_fu_586_p4 <= tmp_V_1_fu_586_p1(22 downto 18);
    tmp_V_2_fu_596_p1 <= x_V;
    tmp_V_2_fu_596_p4 <= tmp_V_2_fu_596_p1(17 downto 15);
    tmp_V_fu_576_p1 <= x_V;
    tmp_fu_292_p1 <= x_V;
    tmp_fu_292_p3 <= tmp_fu_292_p1(41 downto 41);
    trunc_ln5_fu_1082_p4 <= y_l_V_fu_1077_p2(49 downto 4);
    trunc_ln612_1_fu_960_p1 <= f_x_msb_2_table_V_q0(41 - 1 downto 0);
    trunc_ln612_fu_280_p0 <= x_V;
    trunc_ln612_fu_280_p1 <= trunc_ln612_fu_280_p0(34 - 1 downto 0);
    trunc_ln703_1_fu_1121_p1 <= p_Val2_84_fu_1109_p3(39 - 1 downto 0);
    trunc_ln703_2_fu_1125_p1 <= p_Val2_84_fu_1109_p3(45 - 1 downto 0);
    trunc_ln703_3_fu_1129_p1 <= p_Val2_84_fu_1109_p3(44 - 1 downto 0);
    trunc_ln703_4_fu_1133_p1 <= p_Val2_84_fu_1109_p3(42 - 1 downto 0);
    trunc_ln703_fu_266_p0 <= x_V;
    trunc_ln703_fu_266_p1 <= trunc_ln703_fu_266_p0(18 - 1 downto 0);
    trunc_ln708_fu_611_p0 <= x_V;
    trunc_ln708_fu_611_p1 <= trunc_ln708_fu_611_p0(15 - 1 downto 0);
    x_l_V_fu_262_p0 <= x_V;
        x_l_V_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_l_V_fu_262_p0),73));

    x_msb_4_5_lsb_V_fu_798_p3 <= (trunc_ln703_reg_1259 & ap_const_lv15_0);
    x_msb_5_lsb_V_fu_615_p3 <= (trunc_ln708_fu_611_p1 & ap_const_lv1_0);
    xor_ln1311_10_fu_448_p2 <= (tmp_fu_292_p3 xor p_Result_10_fu_440_p3);
    xor_ln1311_11_fu_462_p2 <= (tmp_fu_292_p3 xor p_Result_s_85_fu_454_p3);
    xor_ln1311_12_fu_476_p2 <= (tmp_fu_292_p3 xor p_Result_11_fu_468_p3);
    xor_ln1311_13_fu_490_p2 <= (tmp_fu_292_p3 xor p_Result_12_fu_482_p3);
    xor_ln1311_14_fu_504_p2 <= (tmp_fu_292_p3 xor p_Result_13_fu_496_p3);
    xor_ln1311_15_fu_518_p2 <= (tmp_fu_292_p3 xor p_Result_14_fu_510_p3);
    xor_ln1311_16_fu_532_p2 <= (tmp_fu_292_p3 xor p_Result_15_fu_524_p3);
    xor_ln1311_17_fu_546_p2 <= (tmp_fu_292_p3 xor p_Result_16_fu_538_p3);
    xor_ln1311_18_fu_560_p2 <= (tmp_fu_292_p3 xor p_Result_17_fu_552_p3);
    xor_ln1311_1_fu_322_p2 <= (tmp_fu_292_p3 xor p_Result_1_fu_314_p3);
    xor_ln1311_2_fu_336_p2 <= (tmp_fu_292_p3 xor p_Result_2_fu_328_p3);
    xor_ln1311_3_fu_350_p2 <= (tmp_fu_292_p3 xor p_Result_3_fu_342_p3);
    xor_ln1311_4_fu_364_p2 <= (tmp_fu_292_p3 xor p_Result_4_fu_356_p3);
    xor_ln1311_5_fu_378_p2 <= (tmp_fu_292_p3 xor p_Result_5_fu_370_p3);
    xor_ln1311_6_fu_392_p2 <= (tmp_fu_292_p3 xor p_Result_6_fu_384_p3);
    xor_ln1311_7_fu_406_p2 <= (tmp_fu_292_p3 xor p_Result_7_fu_398_p3);
    xor_ln1311_8_fu_420_p2 <= (tmp_fu_292_p3 xor p_Result_8_fu_412_p3);
    xor_ln1311_9_fu_434_p2 <= (tmp_fu_292_p3 xor p_Result_9_fu_426_p3);
    xor_ln1311_fu_308_p2 <= (tmp_fu_292_p3 xor p_Result_s_fu_300_p3);
    xor_ln1315_fu_1092_p2 <= (tmp_reg_1264_pp0_iter14_reg xor ap_const_lv1_1);
    y_V_fu_1137_p2 <= std_logic_vector(unsigned(ap_const_lv47_40) + unsigned(zext_ln1314_fu_1117_p1));
    y_l_V_fu_1077_p2 <= std_logic_vector(unsigned(zext_ln703_8_fu_1074_p1) + unsigned(exp_x_msb_1_V_reg_1397_pp0_iter14_reg));
    zext_ln1192_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_913_p4),47));
    zext_ln1314_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_84_fu_1109_p3),47));
    zext_ln544_1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_596_p4),64));
    zext_ln544_2_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_fu_586_p4),64));
    zext_ln544_3_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_1275_pp0_iter3_reg),64));
    zext_ln544_4_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_31_fu_991_p3),64));
    zext_ln703_2_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_4_table_V_q0),8));
    zext_ln703_7_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_lsb_m_1_V_reg_1367_pp0_iter9_reg),57));
    zext_ln703_8_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_lo_s_V_reg_1413),50));
    zext_ln703_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_4_5_lsb_V_fu_798_p3),34));
    zext_ln728_8_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_fu_899_p5),47));
    zext_ln728_9_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_9_fu_1015_p4),57));
    zext_ln728_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_818_p4),34));
end behav;
