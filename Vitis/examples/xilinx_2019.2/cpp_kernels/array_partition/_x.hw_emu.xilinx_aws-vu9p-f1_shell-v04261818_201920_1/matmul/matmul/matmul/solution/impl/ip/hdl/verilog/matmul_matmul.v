// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_matmul,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=2856,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=44,HLS_SYN_FF=5917,HLS_SYN_LUT=5057,HLS_VERSION=2019_2}" *)

module matmul_matmul (
        ap_clk,
        ap_rst_n,
        event_done,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        event_start,
        stall_start_ext,
        stall_done_ext,
        stall_start_str,
        stall_done_str,
        stall_start_int,
        stall_done_int
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 40'd4096;
parameter    ap_ST_fsm_state16 = 40'd8192;
parameter    ap_ST_fsm_state17 = 40'd16384;
parameter    ap_ST_fsm_state18 = 40'd32768;
parameter    ap_ST_fsm_state19 = 40'd65536;
parameter    ap_ST_fsm_state20 = 40'd131072;
parameter    ap_ST_fsm_state21 = 40'd262144;
parameter    ap_ST_fsm_state22 = 40'd524288;
parameter    ap_ST_fsm_pp1_stage0 = 40'd1048576;
parameter    ap_ST_fsm_state26 = 40'd2097152;
parameter    ap_ST_fsm_state27 = 40'd4194304;
parameter    ap_ST_fsm_state28 = 40'd8388608;
parameter    ap_ST_fsm_state29 = 40'd16777216;
parameter    ap_ST_fsm_pp2_stage0 = 40'd33554432;
parameter    ap_ST_fsm_pp2_stage1 = 40'd67108864;
parameter    ap_ST_fsm_pp2_stage2 = 40'd134217728;
parameter    ap_ST_fsm_pp2_stage3 = 40'd268435456;
parameter    ap_ST_fsm_pp2_stage4 = 40'd536870912;
parameter    ap_ST_fsm_pp2_stage5 = 40'd1073741824;
parameter    ap_ST_fsm_pp2_stage6 = 40'd2147483648;
parameter    ap_ST_fsm_pp2_stage7 = 40'd4294967296;
parameter    ap_ST_fsm_state44 = 40'd8589934592;
parameter    ap_ST_fsm_pp3_stage0 = 40'd17179869184;
parameter    ap_ST_fsm_state48 = 40'd34359738368;
parameter    ap_ST_fsm_state49 = 40'd68719476736;
parameter    ap_ST_fsm_state50 = 40'd137438953472;
parameter    ap_ST_fsm_state51 = 40'd274877906944;
parameter    ap_ST_fsm_state52 = 40'd549755813888;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   event_done;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
output   event_start;
output   stall_start_ext;
output   stall_done_ext;
output   stall_start_str;
output   stall_done_str;
output   stall_start_int;
output   stall_done_int;

reg stall_start_ext;
reg stall_done_ext;
reg stall_start_str;
reg stall_done_str;
reg stall_start_int;
reg stall_done_int;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] in1;
wire   [63:0] in2;
wire   [63:0] out_r;
wire   [31:0] size;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state44;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln109_reg_2393;
reg   [0:0] icmp_ln109_reg_2393_pp3_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state52;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state16;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln77_reg_1972;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln65_reg_1943;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] j_0_reg_572;
reg   [31:0] i_0_reg_583;
reg   [30:0] itr_0_reg_594;
reg   [31:0] j3_0_reg_605;
reg   [31:0] i2_0_reg_616;
reg   [30:0] itr1_0_reg_627;
reg   [63:0] indvar_flatten_reg_638;
reg   [30:0] row_0_reg_649;
reg   [31:0] col_0_reg_660;
reg   [30:0] itr5_0_reg_671;
reg   [31:0] i6_0_reg_682;
reg   [31:0] j7_0_reg_693;
wire   [31:0] B_q0;
reg  signed [31:0] reg_704;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state31_pp2_stage1_iter0;
wire    ap_block_state39_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_11001;
reg   [0:0] icmp_ln89_reg_2113;
wire   [31:0] B_q1;
wire    ap_CS_fsm_pp2_stage5;
wire    ap_block_state35_pp2_stage5_iter0;
wire    ap_block_state43_pp2_stage5_iter1;
wire    ap_block_pp2_stage5_11001;
reg  signed [31:0] reg_709;
reg  signed [31:0] reg_714;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_state32_pp2_stage2_iter0;
wire    ap_block_state40_pp2_stage2_iter1;
wire    ap_block_pp2_stage2_11001;
wire    ap_CS_fsm_pp2_stage6;
wire    ap_block_state36_pp2_stage6_iter0;
wire    ap_block_pp2_stage6_11001;
reg  signed [31:0] reg_718;
reg  signed [31:0] reg_722;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_block_state33_pp2_stage3_iter0;
wire    ap_block_state41_pp2_stage3_iter1;
wire    ap_block_pp2_stage3_11001;
wire    ap_CS_fsm_pp2_stage7;
wire    ap_block_state37_pp2_stage7_iter0;
wire    ap_block_pp2_stage7_11001;
reg  signed [31:0] reg_726;
reg  signed [31:0] reg_730;
wire    ap_CS_fsm_pp2_stage4;
wire    ap_block_state34_pp2_stage4_iter0;
wire    ap_block_state42_pp2_stage4_iter1;
wire    ap_block_pp2_stage4_11001;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state30_pp2_stage0_iter0;
wire    ap_block_state38_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
reg  signed [31:0] reg_734;
reg  signed [31:0] size_read_reg_1903;
reg   [63:0] gmem_addr_reg_1915;
reg   [63:0] gmem_addr_1_reg_1921;
reg   [63:0] gmem_addr_2_reg_1927;
wire   [31:0] grp_fu_833_p2;
reg   [31:0] mul_ln65_reg_1933;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln65_fu_841_p2;
wire    ap_block_state13_pp0_stage0_iter0;
reg    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_state15_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln65_reg_1943_pp0_iter1_reg;
wire   [30:0] itr_fu_846_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] select_ln68_1_fu_871_p3;
reg   [31:0] select_ln68_1_reg_1952;
wire   [9:0] add_ln72_fu_895_p2;
reg   [9:0] add_ln72_reg_1957;
reg   [9:0] add_ln72_reg_1957_pp0_iter1_reg;
wire   [31:0] j_fu_901_p2;
reg   [31:0] gmem_addr_2_read_reg_1967;
wire   [0:0] icmp_ln77_fu_915_p2;
wire    ap_block_state23_pp1_stage0_iter0;
reg    ap_block_state24_pp1_stage0_iter1;
wire    ap_block_state25_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln77_reg_1972_pp1_iter1_reg;
wire   [30:0] itr_1_fu_920_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] select_ln80_1_fu_945_p3;
reg   [31:0] select_ln80_1_reg_1981;
wire   [9:0] add_ln84_fu_969_p2;
reg   [9:0] add_ln84_reg_1986;
reg   [9:0] add_ln84_reg_1986_pp1_iter1_reg;
wire   [31:0] j_1_fu_975_p2;
reg   [31:0] gmem_addr_1_read_reg_1996;
wire   [63:0] zext_ln101_fu_985_p1;
wire    ap_CS_fsm_state26;
wire   [31:0] add_ln101_fu_994_p2;
reg   [31:0] add_ln101_reg_2103;
wire    ap_CS_fsm_state29;
wire   [63:0] grp_fu_988_p2;
reg   [63:0] mul_ln101_reg_2108;
wire   [0:0] icmp_ln89_fu_999_p2;
reg   [0:0] icmp_ln89_reg_2113_pp2_iter1_reg;
wire   [63:0] add_ln89_fu_1004_p2;
reg   [63:0] add_ln89_reg_2117;
wire   [31:0] select_ln89_fu_1021_p3;
reg   [31:0] select_ln89_reg_2122;
wire   [30:0] select_ln89_1_fu_1029_p3;
reg   [30:0] select_ln89_1_reg_2128;
wire   [9:0] sext_ln99_1_cast_fu_1081_p3;
reg   [9:0] sext_ln99_1_cast_reg_2139;
wire   [0:0] icmp_ln101_fu_1100_p2;
reg   [0:0] icmp_ln101_reg_2167;
reg   [0:0] icmp_ln101_reg_2167_pp2_iter1_reg;
wire   [31:0] A_q0;
reg  signed [31:0] A_load_reg_2181;
wire   [31:0] grp_fu_1145_p2;
reg   [31:0] mul_ln99_reg_2234;
wire   [31:0] grp_fu_738_p2;
reg   [31:0] mul_ln99_1_reg_2239;
wire   [34:0] tmp_6_fu_1213_p3;
reg   [34:0] tmp_6_reg_2244;
wire   [0:0] icmp_ln98_fu_1240_p2;
reg   [0:0] icmp_ln98_reg_2262;
wire   [31:0] temp_sum_2_fu_1317_p2;
reg   [31:0] temp_sum_2_reg_2288;
wire   [31:0] temp_sum_3_fu_1339_p2;
reg   [31:0] temp_sum_3_reg_2293;
wire   [31:0] temp_sum_4_fu_1413_p2;
reg   [31:0] temp_sum_4_reg_2308;
wire   [31:0] temp_sum_5_fu_1434_p2;
reg   [31:0] temp_sum_5_reg_2313;
wire   [31:0] col_fu_1445_p2;
reg   [31:0] col_reg_2318;
wire   [31:0] temp_sum_6_fu_1488_p2;
reg   [31:0] temp_sum_6_reg_2323;
wire   [31:0] temp_sum_7_fu_1509_p2;
reg   [31:0] temp_sum_7_reg_2328;
wire   [31:0] temp_sum_8_fu_1558_p2;
reg   [31:0] temp_sum_8_reg_2333;
wire   [31:0] temp_sum_9_fu_1579_p2;
reg   [31:0] temp_sum_9_reg_2338;
wire   [31:0] temp_sum_10_fu_1628_p2;
reg   [31:0] temp_sum_10_reg_2343;
wire   [31:0] temp_sum_11_fu_1649_p2;
reg   [31:0] temp_sum_11_reg_2348;
reg   [7:0] C_addr_13_reg_2353;
reg   [7:0] C_addr_14_reg_2358;
reg   [7:0] C_addr_15_reg_2363;
reg   [7:0] C_addr_16_reg_2368;
wire   [31:0] temp_sum_12_fu_1754_p2;
reg   [31:0] temp_sum_12_reg_2373;
wire   [31:0] temp_sum_13_fu_1775_p2;
reg   [31:0] temp_sum_13_reg_2378;
wire   [31:0] temp_sum_14_fu_1796_p2;
reg   [31:0] temp_sum_14_reg_2383;
wire   [31:0] temp_sum_15_fu_1817_p2;
reg   [31:0] temp_sum_15_reg_2388;
wire   [0:0] icmp_ln109_fu_1832_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state45_pp3_stage0_iter0;
wire    ap_block_state46_pp3_stage0_iter1;
wire    ap_block_state47_pp3_stage0_iter2;
reg    ap_block_state47_io;
reg    ap_block_pp3_stage0_11001;
wire   [30:0] itr_2_fu_1837_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [31:0] select_ln112_fu_1854_p3;
reg   [31:0] select_ln112_reg_2402;
wire   [31:0] j_2_fu_1897_p2;
wire   [31:0] C_q0;
reg   [31:0] C_load_reg_2417;
reg    ap_enable_reg_pp3_iter1;
wire    ap_CS_fsm_state12;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state13;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state22;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state23;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state30;
wire    ap_block_pp2_stage7_subdone;
wire    ap_block_pp2_stage5_subdone;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state45;
reg   [7:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [7:0] B_address0;
reg    B_ce0;
reg    B_we0;
reg   [7:0] B_address1;
reg    B_ce1;
reg   [7:0] C_address0;
reg    C_ce0;
reg    C_we0;
reg   [31:0] C_d0;
reg   [7:0] C_address1;
reg    C_ce1;
reg    C_we1;
reg   [31:0] C_d1;
reg   [31:0] ap_phi_mux_i_0_phi_fu_587_p4;
reg   [31:0] ap_phi_mux_i2_0_phi_fu_620_p4;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_642_p4;
wire    ap_block_pp2_stage0;
reg   [30:0] ap_phi_mux_row_0_phi_fu_653_p4;
reg   [31:0] ap_phi_mux_col_0_phi_fu_664_p4;
reg   [31:0] ap_phi_mux_i6_0_phi_fu_686_p4;
wire  signed [63:0] sext_ln72_fu_907_p1;
wire  signed [63:0] sext_ln84_fu_981_p1;
wire  signed [63:0] sext_ln99_fu_1059_p1;
wire  signed [63:0] sext_ln99_1_fu_1072_p1;
wire   [63:0] zext_ln99_1_fu_1095_p1;
wire  signed [63:0] sext_ln99_2_fu_1110_p1;
wire    ap_block_pp2_stage1;
wire  signed [63:0] sext_ln99_3_fu_1120_p1;
wire  signed [63:0] sext_ln99_4_fu_1130_p1;
wire    ap_block_pp2_stage2;
wire  signed [63:0] sext_ln99_5_fu_1140_p1;
wire  signed [63:0] sext_ln99_6_fu_1155_p1;
wire    ap_block_pp2_stage3;
wire  signed [63:0] sext_ln99_7_fu_1165_p1;
wire  signed [63:0] sext_ln99_8_fu_1175_p1;
wire    ap_block_pp2_stage4;
wire  signed [63:0] sext_ln99_9_fu_1185_p1;
wire  signed [63:0] sext_ln99_10_fu_1195_p1;
wire    ap_block_pp2_stage5;
wire  signed [63:0] sext_ln99_11_fu_1205_p1;
wire   [63:0] zext_ln99_fu_1220_p1;
wire    ap_block_pp2_stage6;
wire   [63:0] tmp_7_fu_1231_p3;
wire  signed [63:0] sext_ln99_12_fu_1250_p1;
wire  signed [63:0] sext_ln99_13_fu_1260_p1;
wire   [63:0] tmp_8_fu_1360_p3;
wire    ap_block_pp2_stage7;
wire   [63:0] tmp_9_fu_1374_p3;
wire  signed [63:0] sext_ln99_14_fu_1388_p1;
wire  signed [63:0] sext_ln99_15_fu_1398_p1;
wire   [63:0] tmp_s_fu_1455_p3;
wire   [63:0] tmp_2_fu_1469_p3;
wire   [63:0] tmp_5_fu_1525_p3;
wire   [63:0] tmp_10_fu_1539_p3;
wire   [63:0] tmp_11_fu_1595_p3;
wire   [63:0] tmp_12_fu_1609_p3;
wire   [63:0] tmp_13_fu_1665_p3;
wire   [63:0] tmp_14_fu_1679_p3;
wire   [63:0] tmp_15_fu_1693_p3;
wire   [63:0] tmp_16_fu_1707_p3;
wire   [63:0] tmp_17_fu_1721_p3;
wire   [63:0] tmp_18_fu_1735_p3;
wire  signed [63:0] sext_ln116_fu_1892_p1;
wire   [63:0] empty_fu_783_p1;
wire   [63:0] empty_5_fu_803_p1;
wire   [63:0] empty_6_fu_823_p1;
wire    ap_block_pp3_stage0_01001;
reg   [31:0] temp_sum_0_1_fu_176;
wire   [31:0] temp_sum_0_fu_1273_p2;
reg   [31:0] temp_sum_1_1_fu_180;
wire   [31:0] temp_sum_1_fu_1295_p2;
reg   [31:0] temp_sum_2_1_fu_184;
reg   [31:0] temp_sum_3_1_fu_188;
reg   [31:0] temp_sum_4_1_fu_192;
reg   [31:0] temp_sum_5_1_fu_196;
reg   [31:0] temp_sum_6_1_fu_200;
reg   [31:0] temp_sum_7_1_fu_204;
reg   [31:0] temp_sum_8_1_fu_208;
reg   [31:0] temp_sum_9_1_fu_212;
reg   [31:0] temp_sum_10_1_fu_216;
reg   [31:0] temp_sum_11_1_fu_220;
reg   [31:0] temp_sum_12_1_fu_224;
reg   [31:0] temp_sum_13_1_fu_228;
reg   [31:0] temp_sum_14_1_fu_232;
reg   [31:0] temp_sum_15_1_fu_236;
wire   [61:0] out_r5_fu_773_p4;
wire   [61:0] in_fu_793_p4;
wire   [61:0] in3_fu_813_p4;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln65_fu_837_p1;
wire   [0:0] icmp_ln68_fu_852_p2;
wire   [31:0] i_fu_857_p2;
wire   [31:0] select_ln68_fu_863_p3;
wire   [5:0] trunc_ln72_1_fu_883_p1;
wire   [9:0] sext_ln72_1_cast_fu_887_p3;
wire   [9:0] trunc_ln72_fu_879_p1;
wire   [31:0] zext_ln77_fu_911_p1;
wire   [0:0] icmp_ln80_fu_926_p2;
wire   [31:0] i_1_fu_931_p2;
wire   [31:0] select_ln80_fu_937_p3;
wire   [5:0] trunc_ln84_1_fu_957_p1;
wire   [9:0] sext_ln84_1_cast_fu_961_p3;
wire   [9:0] trunc_ln84_fu_953_p1;
wire   [31:0] grp_fu_988_p0;
wire   [31:0] grp_fu_988_p1;
wire   [0:0] icmp_ln92_fu_1016_p2;
wire   [30:0] row_fu_1010_p2;
wire   [5:0] trunc_ln102_fu_1037_p1;
wire   [9:0] zext_ln99_cast_fu_1041_p3;
wire   [9:0] trunc_ln99_fu_1049_p1;
wire   [9:0] add_ln99_fu_1053_p2;
wire   [35:0] tmp_19_fu_1064_p3;
wire   [5:0] trunc_ln99_1_fu_1077_p1;
wire   [9:0] or_ln99_fu_1089_p2;
wire   [9:0] or_ln99_1_fu_1105_p2;
wire   [9:0] or_ln99_2_fu_1115_p2;
wire   [9:0] or_ln99_3_fu_1125_p2;
wire   [9:0] or_ln99_4_fu_1135_p2;
wire   [9:0] or_ln99_5_fu_1150_p2;
wire   [9:0] or_ln99_6_fu_1160_p2;
wire   [9:0] or_ln99_7_fu_1170_p2;
wire   [9:0] or_ln99_8_fu_1180_p2;
wire   [9:0] or_ln99_9_fu_1190_p2;
wire   [9:0] or_ln99_10_fu_1200_p2;
wire   [34:0] or_ln102_fu_1225_p2;
wire   [9:0] or_ln99_11_fu_1245_p2;
wire   [9:0] or_ln99_12_fu_1255_p2;
wire   [31:0] select_ln98_fu_1265_p3;
wire   [31:0] select_ln98_1_fu_1287_p3;
wire   [31:0] select_ln98_2_fu_1309_p3;
wire   [31:0] grp_fu_743_p2;
wire   [31:0] select_ln98_3_fu_1331_p3;
wire   [31:0] grp_fu_748_p2;
wire   [34:0] or_ln102_1_fu_1355_p2;
wire   [34:0] or_ln102_2_fu_1369_p2;
wire   [9:0] or_ln99_13_fu_1383_p2;
wire   [9:0] or_ln99_14_fu_1393_p2;
wire   [31:0] select_ln98_4_fu_1406_p3;
wire   [31:0] grp_fu_753_p2;
wire   [31:0] select_ln98_5_fu_1427_p3;
wire   [31:0] grp_fu_758_p2;
wire   [34:0] or_ln102_3_fu_1450_p2;
wire   [34:0] or_ln102_4_fu_1464_p2;
wire   [31:0] select_ln98_6_fu_1481_p3;
wire   [31:0] grp_fu_763_p2;
wire   [31:0] select_ln98_7_fu_1502_p3;
wire   [31:0] grp_fu_768_p2;
wire   [34:0] or_ln102_5_fu_1520_p2;
wire   [34:0] or_ln102_6_fu_1534_p2;
wire   [31:0] select_ln98_8_fu_1551_p3;
wire   [31:0] grp_fu_1350_p2;
wire   [31:0] select_ln98_9_fu_1572_p3;
wire   [34:0] or_ln102_7_fu_1590_p2;
wire   [34:0] or_ln102_8_fu_1604_p2;
wire   [31:0] select_ln98_10_fu_1621_p3;
wire   [31:0] select_ln98_11_fu_1642_p3;
wire   [34:0] or_ln102_9_fu_1660_p2;
wire   [34:0] or_ln102_10_fu_1674_p2;
wire   [34:0] or_ln102_11_fu_1688_p2;
wire   [34:0] or_ln102_12_fu_1702_p2;
wire   [34:0] or_ln102_13_fu_1716_p2;
wire   [34:0] or_ln102_14_fu_1730_p2;
wire   [31:0] select_ln98_12_fu_1747_p3;
wire   [31:0] select_ln98_13_fu_1768_p3;
wire   [31:0] select_ln98_14_fu_1789_p3;
wire   [31:0] select_ln98_15_fu_1810_p3;
wire   [31:0] zext_ln109_fu_1828_p1;
wire   [0:0] icmp_ln112_fu_1843_p2;
wire   [31:0] i_2_fu_1848_p2;
wire   [31:0] select_ln112_1_fu_1862_p3;
wire   [5:0] trunc_ln116_1_fu_1874_p1;
wire   [9:0] sext_ln116_1_cast_fu_1878_p3;
wire   [9:0] trunc_ln116_fu_1870_p1;
wire   [9:0] add_ln116_fu_1886_p2;
reg   [39:0] ap_NS_fsm;
wire    ap_block_pp2_stage1_subdone;
wire    ap_block_pp2_stage2_subdone;
wire    ap_block_pp2_stage3_subdone;
wire    ap_block_pp2_stage4_subdone;
wire    ap_block_pp2_stage6_subdone;
wire    ap_ext_blocking_cur_n;
wire    ap_ext_blocking_n;
wire    ap_str_blocking_n;
wire    ap_int_blocking_n;
reg    ap_ext_blocking_n_reg;
reg    ap_str_blocking_n_reg;
reg    ap_int_blocking_n_reg;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 40'd1;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

matmul_matmul_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
matmul_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .event_start(event_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in1(in1),
    .in2(in2),
    .out_r(out_r),
    .size(size)
);

matmul_matmul_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
matmul_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(mul_ln65_reg_1933),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_1915),
    .I_AWID(1'd0),
    .I_AWLEN(mul_ln65_reg_1933),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(C_load_reg_2417),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

matmul_matmul_A #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(gmem_addr_2_read_reg_1967),
    .q0(A_q0)
);

matmul_matmul_B #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(gmem_addr_1_read_reg_1996),
    .q0(B_q0),
    .address1(B_address1),
    .ce1(B_ce1),
    .q1(B_q1)
);

matmul_matmul_C #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
C_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C_address0),
    .ce0(C_ce0),
    .we0(C_we0),
    .d0(C_d0),
    .q0(C_q0),
    .address1(C_address1),
    .ce1(C_ce1),
    .we1(C_we1),
    .d1(C_d1)
);

matmul_matmul_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_mul_32s_32s_32_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_load_reg_2181),
    .din1(reg_709),
    .ce(1'b1),
    .dout(grp_fu_738_p2)
);

matmul_matmul_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_mul_32s_32s_32_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_load_reg_2181),
    .din1(reg_714),
    .ce(1'b1),
    .dout(grp_fu_743_p2)
);

matmul_matmul_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_mul_32s_32s_32_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_load_reg_2181),
    .din1(reg_718),
    .ce(1'b1),
    .dout(grp_fu_748_p2)
);

matmul_matmul_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_mul_32s_32s_32_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_load_reg_2181),
    .din1(reg_722),
    .ce(1'b1),
    .dout(grp_fu_753_p2)
);

matmul_matmul_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_mul_32s_32s_32_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_load_reg_2181),
    .din1(reg_726),
    .ce(1'b1),
    .dout(grp_fu_758_p2)
);

matmul_matmul_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_mul_32s_32s_32_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_load_reg_2181),
    .din1(reg_730),
    .ce(1'b1),
    .dout(grp_fu_763_p2)
);

matmul_matmul_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_mul_32s_32s_32_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_load_reg_2181),
    .din1(reg_734),
    .ce(1'b1),
    .dout(grp_fu_768_p2)
);

matmul_matmul_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_mul_32s_32s_32_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(size_read_reg_1903),
    .din1(size_read_reg_1903),
    .ce(1'b1),
    .dout(grp_fu_833_p2)
);

matmul_matmul_mul_32ns_32ns_64_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
matmul_mul_32ns_32ns_64_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_988_p0),
    .din1(grp_fu_988_p1),
    .ce(1'b1),
    .dout(grp_fu_988_p2)
);

matmul_matmul_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_mul_32s_32s_32_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_704),
    .din1(A_load_reg_2181),
    .ce(1'b1),
    .dout(grp_fu_1145_p2)
);

matmul_matmul_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_mul_32s_32s_32_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_load_reg_2181),
    .din1(reg_704),
    .ce(1'b1),
    .dout(grp_fu_1350_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state13)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state23)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state30) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage7_subdone) & (1'b1 == ap_CS_fsm_pp2_stage7)) | ((1'b0 == ap_block_pp2_stage5_subdone) & (1'b1 == ap_CS_fsm_pp2_stage5)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state45) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state45)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state45);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_ext_blocking_n_reg <= ap_ext_blocking_n;
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln89_reg_2113 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        col_0_reg_660 <= col_reg_2318;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        col_0_reg_660 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i2_0_reg_616 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln77_reg_1972 == 1'd1))) begin
        i2_0_reg_616 <= select_ln80_1_reg_1981;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        i6_0_reg_682 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln109_reg_2393 == 1'd1))) begin
        i6_0_reg_682 <= select_ln112_reg_2402;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_reg_1943 == 1'd1))) begin
        i_0_reg_583 <= select_ln68_1_reg_1952;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_reg_583 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln89_reg_2113 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten_reg_638 <= add_ln89_reg_2117;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        indvar_flatten_reg_638 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        itr1_0_reg_627 <= 31'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln77_fu_915_p2 == 1'd1))) begin
        itr1_0_reg_627 <= itr_1_fu_920_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        itr5_0_reg_671 <= 31'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln109_fu_1832_p2 == 1'd1))) begin
        itr5_0_reg_671 <= itr_2_fu_1837_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_fu_841_p2 == 1'd1))) begin
        itr_0_reg_594 <= itr_fu_846_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        itr_0_reg_594 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j3_0_reg_605 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln77_fu_915_p2 == 1'd1))) begin
        j3_0_reg_605 <= j_1_fu_975_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        j7_0_reg_693 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln109_fu_1832_p2 == 1'd1))) begin
        j7_0_reg_693 <= j_2_fu_1897_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_fu_841_p2 == 1'd1))) begin
        j_0_reg_572 <= j_fu_901_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j_0_reg_572 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_reg_2113 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
            reg_704 <= B_q1;
        end else if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            reg_704 <= B_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_reg_2113 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
            reg_709 <= B_q0;
        end else if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            reg_709 <= B_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln89_reg_2113 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        row_0_reg_649 <= select_ln89_1_reg_2128;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        row_0_reg_649 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_reg_2113 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        A_load_reg_2181 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage3_11001) & (icmp_ln89_reg_2113_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        C_addr_13_reg_2353[7 : 4] <= tmp_15_fu_1693_p3[7 : 4];
        C_addr_14_reg_2358[7 : 4] <= tmp_16_fu_1707_p3[7 : 4];
        C_addr_15_reg_2363[7 : 4] <= tmp_17_fu_1721_p3[7 : 4];
        C_addr_16_reg_2368[7 : 4] <= tmp_18_fu_1735_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln109_reg_2393 == 1'd1))) begin
        C_load_reg_2417 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln101_reg_2103 <= add_ln101_fu_994_p2;
        mul_ln101_reg_2108 <= grp_fu_988_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_fu_841_p2 == 1'd1))) begin
        add_ln72_reg_1957 <= add_ln72_fu_895_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln72_reg_1957_pp0_iter1_reg <= add_ln72_reg_1957;
        icmp_ln65_reg_1943 <= icmp_ln65_fu_841_p2;
        icmp_ln65_reg_1943_pp0_iter1_reg <= icmp_ln65_reg_1943;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln77_fu_915_p2 == 1'd1))) begin
        add_ln84_reg_1986 <= add_ln84_fu_969_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln84_reg_1986_pp1_iter1_reg <= add_ln84_reg_1986;
        icmp_ln77_reg_1972 <= icmp_ln77_fu_915_p2;
        icmp_ln77_reg_1972_pp1_iter1_reg <= icmp_ln77_reg_1972;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        add_ln89_reg_2117 <= add_ln89_fu_1004_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage7_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        col_reg_2318 <= col_fu_1445_p2;
        temp_sum_4_1_fu_192 <= temp_sum_4_fu_1413_p2;
        temp_sum_5_1_fu_196 <= temp_sum_5_fu_1434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln77_reg_1972 == 1'd1))) begin
        gmem_addr_1_read_reg_1996 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem_addr_1_reg_1921[61 : 0] <= empty_5_fu_803_p1[61 : 0];
        gmem_addr_2_reg_1927[61 : 0] <= empty_6_fu_823_p1[61 : 0];
        gmem_addr_reg_1915[61 : 0] <= empty_fu_783_p1[61 : 0];
        size_read_reg_1903 <= size;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_reg_1943 == 1'd1))) begin
        gmem_addr_2_read_reg_1967 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln89_fu_999_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln101_reg_2167 <= icmp_ln101_fu_1100_p2;
        select_ln89_reg_2122 <= select_ln89_fu_1021_p3;
        sext_ln99_1_cast_reg_2139[9 : 4] <= sext_ln99_1_cast_fu_1081_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln101_reg_2167_pp2_iter1_reg <= icmp_ln101_reg_2167;
        icmp_ln89_reg_2113 <= icmp_ln89_fu_999_p2;
        icmp_ln89_reg_2113_pp2_iter1_reg <= icmp_ln89_reg_2113;
        temp_sum_6_reg_2323 <= temp_sum_6_fu_1488_p2;
        temp_sum_7_reg_2328 <= temp_sum_7_fu_1509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln109_reg_2393 <= icmp_ln109_fu_1832_p2;
        icmp_ln109_reg_2393_pp3_iter1_reg <= icmp_ln109_reg_2393;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage6_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        icmp_ln98_reg_2262 <= icmp_ln98_fu_1240_p2;
        temp_sum_2_reg_2288 <= temp_sum_2_fu_1317_p2;
        temp_sum_3_reg_2293 <= temp_sum_3_fu_1339_p2;
        tmp_6_reg_2244[34 : 4] <= tmp_6_fu_1213_p3[34 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln65_reg_1933 <= grp_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage5_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage5) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        mul_ln99_1_reg_2239 <= grp_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage5_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        mul_ln99_reg_2234 <= grp_fu_1145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage6_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        reg_714 <= B_q1;
        reg_718 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage7_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage3_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        reg_722 <= B_q1;
        reg_726 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage4_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage4) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        reg_730 <= B_q1;
        reg_734 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln109_fu_1832_p2 == 1'd1))) begin
        select_ln112_reg_2402 <= select_ln112_fu_1854_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_fu_841_p2 == 1'd1))) begin
        select_ln68_1_reg_1952 <= select_ln68_1_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln77_fu_915_p2 == 1'd1))) begin
        select_ln80_1_reg_1981 <= select_ln80_1_fu_945_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln89_fu_999_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        select_ln89_1_reg_2128 <= select_ln89_1_fu_1029_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage6_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        temp_sum_0_1_fu_176 <= temp_sum_0_fu_1273_p2;
        temp_sum_1_1_fu_180 <= temp_sum_1_fu_1295_p2;
        temp_sum_2_1_fu_184 <= temp_sum_2_fu_1317_p2;
        temp_sum_3_1_fu_188 <= temp_sum_3_fu_1339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        temp_sum_10_1_fu_216 <= temp_sum_10_fu_1628_p2;
        temp_sum_11_1_fu_220 <= temp_sum_11_fu_1649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        temp_sum_10_reg_2343 <= temp_sum_10_fu_1628_p2;
        temp_sum_11_reg_2348 <= temp_sum_11_fu_1649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        temp_sum_12_1_fu_224 <= temp_sum_12_fu_1754_p2;
        temp_sum_13_1_fu_228 <= temp_sum_13_fu_1775_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        temp_sum_12_reg_2373 <= temp_sum_12_fu_1754_p2;
        temp_sum_13_reg_2378 <= temp_sum_13_fu_1775_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage4_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        temp_sum_14_1_fu_232 <= temp_sum_14_fu_1796_p2;
        temp_sum_15_1_fu_236 <= temp_sum_15_fu_1817_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        temp_sum_14_reg_2383 <= temp_sum_14_fu_1796_p2;
        temp_sum_15_reg_2388 <= temp_sum_15_fu_1817_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage7_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage7))) begin
        temp_sum_4_reg_2308 <= temp_sum_4_fu_1413_p2;
        temp_sum_5_reg_2313 <= temp_sum_5_fu_1434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_sum_6_1_fu_200 <= temp_sum_6_fu_1488_p2;
        temp_sum_7_1_fu_204 <= temp_sum_7_fu_1509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        temp_sum_8_1_fu_208 <= temp_sum_8_fu_1558_p2;
        temp_sum_9_1_fu_212 <= temp_sum_9_fu_1579_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        temp_sum_8_reg_2333 <= temp_sum_8_fu_1558_p2;
        temp_sum_9_reg_2338 <= temp_sum_9_fu_1579_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        A_address0 = sext_ln99_fu_1059_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        A_address0 = sext_ln72_fu_907_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln65_reg_1943_pp0_iter1_reg == 1'd1))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage7) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        B_address0 = sext_ln99_15_fu_1398_p1;
    end else if (((1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        B_address0 = sext_ln99_13_fu_1260_p1;
    end else if (((1'b0 == ap_block_pp2_stage5) & (1'b1 == ap_CS_fsm_pp2_stage5) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        B_address0 = sext_ln99_11_fu_1205_p1;
    end else if (((1'b0 == ap_block_pp2_stage4) & (1'b1 == ap_CS_fsm_pp2_stage4) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        B_address0 = sext_ln99_9_fu_1185_p1;
    end else if (((1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        B_address0 = sext_ln99_7_fu_1165_p1;
    end else if (((1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        B_address0 = sext_ln99_5_fu_1140_p1;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        B_address0 = sext_ln99_3_fu_1120_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        B_address0 = sext_ln99_1_fu_1072_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        B_address0 = sext_ln84_fu_981_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp2_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp2_stage7) & (1'b1 == ap_CS_fsm_pp2_stage7))) begin
            B_address1 = sext_ln99_14_fu_1388_p1;
        end else if (((1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
            B_address1 = sext_ln99_12_fu_1250_p1;
        end else if (((1'b0 == ap_block_pp2_stage5) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
            B_address1 = sext_ln99_10_fu_1195_p1;
        end else if (((1'b0 == ap_block_pp2_stage4) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
            B_address1 = sext_ln99_8_fu_1175_p1;
        end else if (((1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            B_address1 = sext_ln99_6_fu_1155_p1;
        end else if (((1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            B_address1 = sext_ln99_4_fu_1130_p1;
        end else if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            B_address1 = sext_ln99_2_fu_1110_p1;
        end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            B_address1 = zext_ln99_1_fu_1095_p1;
        end else begin
            B_address1 = 'bx;
        end
    end else begin
        B_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage7_11001) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage7_11001) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln77_reg_1972_pp1_iter1_reg == 1'd1))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        C_address0 = sext_ln116_fu_1892_p1;
    end else if (((1'b0 == ap_block_pp2_stage5) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        C_address0 = C_addr_15_reg_2363;
    end else if (((1'b0 == ap_block_pp2_stage4) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        C_address0 = C_addr_13_reg_2353;
    end else if (((1'b0 == ap_block_pp2_stage3) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        C_address0 = tmp_13_fu_1665_p3;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        C_address0 = tmp_11_fu_1595_p3;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        C_address0 = tmp_5_fu_1525_p3;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        C_address0 = tmp_s_fu_1455_p3;
    end else if (((1'b0 == ap_block_pp2_stage7) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        C_address0 = tmp_8_fu_1360_p3;
    end else if (((1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        C_address0 = zext_ln99_fu_1220_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage5) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        C_address1 = C_addr_16_reg_2368;
    end else if (((1'b0 == ap_block_pp2_stage4) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        C_address1 = C_addr_14_reg_2358;
    end else if (((1'b0 == ap_block_pp2_stage3) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        C_address1 = tmp_14_fu_1679_p3;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        C_address1 = tmp_12_fu_1609_p3;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        C_address1 = tmp_10_fu_1539_p3;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        C_address1 = tmp_2_fu_1469_p3;
    end else if (((1'b0 == ap_block_pp2_stage7) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        C_address1 = tmp_9_fu_1374_p3;
    end else if (((1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        C_address1 = tmp_7_fu_1231_p3;
    end else begin
        C_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage4_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_pp2_stage5_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5)) | ((1'b0 == ap_block_pp2_stage7_11001) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage4_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_pp2_stage5_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5)) | ((1'b0 == ap_block_pp2_stage7_11001) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        C_ce1 = 1'b1;
    end else begin
        C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage5) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        C_d0 = temp_sum_14_reg_2383;
    end else if (((1'b0 == ap_block_pp2_stage4) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        C_d0 = temp_sum_12_reg_2373;
    end else if (((1'b0 == ap_block_pp2_stage3) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        C_d0 = temp_sum_10_reg_2343;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        C_d0 = temp_sum_8_reg_2333;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        C_d0 = temp_sum_6_reg_2323;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        C_d0 = temp_sum_4_reg_2308;
    end else if (((1'b0 == ap_block_pp2_stage7) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        C_d0 = temp_sum_2_reg_2288;
    end else if (((1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        C_d0 = temp_sum_0_fu_1273_p2;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage5) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        C_d1 = temp_sum_15_reg_2388;
    end else if (((1'b0 == ap_block_pp2_stage4) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        C_d1 = temp_sum_13_reg_2378;
    end else if (((1'b0 == ap_block_pp2_stage3) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        C_d1 = temp_sum_11_reg_2348;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        C_d1 = temp_sum_9_reg_2338;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        C_d1 = temp_sum_7_reg_2328;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        C_d1 = temp_sum_5_reg_2313;
    end else if (((1'b0 == ap_block_pp2_stage7) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        C_d1 = temp_sum_3_reg_2293;
    end else if (((1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        C_d1 = temp_sum_1_fu_1295_p2;
    end else begin
        C_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln101_reg_2167 == 1'd1)) | ((1'b0 == ap_block_pp2_stage4_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4) & (icmp_ln101_reg_2167_pp2_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3) & (icmp_ln101_reg_2167_pp2_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln101_reg_2167_pp2_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp2_stage5_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5) & (icmp_ln101_reg_2167_pp2_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp2_stage7_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln101_reg_2167 == 1'd1)) | ((1'b0 == ap_block_pp2_stage6_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln101_reg_2167 == 1'd1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln101_reg_2167_pp2_iter1_reg == 1'd1)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln101_reg_2167 == 1'd1)) | ((1'b0 == ap_block_pp2_stage4_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4) & (icmp_ln101_reg_2167_pp2_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3) & (icmp_ln101_reg_2167_pp2_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln101_reg_2167_pp2_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp2_stage5_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5) & (icmp_ln101_reg_2167_pp2_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp2_stage7_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln101_reg_2167 == 1'd1)) | ((1'b0 == ap_block_pp2_stage6_11001) & (icmp_ln89_reg_2113 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage6) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln101_reg_2167 == 1'd1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln101_reg_2167_pp2_iter1_reg == 1'd1)))) begin
        C_we1 = 1'b1;
    end else begin
        C_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln65_fu_841_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln77_fu_915_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln89_fu_999_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln109_fu_1832_p2 == 1'd0)) begin
        ap_condition_pp3_exit_iter0_state45 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state45 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln89_reg_2113 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_col_0_phi_fu_664_p4 = col_reg_2318;
    end else begin
        ap_phi_mux_col_0_phi_fu_664_p4 = col_0_reg_660;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln77_reg_1972 == 1'd1))) begin
        ap_phi_mux_i2_0_phi_fu_620_p4 = select_ln80_1_reg_1981;
    end else begin
        ap_phi_mux_i2_0_phi_fu_620_p4 = i2_0_reg_616;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln109_reg_2393 == 1'd1) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_i6_0_phi_fu_686_p4 = select_ln112_reg_2402;
    end else begin
        ap_phi_mux_i6_0_phi_fu_686_p4 = i6_0_reg_682;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln65_reg_1943 == 1'd1))) begin
        ap_phi_mux_i_0_phi_fu_587_p4 = select_ln68_1_reg_1952;
    end else begin
        ap_phi_mux_i_0_phi_fu_587_p4 = i_0_reg_583;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln89_reg_2113 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_642_p4 = add_ln89_reg_2117;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_642_p4 = indvar_flatten_reg_638;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln89_reg_2113 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_row_0_phi_fu_653_p4 = select_ln89_1_reg_2128;
    end else begin
        ap_phi_mux_row_0_phi_fu_653_p4 = row_0_reg_649;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            gmem_ARADDR = gmem_addr_1_reg_1921;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            gmem_ARADDR = gmem_addr_2_reg_1927;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_reg_1943 == 1'd1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln77_reg_1972 == 1'd1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln109_reg_2393_pp3_iter1_reg == 1'd1))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state16))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln65_reg_1943 == 1'd1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln77_reg_1972 == 1'd1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln109_reg_2393_pp3_iter1_reg == 1'd1) & (1'b0 == ap_block_pp3_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b0) & (ap_ext_blocking_n == 1'b1))) begin
        stall_done_ext = 1'b1;
    end else begin
        stall_done_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b0) & (ap_int_blocking_n == 1'b1))) begin
        stall_done_int = 1'b1;
    end else begin
        stall_done_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b0) & (ap_str_blocking_n == 1'b1))) begin
        stall_done_str = 1'b1;
    end else begin
        stall_done_str = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n == 1'b0) & (ap_ext_blocking_n_reg == 1'b1))) begin
        stall_start_ext = 1'b1;
    end else begin
        stall_start_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n == 1'b0) & (ap_int_blocking_n_reg == 1'b1))) begin
        stall_start_int = 1'b1;
    end else begin
        stall_start_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n == 1'b0) & (ap_str_blocking_n_reg == 1'b1))) begin
        stall_start_str = 1'b1;
    end else begin
        stall_start_str = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln65_fu_841_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln65_fu_841_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln77_fu_915_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln77_fu_915_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln89_fu_999_p2 == 1'd1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln89_fu_999_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_pp2_stage4 : begin
            if ((1'b0 == ap_block_pp2_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end
        end
        ap_ST_fsm_pp2_stage5 : begin
            if ((~((1'b0 == ap_block_pp2_stage5_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5)) & (1'b0 == ap_block_pp2_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage6;
            end else if (((1'b0 == ap_block_pp2_stage5_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage5;
            end
        end
        ap_ST_fsm_pp2_stage6 : begin
            if ((1'b0 == ap_block_pp2_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage6;
            end
        end
        ap_ST_fsm_pp2_stage7 : begin
            if ((1'b0 == ap_block_pp2_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage7;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln109_fu_1832_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln109_fu_1832_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln101_fu_994_p2 = ($signed(size_read_reg_1903) + $signed(32'd4294967295));

assign add_ln116_fu_1886_p2 = (sext_ln116_1_cast_fu_1878_p3 + trunc_ln116_fu_1870_p1);

assign add_ln72_fu_895_p2 = (sext_ln72_1_cast_fu_887_p3 + trunc_ln72_fu_879_p1);

assign add_ln84_fu_969_p2 = (sext_ln84_1_cast_fu_961_p3 + trunc_ln84_fu_953_p1);

assign add_ln89_fu_1004_p2 = (ap_phi_mux_indvar_flatten_phi_fu_642_p4 + 64'd1);

assign add_ln99_fu_1053_p2 = (zext_ln99_cast_fu_1041_p3 + trunc_ln99_fu_1049_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp2_stage4 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp2_stage5 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp2_stage6 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp2_stage7 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_1943 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_1943 == 1'd1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln77_reg_1972 == 1'd1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln77_reg_1972 == 1'd1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state47_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state47_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln65_reg_1943 == 1'd1));
end

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln77_reg_1972 == 1'd1));
end

assign ap_block_state25_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state47_io = ((gmem_WREADY == 1'b0) & (icmp_ln109_reg_2393_pp3_iter1_reg == 1'd1));
end

assign ap_block_state47_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem_blk_n_W & gmem_blk_n_R & gmem_blk_n_B & gmem_blk_n_AW & gmem_blk_n_AR);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_n = (1'b1 & 1'b1);

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign col_fu_1445_p2 = (select_ln89_reg_2122 + 32'd1);

assign empty_5_fu_803_p1 = in_fu_793_p4;

assign empty_6_fu_823_p1 = in3_fu_813_p4;

assign empty_fu_783_p1 = out_r5_fu_773_p4;

assign event_done = ap_done;

assign grp_fu_988_p0 = zext_ln101_fu_985_p1;

assign grp_fu_988_p1 = zext_ln101_fu_985_p1;

assign i_1_fu_931_p2 = (32'd1 + ap_phi_mux_i2_0_phi_fu_620_p4);

assign i_2_fu_1848_p2 = (32'd1 + ap_phi_mux_i6_0_phi_fu_686_p4);

assign i_fu_857_p2 = (32'd1 + ap_phi_mux_i_0_phi_fu_587_p4);

assign icmp_ln101_fu_1100_p2 = ((select_ln89_fu_1021_p3 == add_ln101_reg_2103) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_1832_p2 = (($signed(zext_ln109_fu_1828_p1) < $signed(mul_ln65_reg_1933)) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_1843_p2 = ((j7_0_reg_693 == size_read_reg_1903) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_841_p2 = (($signed(zext_ln65_fu_837_p1) < $signed(mul_ln65_reg_1933)) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_852_p2 = ((j_0_reg_572 == size_read_reg_1903) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_915_p2 = (($signed(zext_ln77_fu_911_p1) < $signed(mul_ln65_reg_1933)) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_926_p2 = ((j3_0_reg_605 == size_read_reg_1903) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_999_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_642_p4 == mul_ln101_reg_2108) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_1016_p2 = ((ap_phi_mux_col_0_phi_fu_664_p4 == size_read_reg_1903) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_1240_p2 = ((select_ln89_reg_2122 == 32'd0) ? 1'b1 : 1'b0);

assign in3_fu_813_p4 = {{in1[63:2]}};

assign in_fu_793_p4 = {{in2[63:2]}};

assign itr_1_fu_920_p2 = (itr1_0_reg_627 + 31'd1);

assign itr_2_fu_1837_p2 = (itr5_0_reg_671 + 31'd1);

assign itr_fu_846_p2 = (itr_0_reg_594 + 31'd1);

assign j_1_fu_975_p2 = (32'd1 + select_ln80_fu_937_p3);

assign j_2_fu_1897_p2 = (32'd1 + select_ln112_1_fu_1862_p3);

assign j_fu_901_p2 = (32'd1 + select_ln68_fu_863_p3);

assign or_ln102_10_fu_1674_p2 = (tmp_6_reg_2244 | 35'd11);

assign or_ln102_11_fu_1688_p2 = (tmp_6_reg_2244 | 35'd12);

assign or_ln102_12_fu_1702_p2 = (tmp_6_reg_2244 | 35'd13);

assign or_ln102_13_fu_1716_p2 = (tmp_6_reg_2244 | 35'd14);

assign or_ln102_14_fu_1730_p2 = (tmp_6_reg_2244 | 35'd15);

assign or_ln102_1_fu_1355_p2 = (tmp_6_reg_2244 | 35'd2);

assign or_ln102_2_fu_1369_p2 = (tmp_6_reg_2244 | 35'd3);

assign or_ln102_3_fu_1450_p2 = (tmp_6_reg_2244 | 35'd4);

assign or_ln102_4_fu_1464_p2 = (tmp_6_reg_2244 | 35'd5);

assign or_ln102_5_fu_1520_p2 = (tmp_6_reg_2244 | 35'd6);

assign or_ln102_6_fu_1534_p2 = (tmp_6_reg_2244 | 35'd7);

assign or_ln102_7_fu_1590_p2 = (tmp_6_reg_2244 | 35'd8);

assign or_ln102_8_fu_1604_p2 = (tmp_6_reg_2244 | 35'd9);

assign or_ln102_9_fu_1660_p2 = (tmp_6_reg_2244 | 35'd10);

assign or_ln102_fu_1225_p2 = (tmp_6_fu_1213_p3 | 35'd1);

assign or_ln99_10_fu_1200_p2 = (sext_ln99_1_cast_reg_2139 | 10'd11);

assign or_ln99_11_fu_1245_p2 = (sext_ln99_1_cast_reg_2139 | 10'd12);

assign or_ln99_12_fu_1255_p2 = (sext_ln99_1_cast_reg_2139 | 10'd13);

assign or_ln99_13_fu_1383_p2 = (sext_ln99_1_cast_reg_2139 | 10'd14);

assign or_ln99_14_fu_1393_p2 = (sext_ln99_1_cast_reg_2139 | 10'd15);

assign or_ln99_1_fu_1105_p2 = (sext_ln99_1_cast_reg_2139 | 10'd2);

assign or_ln99_2_fu_1115_p2 = (sext_ln99_1_cast_reg_2139 | 10'd3);

assign or_ln99_3_fu_1125_p2 = (sext_ln99_1_cast_reg_2139 | 10'd4);

assign or_ln99_4_fu_1135_p2 = (sext_ln99_1_cast_reg_2139 | 10'd5);

assign or_ln99_5_fu_1150_p2 = (sext_ln99_1_cast_reg_2139 | 10'd6);

assign or_ln99_6_fu_1160_p2 = (sext_ln99_1_cast_reg_2139 | 10'd7);

assign or_ln99_7_fu_1170_p2 = (sext_ln99_1_cast_reg_2139 | 10'd8);

assign or_ln99_8_fu_1180_p2 = (sext_ln99_1_cast_reg_2139 | 10'd9);

assign or_ln99_9_fu_1190_p2 = (sext_ln99_1_cast_reg_2139 | 10'd10);

assign or_ln99_fu_1089_p2 = (sext_ln99_1_cast_fu_1081_p3 | 10'd1);

assign out_r5_fu_773_p4 = {{out_r[63:2]}};

assign row_fu_1010_p2 = (31'd1 + ap_phi_mux_row_0_phi_fu_653_p4);

assign select_ln112_1_fu_1862_p3 = ((icmp_ln112_fu_1843_p2[0:0] === 1'b1) ? 32'd0 : j7_0_reg_693);

assign select_ln112_fu_1854_p3 = ((icmp_ln112_fu_1843_p2[0:0] === 1'b1) ? i_2_fu_1848_p2 : ap_phi_mux_i6_0_phi_fu_686_p4);

assign select_ln68_1_fu_871_p3 = ((icmp_ln68_fu_852_p2[0:0] === 1'b1) ? i_fu_857_p2 : ap_phi_mux_i_0_phi_fu_587_p4);

assign select_ln68_fu_863_p3 = ((icmp_ln68_fu_852_p2[0:0] === 1'b1) ? 32'd0 : j_0_reg_572);

assign select_ln80_1_fu_945_p3 = ((icmp_ln80_fu_926_p2[0:0] === 1'b1) ? i_1_fu_931_p2 : ap_phi_mux_i2_0_phi_fu_620_p4);

assign select_ln80_fu_937_p3 = ((icmp_ln80_fu_926_p2[0:0] === 1'b1) ? 32'd0 : j3_0_reg_605);

assign select_ln89_1_fu_1029_p3 = ((icmp_ln92_fu_1016_p2[0:0] === 1'b1) ? row_fu_1010_p2 : ap_phi_mux_row_0_phi_fu_653_p4);

assign select_ln89_fu_1021_p3 = ((icmp_ln92_fu_1016_p2[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_col_0_phi_fu_664_p4);

assign select_ln98_10_fu_1621_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_10_1_fu_216);

assign select_ln98_11_fu_1642_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_11_1_fu_220);

assign select_ln98_12_fu_1747_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_12_1_fu_224);

assign select_ln98_13_fu_1768_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_13_1_fu_228);

assign select_ln98_14_fu_1789_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_14_1_fu_232);

assign select_ln98_15_fu_1810_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_15_1_fu_236);

assign select_ln98_1_fu_1287_p3 = ((icmp_ln98_fu_1240_p2[0:0] === 1'b1) ? 32'd0 : temp_sum_1_1_fu_180);

assign select_ln98_2_fu_1309_p3 = ((icmp_ln98_fu_1240_p2[0:0] === 1'b1) ? 32'd0 : temp_sum_2_1_fu_184);

assign select_ln98_3_fu_1331_p3 = ((icmp_ln98_fu_1240_p2[0:0] === 1'b1) ? 32'd0 : temp_sum_3_1_fu_188);

assign select_ln98_4_fu_1406_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_4_1_fu_192);

assign select_ln98_5_fu_1427_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_5_1_fu_196);

assign select_ln98_6_fu_1481_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_6_1_fu_200);

assign select_ln98_7_fu_1502_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_7_1_fu_204);

assign select_ln98_8_fu_1551_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_8_1_fu_208);

assign select_ln98_9_fu_1572_p3 = ((icmp_ln98_reg_2262[0:0] === 1'b1) ? 32'd0 : temp_sum_9_1_fu_212);

assign select_ln98_fu_1265_p3 = ((icmp_ln98_fu_1240_p2[0:0] === 1'b1) ? 32'd0 : temp_sum_0_1_fu_176);

assign sext_ln116_1_cast_fu_1878_p3 = {{trunc_ln116_1_fu_1874_p1}, {4'd0}};

assign sext_ln116_fu_1892_p1 = $signed(add_ln116_fu_1886_p2);

assign sext_ln72_1_cast_fu_887_p3 = {{trunc_ln72_1_fu_883_p1}, {4'd0}};

assign sext_ln72_fu_907_p1 = $signed(add_ln72_reg_1957_pp0_iter1_reg);

assign sext_ln84_1_cast_fu_961_p3 = {{trunc_ln84_1_fu_957_p1}, {4'd0}};

assign sext_ln84_fu_981_p1 = $signed(add_ln84_reg_1986_pp1_iter1_reg);

assign sext_ln99_10_fu_1195_p1 = $signed(or_ln99_9_fu_1190_p2);

assign sext_ln99_11_fu_1205_p1 = $signed(or_ln99_10_fu_1200_p2);

assign sext_ln99_12_fu_1250_p1 = $signed(or_ln99_11_fu_1245_p2);

assign sext_ln99_13_fu_1260_p1 = $signed(or_ln99_12_fu_1255_p2);

assign sext_ln99_14_fu_1388_p1 = $signed(or_ln99_13_fu_1383_p2);

assign sext_ln99_15_fu_1398_p1 = $signed(or_ln99_14_fu_1393_p2);

assign sext_ln99_1_cast_fu_1081_p3 = {{trunc_ln99_1_fu_1077_p1}, {4'd0}};

assign sext_ln99_1_fu_1072_p1 = $signed(tmp_19_fu_1064_p3);

assign sext_ln99_2_fu_1110_p1 = $signed(or_ln99_1_fu_1105_p2);

assign sext_ln99_3_fu_1120_p1 = $signed(or_ln99_2_fu_1115_p2);

assign sext_ln99_4_fu_1130_p1 = $signed(or_ln99_3_fu_1125_p2);

assign sext_ln99_5_fu_1140_p1 = $signed(or_ln99_4_fu_1135_p2);

assign sext_ln99_6_fu_1155_p1 = $signed(or_ln99_5_fu_1150_p2);

assign sext_ln99_7_fu_1165_p1 = $signed(or_ln99_6_fu_1160_p2);

assign sext_ln99_8_fu_1175_p1 = $signed(or_ln99_7_fu_1170_p2);

assign sext_ln99_9_fu_1185_p1 = $signed(or_ln99_8_fu_1180_p2);

assign sext_ln99_fu_1059_p1 = $signed(add_ln99_fu_1053_p2);

assign temp_sum_0_fu_1273_p2 = (mul_ln99_reg_2234 + select_ln98_fu_1265_p3);

assign temp_sum_10_fu_1628_p2 = (select_ln98_10_fu_1621_p3 + grp_fu_743_p2);

assign temp_sum_11_fu_1649_p2 = (select_ln98_11_fu_1642_p3 + grp_fu_748_p2);

assign temp_sum_12_fu_1754_p2 = (select_ln98_12_fu_1747_p3 + grp_fu_753_p2);

assign temp_sum_13_fu_1775_p2 = (select_ln98_13_fu_1768_p3 + grp_fu_758_p2);

assign temp_sum_14_fu_1796_p2 = (select_ln98_14_fu_1789_p3 + grp_fu_763_p2);

assign temp_sum_15_fu_1817_p2 = (select_ln98_15_fu_1810_p3 + grp_fu_768_p2);

assign temp_sum_1_fu_1295_p2 = (select_ln98_1_fu_1287_p3 + mul_ln99_1_reg_2239);

assign temp_sum_2_fu_1317_p2 = (select_ln98_2_fu_1309_p3 + grp_fu_743_p2);

assign temp_sum_3_fu_1339_p2 = (select_ln98_3_fu_1331_p3 + grp_fu_748_p2);

assign temp_sum_4_fu_1413_p2 = (select_ln98_4_fu_1406_p3 + grp_fu_753_p2);

assign temp_sum_5_fu_1434_p2 = (select_ln98_5_fu_1427_p3 + grp_fu_758_p2);

assign temp_sum_6_fu_1488_p2 = (select_ln98_6_fu_1481_p3 + grp_fu_763_p2);

assign temp_sum_7_fu_1509_p2 = (select_ln98_7_fu_1502_p3 + grp_fu_768_p2);

assign temp_sum_8_fu_1558_p2 = (select_ln98_8_fu_1551_p3 + grp_fu_1350_p2);

assign temp_sum_9_fu_1579_p2 = (select_ln98_9_fu_1572_p3 + grp_fu_738_p2);

assign tmp_10_fu_1539_p3 = {{29'd0}, {or_ln102_6_fu_1534_p2}};

assign tmp_11_fu_1595_p3 = {{29'd0}, {or_ln102_7_fu_1590_p2}};

assign tmp_12_fu_1609_p3 = {{29'd0}, {or_ln102_8_fu_1604_p2}};

assign tmp_13_fu_1665_p3 = {{29'd0}, {or_ln102_9_fu_1660_p2}};

assign tmp_14_fu_1679_p3 = {{29'd0}, {or_ln102_10_fu_1674_p2}};

assign tmp_15_fu_1693_p3 = {{29'd0}, {or_ln102_11_fu_1688_p2}};

assign tmp_16_fu_1707_p3 = {{29'd0}, {or_ln102_12_fu_1702_p2}};

assign tmp_17_fu_1721_p3 = {{29'd0}, {or_ln102_13_fu_1716_p2}};

assign tmp_18_fu_1735_p3 = {{29'd0}, {or_ln102_14_fu_1730_p2}};

assign tmp_19_fu_1064_p3 = {{select_ln89_fu_1021_p3}, {4'd0}};

assign tmp_2_fu_1469_p3 = {{29'd0}, {or_ln102_4_fu_1464_p2}};

assign tmp_5_fu_1525_p3 = {{29'd0}, {or_ln102_5_fu_1520_p2}};

assign tmp_6_fu_1213_p3 = {{select_ln89_1_reg_2128}, {4'd0}};

assign tmp_7_fu_1231_p3 = {{29'd0}, {or_ln102_fu_1225_p2}};

assign tmp_8_fu_1360_p3 = {{29'd0}, {or_ln102_1_fu_1355_p2}};

assign tmp_9_fu_1374_p3 = {{29'd0}, {or_ln102_2_fu_1369_p2}};

assign tmp_s_fu_1455_p3 = {{29'd0}, {or_ln102_3_fu_1450_p2}};

assign trunc_ln102_fu_1037_p1 = select_ln89_1_fu_1029_p3[5:0];

assign trunc_ln116_1_fu_1874_p1 = select_ln112_fu_1854_p3[5:0];

assign trunc_ln116_fu_1870_p1 = select_ln112_1_fu_1862_p3[9:0];

assign trunc_ln72_1_fu_883_p1 = select_ln68_1_fu_871_p3[5:0];

assign trunc_ln72_fu_879_p1 = select_ln68_fu_863_p3[9:0];

assign trunc_ln84_1_fu_957_p1 = select_ln80_1_fu_945_p3[5:0];

assign trunc_ln84_fu_953_p1 = select_ln80_fu_937_p3[9:0];

assign trunc_ln99_1_fu_1077_p1 = select_ln89_fu_1021_p3[5:0];

assign trunc_ln99_fu_1049_p1 = select_ln89_fu_1021_p3[9:0];

assign zext_ln101_fu_985_p1 = $unsigned(size_read_reg_1903);

assign zext_ln109_fu_1828_p1 = itr5_0_reg_671;

assign zext_ln65_fu_837_p1 = itr_0_reg_594;

assign zext_ln77_fu_911_p1 = itr1_0_reg_627;

assign zext_ln99_1_fu_1095_p1 = or_ln99_fu_1089_p2;

assign zext_ln99_cast_fu_1041_p3 = {{trunc_ln102_fu_1037_p1}, {4'd0}};

assign zext_ln99_fu_1220_p1 = tmp_6_fu_1213_p3;

always @ (posedge ap_clk) begin
    gmem_addr_reg_1915[63:62] <= 2'b00;
    gmem_addr_1_reg_1921[63:62] <= 2'b00;
    gmem_addr_2_reg_1927[63:62] <= 2'b00;
    sext_ln99_1_cast_reg_2139[3:0] <= 4'b0000;
    tmp_6_reg_2244[3:0] <= 4'b0000;
    C_addr_13_reg_2353[3:0] <= 4'b1100;
    C_addr_14_reg_2358[3:0] <= 4'b1101;
    C_addr_15_reg_2363[3:0] <= 4'b1110;
    C_addr_16_reg_2368[3:0] <= 4'b1111;
    ap_str_blocking_n_reg <= 1'b1;
    ap_int_blocking_n_reg <= 1'b1;
end

endmodule //matmul_matmul
