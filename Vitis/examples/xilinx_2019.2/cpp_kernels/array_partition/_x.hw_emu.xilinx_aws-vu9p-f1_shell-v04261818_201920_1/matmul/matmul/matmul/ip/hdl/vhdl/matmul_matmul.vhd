-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_matmul is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    event_done : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    event_start : OUT STD_LOGIC;
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of matmul_matmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul_matmul,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=2856,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=44,HLS_SYN_FF=5917,HLS_SYN_LUT=5057,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv35_1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv10_C : STD_LOGIC_VECTOR (9 downto 0) := "0000001100";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv35_2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_const_lv35_3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000011";
    constant ap_const_lv10_E : STD_LOGIC_VECTOR (9 downto 0) := "0000001110";
    constant ap_const_lv10_F : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    constant ap_const_lv35_4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_const_lv35_5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000101";
    constant ap_const_lv35_6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000110";
    constant ap_const_lv35_7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000111";
    constant ap_const_lv35_8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_const_lv35_9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001001";
    constant ap_const_lv35_A : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001010";
    constant ap_const_lv35_B : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001011";
    constant ap_const_lv35_C : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001100";
    constant ap_const_lv35_D : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001101";
    constant ap_const_lv35_E : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001110";
    constant ap_const_lv35_F : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in2 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln109_reg_2393 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_2393_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln77_reg_1972 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln65_reg_1943 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal itr_0_reg_594 : STD_LOGIC_VECTOR (30 downto 0);
    signal j3_0_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_0_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal itr1_0_reg_627 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_638 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_0_reg_649 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_0_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal itr5_0_reg_671 : STD_LOGIC_VECTOR (30 downto 0);
    signal i6_0_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal j7_0_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state31_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state39_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal icmp_ln89_reg_2113 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage5 : signal is "none";
    signal ap_block_state35_pp2_stage5_iter0 : BOOLEAN;
    signal ap_block_state43_pp2_stage5_iter1 : BOOLEAN;
    signal ap_block_pp2_stage5_11001 : BOOLEAN;
    signal reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state32_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state40_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp2_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage6 : signal is "none";
    signal ap_block_state36_pp2_stage6_iter0 : BOOLEAN;
    signal ap_block_pp2_stage6_11001 : BOOLEAN;
    signal reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_block_state33_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_state41_pp2_stage3_iter1 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp2_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage7 : signal is "none";
    signal ap_block_state37_pp2_stage7_iter0 : BOOLEAN;
    signal ap_block_pp2_stage7_11001 : BOOLEAN;
    signal reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_730 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage4 : signal is "none";
    signal ap_block_state34_pp2_stage4_iter0 : BOOLEAN;
    signal ap_block_state42_pp2_stage4_iter1 : BOOLEAN;
    signal ap_block_pp2_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state30_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_read_reg_1903 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_reg_1915 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_1921 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_1927 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln65_reg_1933 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln65_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln65_reg_1943_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal itr_fu_846_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln68_1_fu_871_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_1_reg_1952 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln72_fu_895_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln72_reg_1957 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln72_reg_1957_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j_fu_901_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_read_reg_1967 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln77_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state23_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln77_reg_1972_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal itr_1_fu_920_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln80_1_fu_945_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln80_1_reg_1981 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln84_fu_969_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln84_reg_1986 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln84_reg_1986_pp1_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_read_reg_1996 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln101_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln101_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln101_reg_2103 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_988_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln101_reg_2108 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln89_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_2113_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_fu_1004_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_reg_2117 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln89_fu_1021_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln89_reg_2122 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln89_1_fu_1029_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln89_1_reg_2128 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln99_1_cast_fu_1081_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln99_1_cast_reg_2139 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln101_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_2167 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_2167_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_reg_2181 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln99_reg_2234 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln99_1_reg_2239 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1213_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_6_reg_2244 : STD_LOGIC_VECTOR (34 downto 0);
    signal icmp_ln98_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_2262 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_sum_2_fu_1317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_2_reg_2288 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_3_fu_1339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_3_reg_2293 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_4_fu_1413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_4_reg_2308 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_5_fu_1434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_5_reg_2313 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_fu_1445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_reg_2318 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_6_fu_1488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_6_reg_2323 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_7_fu_1509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_7_reg_2328 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_8_fu_1558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_8_reg_2333 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_9_fu_1579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_9_reg_2338 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_10_fu_1628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_10_reg_2343 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_11_fu_1649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_11_reg_2348 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_addr_13_reg_2353 : STD_LOGIC_VECTOR (7 downto 0);
    signal C_addr_14_reg_2358 : STD_LOGIC_VECTOR (7 downto 0);
    signal C_addr_15_reg_2363 : STD_LOGIC_VECTOR (7 downto 0);
    signal C_addr_16_reg_2368 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_sum_12_fu_1754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_12_reg_2373 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_13_fu_1775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_13_reg_2378 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_14_fu_1796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_14_reg_2383 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_15_fu_1817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_15_reg_2388 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln109_fu_1832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state45_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state46_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state47_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state47_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal itr_2_fu_1837_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal select_ln112_fu_1854_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln112_reg_2402 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_1897_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_reg_2417 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state30 : STD_LOGIC;
    signal ap_block_pp2_stage7_subdone : BOOLEAN;
    signal ap_block_pp2_stage5_subdone : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state45 : STD_LOGIC;
    signal A_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_ce0 : STD_LOGIC;
    signal A_we0 : STD_LOGIC;
    signal B_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_we0 : STD_LOGIC;
    signal B_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_ce1 : STD_LOGIC;
    signal C_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal C_ce0 : STD_LOGIC;
    signal C_we0 : STD_LOGIC;
    signal C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal C_ce1 : STD_LOGIC;
    signal C_we1 : STD_LOGIC;
    signal C_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_phi_fu_587_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i2_0_phi_fu_620_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_642_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_row_0_phi_fu_653_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_col_0_phi_fu_664_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i6_0_phi_fu_686_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln72_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln84_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_1_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_1_fu_1095_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_2_fu_1110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal sext_ln99_3_fu_1120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_4_fu_1130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal sext_ln99_5_fu_1140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_6_fu_1155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal sext_ln99_7_fu_1165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_8_fu_1175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage4 : BOOLEAN;
    signal sext_ln99_9_fu_1185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_10_fu_1195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage5 : BOOLEAN;
    signal sext_ln99_11_fu_1205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_fu_1220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage6 : BOOLEAN;
    signal tmp_7_fu_1231_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_12_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_13_fu_1260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1360_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage7 : BOOLEAN;
    signal tmp_9_fu_1374_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_14_fu_1388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_15_fu_1398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1455_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_1469_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_1525_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1539_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_1595_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1609_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_1665_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1679_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_1693_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_1707_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_1721_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_1735_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln116_fu_1892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_5_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_6_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal temp_sum_0_1_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_0_fu_1273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_1_1_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_1_fu_1295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_2_1_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_3_1_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_4_1_fu_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_5_1_fu_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_6_1_fu_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_7_1_fu_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_8_1_fu_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_9_1_fu_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_10_1_fu_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_11_1_fu_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_12_1_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_13_1_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_14_1_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_15_1_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r5_fu_773_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal in_fu_793_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal in3_fu_813_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln65_fu_837_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln68_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_857_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln72_1_fu_883_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln72_1_cast_fu_887_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln72_fu_879_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln77_fu_911_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln80_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_931_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln80_fu_937_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln84_1_fu_957_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln84_1_cast_fu_961_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln84_fu_953_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_988_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_988_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln92_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_1010_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln102_fu_1037_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln99_cast_fu_1041_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln99_fu_1049_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln99_fu_1053_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_1064_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln99_1_fu_1077_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln99_fu_1089_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_1_fu_1105_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_2_fu_1115_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_3_fu_1125_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_4_fu_1135_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_5_fu_1150_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_6_fu_1160_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_7_fu_1170_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_8_fu_1180_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_9_fu_1190_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_10_fu_1200_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln102_fu_1225_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln99_11_fu_1245_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_12_fu_1255_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln98_fu_1265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_1_fu_1287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_2_fu_1309_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_3_fu_1331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_748_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln102_1_fu_1355_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln102_2_fu_1369_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln99_13_fu_1383_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln99_14_fu_1393_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln98_4_fu_1406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_5_fu_1427_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln102_3_fu_1450_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln102_4_fu_1464_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln98_6_fu_1481_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_7_fu_1502_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln102_5_fu_1520_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln102_6_fu_1534_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln98_8_fu_1551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_9_fu_1572_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln102_7_fu_1590_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln102_8_fu_1604_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln98_10_fu_1621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_11_fu_1642_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln102_9_fu_1660_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln102_10_fu_1674_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln102_11_fu_1688_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln102_12_fu_1702_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln102_13_fu_1716_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln102_14_fu_1730_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln98_12_fu_1747_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_13_fu_1768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_14_fu_1789_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_15_fu_1810_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln109_fu_1828_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln112_fu_1843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1848_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln112_1_fu_1862_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln116_1_fu_1874_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln116_1_cast_fu_1878_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln116_fu_1870_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln116_fu_1886_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_block_pp2_stage4_subdone : BOOLEAN;
    signal ap_block_pp2_stage6_subdone : BOOLEAN;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component matmul_matmul_mul_32s_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_matmul_mul_32ns_32ns_64_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component matmul_matmul_A IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_matmul_B IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_matmul_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_matmul_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        event_start : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        size : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_matmul_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    matmul_control_s_axi_U : component matmul_matmul_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        event_start => event_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in1 => in1,
        in2 => in2,
        out_r => out_r,
        size => size);

    matmul_gmem_m_axi_U : component matmul_matmul_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => mul_ln65_reg_1933,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_1915,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => mul_ln65_reg_1933,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => C_load_reg_2417,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    A_U : component matmul_matmul_A
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_address0,
        ce0 => A_ce0,
        we0 => A_we0,
        d0 => gmem_addr_2_read_reg_1967,
        q0 => A_q0);

    B_U : component matmul_matmul_B
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_address0,
        ce0 => B_ce0,
        we0 => B_we0,
        d0 => gmem_addr_1_read_reg_1996,
        q0 => B_q0,
        address1 => B_address1,
        ce1 => B_ce1,
        q1 => B_q1);

    C_U : component matmul_matmul_C
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C_address0,
        ce0 => C_ce0,
        we0 => C_we0,
        d0 => C_d0,
        q0 => C_q0,
        address1 => C_address1,
        ce1 => C_ce1,
        we1 => C_we1,
        d1 => C_d1);

    matmul_mul_32s_32s_32_4_1_U1 : component matmul_matmul_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_load_reg_2181,
        din1 => reg_709,
        ce => ap_const_logic_1,
        dout => grp_fu_738_p2);

    matmul_mul_32s_32s_32_4_1_U2 : component matmul_matmul_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_load_reg_2181,
        din1 => reg_714,
        ce => ap_const_logic_1,
        dout => grp_fu_743_p2);

    matmul_mul_32s_32s_32_4_1_U3 : component matmul_matmul_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_load_reg_2181,
        din1 => reg_718,
        ce => ap_const_logic_1,
        dout => grp_fu_748_p2);

    matmul_mul_32s_32s_32_4_1_U4 : component matmul_matmul_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_load_reg_2181,
        din1 => reg_722,
        ce => ap_const_logic_1,
        dout => grp_fu_753_p2);

    matmul_mul_32s_32s_32_4_1_U5 : component matmul_matmul_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_load_reg_2181,
        din1 => reg_726,
        ce => ap_const_logic_1,
        dout => grp_fu_758_p2);

    matmul_mul_32s_32s_32_4_1_U6 : component matmul_matmul_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_load_reg_2181,
        din1 => reg_730,
        ce => ap_const_logic_1,
        dout => grp_fu_763_p2);

    matmul_mul_32s_32s_32_4_1_U7 : component matmul_matmul_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_load_reg_2181,
        din1 => reg_734,
        ce => ap_const_logic_1,
        dout => grp_fu_768_p2);

    matmul_mul_32s_32s_32_4_1_U8 : component matmul_matmul_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => size_read_reg_1903,
        din1 => size_read_reg_1903,
        ce => ap_const_logic_1,
        dout => grp_fu_833_p2);

    matmul_mul_32ns_32ns_64_4_1_U9 : component matmul_matmul_mul_32ns_32ns_64_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_988_p0,
        din1 => grp_fu_988_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_988_p2);

    matmul_mul_32s_32s_32_4_1_U10 : component matmul_matmul_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_704,
        din1 => A_load_reg_2181,
        ce => ap_const_logic_1,
        dout => grp_fu_1145_p2);

    matmul_mul_32s_32s_32_4_1_U11 : component matmul_matmul_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_load_reg_2181,
        din1 => reg_704,
        ce => ap_const_logic_1,
        dout => grp_fu_1350_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state23);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state30) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7)) or ((ap_const_boolean_0 = ap_block_pp2_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state45) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state45)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state45);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ext_blocking_n_reg <= ap_ext_blocking_n;
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    col_0_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                col_0_reg_660 <= col_reg_2318;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                col_0_reg_660 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i2_0_reg_616_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i2_0_reg_616 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln77_reg_1972 = ap_const_lv1_1))) then 
                i2_0_reg_616 <= select_ln80_1_reg_1981;
            end if; 
        end if;
    end process;

    i6_0_reg_682_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i6_0_reg_682 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln109_reg_2393 = ap_const_lv1_1))) then 
                i6_0_reg_682 <= select_ln112_reg_2402;
            end if; 
        end if;
    end process;

    i_0_reg_583_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln65_reg_1943 = ap_const_lv1_1))) then 
                i_0_reg_583 <= select_ln68_1_reg_1952;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_reg_583 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_638_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_638 <= add_ln89_reg_2117;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                indvar_flatten_reg_638 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    itr1_0_reg_627_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                itr1_0_reg_627 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln77_fu_915_p2 = ap_const_lv1_1))) then 
                itr1_0_reg_627 <= itr_1_fu_920_p2;
            end if; 
        end if;
    end process;

    itr5_0_reg_671_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                itr5_0_reg_671 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln109_fu_1832_p2 = ap_const_lv1_1))) then 
                itr5_0_reg_671 <= itr_2_fu_1837_p2;
            end if; 
        end if;
    end process;

    itr_0_reg_594_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln65_fu_841_p2 = ap_const_lv1_1))) then 
                itr_0_reg_594 <= itr_fu_846_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                itr_0_reg_594 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j3_0_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                j3_0_reg_605 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln77_fu_915_p2 = ap_const_lv1_1))) then 
                j3_0_reg_605 <= j_1_fu_975_p2;
            end if; 
        end if;
    end process;

    j7_0_reg_693_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                j7_0_reg_693 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln109_fu_1832_p2 = ap_const_lv1_1))) then 
                j7_0_reg_693 <= j_2_fu_1897_p2;
            end if; 
        end if;
    end process;

    j_0_reg_572_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln65_fu_841_p2 = ap_const_lv1_1))) then 
                j_0_reg_572 <= j_fu_901_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_0_reg_572 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_704_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                if (((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then 
                    reg_704 <= B_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    reg_704 <= B_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_709_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                if (((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then 
                    reg_709 <= B_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    reg_709 <= B_q1;
                end if;
            end if; 
        end if;
    end process;

    row_0_reg_649_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                row_0_reg_649 <= select_ln89_1_reg_2128;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                row_0_reg_649 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                A_load_reg_2181 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (icmp_ln89_reg_2113_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                    C_addr_13_reg_2353(7 downto 4) <= tmp_15_fu_1693_p3(8 - 1 downto 0)(7 downto 4);
                    C_addr_14_reg_2358(7 downto 4) <= tmp_16_fu_1707_p3(8 - 1 downto 0)(7 downto 4);
                    C_addr_15_reg_2363(7 downto 4) <= tmp_17_fu_1721_p3(8 - 1 downto 0)(7 downto 4);
                    C_addr_16_reg_2368(7 downto 4) <= tmp_18_fu_1735_p3(8 - 1 downto 0)(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln109_reg_2393 = ap_const_lv1_1))) then
                C_load_reg_2417 <= C_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln101_reg_2103 <= add_ln101_fu_994_p2;
                mul_ln101_reg_2108 <= grp_fu_988_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln65_fu_841_p2 = ap_const_lv1_1))) then
                add_ln72_reg_1957 <= add_ln72_fu_895_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln72_reg_1957_pp0_iter1_reg <= add_ln72_reg_1957;
                icmp_ln65_reg_1943 <= icmp_ln65_fu_841_p2;
                icmp_ln65_reg_1943_pp0_iter1_reg <= icmp_ln65_reg_1943;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln77_fu_915_p2 = ap_const_lv1_1))) then
                add_ln84_reg_1986 <= add_ln84_fu_969_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln84_reg_1986_pp1_iter1_reg <= add_ln84_reg_1986;
                icmp_ln77_reg_1972 <= icmp_ln77_fu_915_p2;
                icmp_ln77_reg_1972_pp1_iter1_reg <= icmp_ln77_reg_1972;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                add_ln89_reg_2117 <= add_ln89_fu_1004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage7_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                col_reg_2318 <= col_fu_1445_p2;
                temp_sum_4_1_fu_192 <= temp_sum_4_fu_1413_p2;
                temp_sum_5_1_fu_196 <= temp_sum_5_fu_1434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln77_reg_1972 = ap_const_lv1_1))) then
                gmem_addr_1_read_reg_1996 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    gmem_addr_1_reg_1921(61 downto 0) <= empty_5_fu_803_p1(61 downto 0);
                    gmem_addr_2_reg_1927(61 downto 0) <= empty_6_fu_823_p1(61 downto 0);
                    gmem_addr_reg_1915(61 downto 0) <= empty_fu_783_p1(61 downto 0);
                size_read_reg_1903 <= size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln65_reg_1943 = ap_const_lv1_1))) then
                gmem_addr_2_read_reg_1967 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln89_fu_999_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln101_reg_2167 <= icmp_ln101_fu_1100_p2;
                select_ln89_reg_2122 <= select_ln89_fu_1021_p3;
                    sext_ln99_1_cast_reg_2139(9 downto 4) <= sext_ln99_1_cast_fu_1081_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln101_reg_2167_pp2_iter1_reg <= icmp_ln101_reg_2167;
                icmp_ln89_reg_2113 <= icmp_ln89_fu_999_p2;
                icmp_ln89_reg_2113_pp2_iter1_reg <= icmp_ln89_reg_2113;
                temp_sum_6_reg_2323 <= temp_sum_6_fu_1488_p2;
                temp_sum_7_reg_2328 <= temp_sum_7_fu_1509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln109_reg_2393 <= icmp_ln109_fu_1832_p2;
                icmp_ln109_reg_2393_pp3_iter1_reg <= icmp_ln109_reg_2393;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then
                icmp_ln98_reg_2262 <= icmp_ln98_fu_1240_p2;
                temp_sum_2_reg_2288 <= temp_sum_2_fu_1317_p2;
                temp_sum_3_reg_2293 <= temp_sum_3_fu_1339_p2;
                    tmp_6_reg_2244(34 downto 4) <= tmp_6_fu_1213_p3(34 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_ln65_reg_1933 <= grp_fu_833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                mul_ln99_1_reg_2239 <= grp_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then
                mul_ln99_reg_2234 <= grp_fu_1145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                reg_714 <= B_q1;
                reg_718 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage7_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                reg_722 <= B_q1;
                reg_726 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                reg_730 <= B_q1;
                reg_734 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln109_fu_1832_p2 = ap_const_lv1_1))) then
                select_ln112_reg_2402 <= select_ln112_fu_1854_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln65_fu_841_p2 = ap_const_lv1_1))) then
                select_ln68_1_reg_1952 <= select_ln68_1_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln77_fu_915_p2 = ap_const_lv1_1))) then
                select_ln80_1_reg_1981 <= select_ln80_1_fu_945_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln89_fu_999_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                select_ln89_1_reg_2128 <= select_ln89_1_fu_1029_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                temp_sum_0_1_fu_176 <= temp_sum_0_fu_1273_p2;
                temp_sum_1_1_fu_180 <= temp_sum_1_fu_1295_p2;
                temp_sum_2_1_fu_184 <= temp_sum_2_fu_1317_p2;
                temp_sum_3_1_fu_188 <= temp_sum_3_fu_1339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                temp_sum_10_1_fu_216 <= temp_sum_10_fu_1628_p2;
                temp_sum_11_1_fu_220 <= temp_sum_11_fu_1649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                temp_sum_10_reg_2343 <= temp_sum_10_fu_1628_p2;
                temp_sum_11_reg_2348 <= temp_sum_11_fu_1649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                temp_sum_12_1_fu_224 <= temp_sum_12_fu_1754_p2;
                temp_sum_13_1_fu_228 <= temp_sum_13_fu_1775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                temp_sum_12_reg_2373 <= temp_sum_12_fu_1754_p2;
                temp_sum_13_reg_2378 <= temp_sum_13_fu_1775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                temp_sum_14_1_fu_232 <= temp_sum_14_fu_1796_p2;
                temp_sum_15_1_fu_236 <= temp_sum_15_fu_1817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                temp_sum_14_reg_2383 <= temp_sum_14_fu_1796_p2;
                temp_sum_15_reg_2388 <= temp_sum_15_fu_1817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage7_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7))) then
                temp_sum_4_reg_2308 <= temp_sum_4_fu_1413_p2;
                temp_sum_5_reg_2313 <= temp_sum_5_fu_1434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                temp_sum_6_1_fu_200 <= temp_sum_6_fu_1488_p2;
                temp_sum_7_1_fu_204 <= temp_sum_7_fu_1509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                temp_sum_8_1_fu_208 <= temp_sum_8_fu_1558_p2;
                temp_sum_9_1_fu_212 <= temp_sum_9_fu_1579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                temp_sum_8_reg_2333 <= temp_sum_8_fu_1558_p2;
                temp_sum_9_reg_2338 <= temp_sum_9_fu_1579_p2;
            end if;
        end if;
    end process;
    gmem_addr_reg_1915(63 downto 62) <= "00";
    gmem_addr_1_reg_1921(63 downto 62) <= "00";
    gmem_addr_2_reg_1927(63 downto 62) <= "00";
    sext_ln99_1_cast_reg_2139(3 downto 0) <= "0000";
    tmp_6_reg_2244(3 downto 0) <= "0000";
    C_addr_13_reg_2353(3 downto 0) <= "1100";
    C_addr_14_reg_2358(3 downto 0) <= "1101";
    C_addr_15_reg_2363(3 downto 0) <= "1110";
    C_addr_16_reg_2368(3 downto 0) <= "1111";
    ap_str_blocking_n_reg <= '1';
    ap_int_blocking_n_reg <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state44, ap_enable_reg_pp3_iter2, ap_CS_fsm_state52, ap_CS_fsm_state16, ap_enable_reg_pp1_iter1, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage5, ap_enable_reg_pp2_iter1, icmp_ln65_fu_841_p2, ap_enable_reg_pp0_iter0, icmp_ln77_fu_915_p2, ap_enable_reg_pp1_iter0, icmp_ln89_fu_999_p2, icmp_ln109_fu_1832_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_block_pp2_stage7_subdone, ap_block_pp2_stage5_subdone, ap_block_pp3_stage0_subdone, ap_block_pp2_stage1_subdone, ap_block_pp2_stage2_subdone, ap_block_pp2_stage3_subdone, ap_block_pp2_stage4_subdone, ap_block_pp2_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln65_fu_841_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln65_fu_841_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln77_fu_915_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln77_fu_915_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln89_fu_999_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln89_fu_999_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_pp2_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                end if;
            when ap_ST_fsm_pp2_stage5 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage5_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) and (ap_const_boolean_0 = ap_block_pp2_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage6;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage5_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage5;
                end if;
            when ap_ST_fsm_pp2_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage6;
                end if;
            when ap_ST_fsm_pp2_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage7;
                end if;
            when ap_ST_fsm_state44 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln109_fu_1832_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln109_fu_1832_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0, sext_ln72_fu_907_p1, sext_ln99_fu_1059_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            A_address0 <= sext_ln99_fu_1059_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            A_address0 <= sext_ln72_fu_907_p1(8 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln65_reg_1943_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln65_reg_1943_pp0_iter1_reg = ap_const_lv1_1))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage5, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage6, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage7, ap_CS_fsm_pp2_stage4, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0, sext_ln84_fu_981_p1, sext_ln99_1_fu_1072_p1, ap_block_pp2_stage1, sext_ln99_3_fu_1120_p1, ap_block_pp2_stage2, sext_ln99_5_fu_1140_p1, ap_block_pp2_stage3, sext_ln99_7_fu_1165_p1, ap_block_pp2_stage4, sext_ln99_9_fu_1185_p1, ap_block_pp2_stage5, sext_ln99_11_fu_1205_p1, ap_block_pp2_stage6, sext_ln99_13_fu_1260_p1, ap_block_pp2_stage7, sext_ln99_15_fu_1398_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            B_address0 <= sext_ln99_15_fu_1398_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            B_address0 <= sext_ln99_13_fu_1260_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            B_address0 <= sext_ln99_11_fu_1205_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            B_address0 <= sext_ln99_9_fu_1185_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            B_address0 <= sext_ln99_7_fu_1165_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            B_address0 <= sext_ln99_5_fu_1140_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            B_address0 <= sext_ln99_3_fu_1120_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            B_address0 <= sext_ln99_1_fu_1072_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            B_address0 <= sext_ln84_fu_981_p1(8 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage5, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage6, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage7, ap_CS_fsm_pp2_stage4, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, zext_ln99_1_fu_1095_p1, sext_ln99_2_fu_1110_p1, ap_block_pp2_stage1, sext_ln99_4_fu_1130_p1, ap_block_pp2_stage2, sext_ln99_6_fu_1155_p1, ap_block_pp2_stage3, sext_ln99_8_fu_1175_p1, ap_block_pp2_stage4, sext_ln99_10_fu_1195_p1, ap_block_pp2_stage5, ap_block_pp2_stage6, sext_ln99_12_fu_1250_p1, ap_block_pp2_stage7, sext_ln99_14_fu_1388_p1)
    begin
        if ((ap_enable_reg_pp2_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7))) then 
                B_address1 <= sext_ln99_14_fu_1388_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then 
                B_address1 <= sext_ln99_12_fu_1250_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then 
                B_address1 <= sext_ln99_10_fu_1195_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                B_address1 <= sext_ln99_8_fu_1175_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                B_address1 <= sext_ln99_6_fu_1155_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                B_address1 <= sext_ln99_4_fu_1130_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                B_address1 <= sext_ln99_2_fu_1110_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                B_address1 <= zext_ln99_1_fu_1095_p1(8 - 1 downto 0);
            else 
                B_address1 <= "XXXXXXXX";
            end if;
        else 
            B_address1 <= "XXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage6, ap_block_pp2_stage6_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage7, ap_block_pp2_stage7_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage6, ap_block_pp2_stage6_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage7, ap_block_pp2_stage7_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln77_reg_1972_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln77_reg_1972_pp1_iter1_reg = ap_const_lv1_1))) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage5, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage6, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage7, ap_CS_fsm_pp2_stage4, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, C_addr_13_reg_2353, C_addr_15_reg_2363, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, ap_block_pp2_stage4, ap_block_pp2_stage5, zext_ln99_fu_1220_p1, ap_block_pp2_stage6, tmp_8_fu_1360_p3, ap_block_pp2_stage7, tmp_s_fu_1455_p3, tmp_5_fu_1525_p3, tmp_11_fu_1595_p3, tmp_13_fu_1665_p3, sext_ln116_fu_1892_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            C_address0 <= sext_ln116_fu_1892_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage5) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then 
            C_address0 <= C_addr_15_reg_2363;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            C_address0 <= C_addr_13_reg_2353;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            C_address0 <= tmp_13_fu_1665_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            C_address0 <= tmp_11_fu_1595_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            C_address0 <= tmp_5_fu_1525_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            C_address0 <= tmp_s_fu_1455_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            C_address0 <= tmp_8_fu_1360_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            C_address0 <= zext_ln99_fu_1220_p1(8 - 1 downto 0);
        else 
            C_address0 <= "XXXXXXXX";
        end if; 
    end process;


    C_address1_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage5, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage6, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage7, ap_CS_fsm_pp2_stage4, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, C_addr_14_reg_2358, C_addr_16_reg_2368, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, ap_block_pp2_stage4, ap_block_pp2_stage5, ap_block_pp2_stage6, tmp_7_fu_1231_p3, ap_block_pp2_stage7, tmp_9_fu_1374_p3, tmp_2_fu_1469_p3, tmp_10_fu_1539_p3, tmp_12_fu_1609_p3, tmp_14_fu_1679_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage5) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then 
            C_address1 <= C_addr_16_reg_2368;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            C_address1 <= C_addr_14_reg_2358;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            C_address1 <= tmp_14_fu_1679_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            C_address1 <= tmp_12_fu_1609_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            C_address1 <= tmp_10_fu_1539_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            C_address1 <= tmp_2_fu_1469_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            C_address1 <= tmp_9_fu_1374_p3(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            C_address1 <= tmp_7_fu_1231_p3(8 - 1 downto 0);
        else 
            C_address1 <= "XXXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage6, ap_block_pp2_stage6_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage7, ap_block_pp2_stage7_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5)) or ((ap_const_boolean_0 = ap_block_pp2_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce1_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage6, ap_block_pp2_stage6_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage7, ap_block_pp2_stage7_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5)) or ((ap_const_boolean_0 = ap_block_pp2_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            C_ce1 <= ap_const_logic_1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_d0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage5, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage6, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage7, ap_CS_fsm_pp2_stage4, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, temp_sum_2_reg_2288, temp_sum_4_reg_2308, temp_sum_6_reg_2323, temp_sum_8_reg_2333, temp_sum_10_reg_2343, temp_sum_12_reg_2373, temp_sum_14_reg_2383, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, ap_block_pp2_stage4, ap_block_pp2_stage5, ap_block_pp2_stage6, ap_block_pp2_stage7, temp_sum_0_fu_1273_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage5) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then 
            C_d0 <= temp_sum_14_reg_2383;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            C_d0 <= temp_sum_12_reg_2373;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            C_d0 <= temp_sum_10_reg_2343;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            C_d0 <= temp_sum_8_reg_2333;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            C_d0 <= temp_sum_6_reg_2323;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            C_d0 <= temp_sum_4_reg_2308;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            C_d0 <= temp_sum_2_reg_2288;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            C_d0 <= temp_sum_0_fu_1273_p2;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_d1_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage5, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage6, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage7, ap_CS_fsm_pp2_stage4, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, temp_sum_3_reg_2293, temp_sum_5_reg_2313, temp_sum_7_reg_2328, temp_sum_9_reg_2338, temp_sum_11_reg_2348, temp_sum_13_reg_2378, temp_sum_15_reg_2388, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, ap_block_pp2_stage4, ap_block_pp2_stage5, ap_block_pp2_stage6, ap_block_pp2_stage7, temp_sum_1_fu_1295_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage5) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then 
            C_d1 <= temp_sum_15_reg_2388;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            C_d1 <= temp_sum_13_reg_2378;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            C_d1 <= temp_sum_11_reg_2348;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            C_d1 <= temp_sum_9_reg_2338;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            C_d1 <= temp_sum_7_reg_2328;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            C_d1 <= temp_sum_5_reg_2313;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            C_d1 <= temp_sum_3_reg_2293;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            C_d1 <= temp_sum_1_fu_1295_p2;
        else 
            C_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_we0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, icmp_ln89_reg_2113, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage6, ap_block_pp2_stage6_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage7, ap_block_pp2_stage7_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, icmp_ln101_reg_2167, icmp_ln101_reg_2167_pp2_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln101_reg_2167 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (icmp_ln101_reg_2167_pp2_iter1_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (icmp_ln101_reg_2167_pp2_iter1_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln101_reg_2167_pp2_iter1_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (icmp_ln101_reg_2167_pp2_iter1_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage7_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln101_reg_2167 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln101_reg_2167 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln101_reg_2167_pp2_iter1_reg = ap_const_lv1_1)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_we1_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, icmp_ln89_reg_2113, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage6, ap_block_pp2_stage6_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage7, ap_block_pp2_stage7_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, icmp_ln101_reg_2167, icmp_ln101_reg_2167_pp2_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln101_reg_2167 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (icmp_ln101_reg_2167_pp2_iter1_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (icmp_ln101_reg_2167_pp2_iter1_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln101_reg_2167_pp2_iter1_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5) and (icmp_ln101_reg_2167_pp2_iter1_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage7_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage7) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln101_reg_2167 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln101_reg_2167 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln101_reg_2167_pp2_iter1_reg = ap_const_lv1_1)))) then 
            C_we1 <= ap_const_logic_1;
        else 
            C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln101_fu_994_p2 <= std_logic_vector(signed(size_read_reg_1903) + signed(ap_const_lv32_FFFFFFFF));
    add_ln116_fu_1886_p2 <= std_logic_vector(unsigned(sext_ln116_1_cast_fu_1878_p3) + unsigned(trunc_ln116_fu_1870_p1));
    add_ln72_fu_895_p2 <= std_logic_vector(unsigned(sext_ln72_1_cast_fu_887_p3) + unsigned(trunc_ln72_fu_879_p1));
    add_ln84_fu_969_p2 <= std_logic_vector(unsigned(sext_ln84_1_cast_fu_961_p3) + unsigned(trunc_ln84_fu_953_p1));
    add_ln89_fu_1004_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_642_p4) + unsigned(ap_const_lv64_1));
    add_ln99_fu_1053_p2 <= std_logic_vector(unsigned(zext_ln99_cast_fu_1041_p3) + unsigned(trunc_ln99_fu_1049_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(26);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(27);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(28);
    ap_CS_fsm_pp2_stage4 <= ap_CS_fsm(29);
    ap_CS_fsm_pp2_stage5 <= ap_CS_fsm(30);
    ap_CS_fsm_pp2_stage6 <= ap_CS_fsm(31);
    ap_CS_fsm_pp2_stage7 <= ap_CS_fsm(32);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(34);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(21);
    ap_CS_fsm_state29 <= ap_CS_fsm(24);
    ap_CS_fsm_state44 <= ap_CS_fsm(33);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(39);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln65_reg_1943, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln65_reg_1943 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln65_reg_1943, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln65_reg_1943 = ap_const_lv1_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln77_reg_1972, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln77_reg_1972 = ap_const_lv1_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln77_reg_1972, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln77_reg_1972 = ap_const_lv1_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state47_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state47_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state47_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state47_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;

        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter1_assign_proc : process(icmp_ln65_reg_1943, gmem_RVALID)
    begin
                ap_block_state14_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln65_reg_1943 = ap_const_lv1_1));
    end process;

        ap_block_state15_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_pp1_stage0_iter1_assign_proc : process(icmp_ln77_reg_1972, gmem_RVALID)
    begin
                ap_block_state24_pp1_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln77_reg_1972 = ap_const_lv1_1));
    end process;

        ap_block_state25_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state47_io_assign_proc : process(icmp_ln109_reg_2393_pp3_iter1_reg, gmem_WREADY)
    begin
                ap_block_state47_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln109_reg_2393_pp3_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state47_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state13_assign_proc : process(icmp_ln65_fu_841_p2)
    begin
        if ((icmp_ln65_fu_841_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state23_assign_proc : process(icmp_ln77_fu_915_p2)
    begin
        if ((icmp_ln77_fu_915_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state30_assign_proc : process(icmp_ln89_fu_999_p2)
    begin
        if ((icmp_ln89_fu_999_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state45_assign_proc : process(icmp_ln109_fu_1832_p2)
    begin
        if ((icmp_ln109_fu_1832_p2 = ap_const_lv1_0)) then 
            ap_condition_pp3_exit_iter0_state45 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state52, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_ext_blocking_cur_n <= (gmem_blk_n_W and gmem_blk_n_R and gmem_blk_n_B and gmem_blk_n_AW and gmem_blk_n_AR);
    ap_ext_blocking_n <= (ap_ext_blocking_cur_n and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_phi_mux_col_0_phi_fu_664_p4_assign_proc : process(col_0_reg_660, icmp_ln89_reg_2113, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, col_reg_2318, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_col_0_phi_fu_664_p4 <= col_reg_2318;
        else 
            ap_phi_mux_col_0_phi_fu_664_p4 <= col_0_reg_660;
        end if; 
    end process;


    ap_phi_mux_i2_0_phi_fu_620_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln77_reg_1972, i2_0_reg_616, select_ln80_1_reg_1981)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln77_reg_1972 = ap_const_lv1_1))) then 
            ap_phi_mux_i2_0_phi_fu_620_p4 <= select_ln80_1_reg_1981;
        else 
            ap_phi_mux_i2_0_phi_fu_620_p4 <= i2_0_reg_616;
        end if; 
    end process;


    ap_phi_mux_i6_0_phi_fu_686_p4_assign_proc : process(ap_block_pp3_stage0, icmp_ln109_reg_2393, i6_0_reg_682, ap_CS_fsm_pp3_stage0, select_ln112_reg_2402, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln109_reg_2393 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_i6_0_phi_fu_686_p4 <= select_ln112_reg_2402;
        else 
            ap_phi_mux_i6_0_phi_fu_686_p4 <= i6_0_reg_682;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_587_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln65_reg_1943, i_0_reg_583, select_ln68_1_reg_1952)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln65_reg_1943 = ap_const_lv1_1))) then 
            ap_phi_mux_i_0_phi_fu_587_p4 <= select_ln68_1_reg_1952;
        else 
            ap_phi_mux_i_0_phi_fu_587_p4 <= i_0_reg_583;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_642_p4_assign_proc : process(indvar_flatten_reg_638, icmp_ln89_reg_2113, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, add_ln89_reg_2117, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_642_p4 <= add_ln89_reg_2117;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_642_p4 <= indvar_flatten_reg_638;
        end if; 
    end process;


    ap_phi_mux_row_0_phi_fu_653_p4_assign_proc : process(row_0_reg_649, icmp_ln89_reg_2113, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, select_ln89_1_reg_2128, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln89_reg_2113 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_row_0_phi_fu_653_p4 <= select_ln89_1_reg_2128;
        else 
            ap_phi_mux_row_0_phi_fu_653_p4 <= row_0_reg_649;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state52, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    col_fu_1445_p2 <= std_logic_vector(unsigned(select_ln89_reg_2122) + unsigned(ap_const_lv32_1));
    empty_5_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_fu_793_p4),64));
    empty_6_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in3_fu_813_p4),64));
    empty_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_r5_fu_773_p4),64));
    event_done <= ap_done;

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state6, gmem_ARREADY, gmem_addr_1_reg_1921, gmem_addr_2_reg_1927)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                gmem_ARADDR <= gmem_addr_1_reg_1921;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                gmem_ARADDR <= gmem_addr_2_reg_1927;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state6, gmem_ARREADY)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state44, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state52, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln77_reg_1972, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln65_reg_1943, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln65_reg_1943 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln77_reg_1972 = ap_const_lv1_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp3_iter2, icmp_ln109_reg_2393_pp3_iter1_reg, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln109_reg_2393_pp3_iter1_reg = ap_const_lv1_1))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state16, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln77_reg_1972, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln65_reg_1943)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln65_reg_1943 = ap_const_lv1_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln77_reg_1972 = ap_const_lv1_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, icmp_ln109_reg_2393_pp3_iter1_reg)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln109_reg_2393_pp3_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_988_p0 <= zext_ln101_fu_985_p1(32 - 1 downto 0);
    grp_fu_988_p1 <= zext_ln101_fu_985_p1(32 - 1 downto 0);
    i_1_fu_931_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i2_0_phi_fu_620_p4));
    i_2_fu_1848_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i6_0_phi_fu_686_p4));
    i_fu_857_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i_0_phi_fu_587_p4));
    icmp_ln101_fu_1100_p2 <= "1" when (select_ln89_fu_1021_p3 = add_ln101_reg_2103) else "0";
    icmp_ln109_fu_1832_p2 <= "1" when (signed(zext_ln109_fu_1828_p1) < signed(mul_ln65_reg_1933)) else "0";
    icmp_ln112_fu_1843_p2 <= "1" when (j7_0_reg_693 = size_read_reg_1903) else "0";
    icmp_ln65_fu_841_p2 <= "1" when (signed(zext_ln65_fu_837_p1) < signed(mul_ln65_reg_1933)) else "0";
    icmp_ln68_fu_852_p2 <= "1" when (j_0_reg_572 = size_read_reg_1903) else "0";
    icmp_ln77_fu_915_p2 <= "1" when (signed(zext_ln77_fu_911_p1) < signed(mul_ln65_reg_1933)) else "0";
    icmp_ln80_fu_926_p2 <= "1" when (j3_0_reg_605 = size_read_reg_1903) else "0";
    icmp_ln89_fu_999_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_642_p4 = mul_ln101_reg_2108) else "0";
    icmp_ln92_fu_1016_p2 <= "1" when (ap_phi_mux_col_0_phi_fu_664_p4 = size_read_reg_1903) else "0";
    icmp_ln98_fu_1240_p2 <= "1" when (select_ln89_reg_2122 = ap_const_lv32_0) else "0";
    in3_fu_813_p4 <= in1(63 downto 2);
    in_fu_793_p4 <= in2(63 downto 2);
    itr_1_fu_920_p2 <= std_logic_vector(unsigned(itr1_0_reg_627) + unsigned(ap_const_lv31_1));
    itr_2_fu_1837_p2 <= std_logic_vector(unsigned(itr5_0_reg_671) + unsigned(ap_const_lv31_1));
    itr_fu_846_p2 <= std_logic_vector(unsigned(itr_0_reg_594) + unsigned(ap_const_lv31_1));
    j_1_fu_975_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln80_fu_937_p3));
    j_2_fu_1897_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln112_1_fu_1862_p3));
    j_fu_901_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln68_fu_863_p3));
    or_ln102_10_fu_1674_p2 <= (tmp_6_reg_2244 or ap_const_lv35_B);
    or_ln102_11_fu_1688_p2 <= (tmp_6_reg_2244 or ap_const_lv35_C);
    or_ln102_12_fu_1702_p2 <= (tmp_6_reg_2244 or ap_const_lv35_D);
    or_ln102_13_fu_1716_p2 <= (tmp_6_reg_2244 or ap_const_lv35_E);
    or_ln102_14_fu_1730_p2 <= (tmp_6_reg_2244 or ap_const_lv35_F);
    or_ln102_1_fu_1355_p2 <= (tmp_6_reg_2244 or ap_const_lv35_2);
    or_ln102_2_fu_1369_p2 <= (tmp_6_reg_2244 or ap_const_lv35_3);
    or_ln102_3_fu_1450_p2 <= (tmp_6_reg_2244 or ap_const_lv35_4);
    or_ln102_4_fu_1464_p2 <= (tmp_6_reg_2244 or ap_const_lv35_5);
    or_ln102_5_fu_1520_p2 <= (tmp_6_reg_2244 or ap_const_lv35_6);
    or_ln102_6_fu_1534_p2 <= (tmp_6_reg_2244 or ap_const_lv35_7);
    or_ln102_7_fu_1590_p2 <= (tmp_6_reg_2244 or ap_const_lv35_8);
    or_ln102_8_fu_1604_p2 <= (tmp_6_reg_2244 or ap_const_lv35_9);
    or_ln102_9_fu_1660_p2 <= (tmp_6_reg_2244 or ap_const_lv35_A);
    or_ln102_fu_1225_p2 <= (tmp_6_fu_1213_p3 or ap_const_lv35_1);
    or_ln99_10_fu_1200_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_B);
    or_ln99_11_fu_1245_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_C);
    or_ln99_12_fu_1255_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_D);
    or_ln99_13_fu_1383_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_E);
    or_ln99_14_fu_1393_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_F);
    or_ln99_1_fu_1105_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_2);
    or_ln99_2_fu_1115_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_3);
    or_ln99_3_fu_1125_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_4);
    or_ln99_4_fu_1135_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_5);
    or_ln99_5_fu_1150_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_6);
    or_ln99_6_fu_1160_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_7);
    or_ln99_7_fu_1170_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_8);
    or_ln99_8_fu_1180_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_9);
    or_ln99_9_fu_1190_p2 <= (sext_ln99_1_cast_reg_2139 or ap_const_lv10_A);
    or_ln99_fu_1089_p2 <= (sext_ln99_1_cast_fu_1081_p3 or ap_const_lv10_1);
    out_r5_fu_773_p4 <= out_r(63 downto 2);
    row_fu_1010_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ap_phi_mux_row_0_phi_fu_653_p4));
    select_ln112_1_fu_1862_p3 <= 
        ap_const_lv32_0 when (icmp_ln112_fu_1843_p2(0) = '1') else 
        j7_0_reg_693;
    select_ln112_fu_1854_p3 <= 
        i_2_fu_1848_p2 when (icmp_ln112_fu_1843_p2(0) = '1') else 
        ap_phi_mux_i6_0_phi_fu_686_p4;
    select_ln68_1_fu_871_p3 <= 
        i_fu_857_p2 when (icmp_ln68_fu_852_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_587_p4;
    select_ln68_fu_863_p3 <= 
        ap_const_lv32_0 when (icmp_ln68_fu_852_p2(0) = '1') else 
        j_0_reg_572;
    select_ln80_1_fu_945_p3 <= 
        i_1_fu_931_p2 when (icmp_ln80_fu_926_p2(0) = '1') else 
        ap_phi_mux_i2_0_phi_fu_620_p4;
    select_ln80_fu_937_p3 <= 
        ap_const_lv32_0 when (icmp_ln80_fu_926_p2(0) = '1') else 
        j3_0_reg_605;
    select_ln89_1_fu_1029_p3 <= 
        row_fu_1010_p2 when (icmp_ln92_fu_1016_p2(0) = '1') else 
        ap_phi_mux_row_0_phi_fu_653_p4;
    select_ln89_fu_1021_p3 <= 
        ap_const_lv32_0 when (icmp_ln92_fu_1016_p2(0) = '1') else 
        ap_phi_mux_col_0_phi_fu_664_p4;
    select_ln98_10_fu_1621_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_10_1_fu_216;
    select_ln98_11_fu_1642_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_11_1_fu_220;
    select_ln98_12_fu_1747_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_12_1_fu_224;
    select_ln98_13_fu_1768_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_13_1_fu_228;
    select_ln98_14_fu_1789_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_14_1_fu_232;
    select_ln98_15_fu_1810_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_15_1_fu_236;
    select_ln98_1_fu_1287_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_fu_1240_p2(0) = '1') else 
        temp_sum_1_1_fu_180;
    select_ln98_2_fu_1309_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_fu_1240_p2(0) = '1') else 
        temp_sum_2_1_fu_184;
    select_ln98_3_fu_1331_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_fu_1240_p2(0) = '1') else 
        temp_sum_3_1_fu_188;
    select_ln98_4_fu_1406_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_4_1_fu_192;
    select_ln98_5_fu_1427_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_5_1_fu_196;
    select_ln98_6_fu_1481_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_6_1_fu_200;
    select_ln98_7_fu_1502_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_7_1_fu_204;
    select_ln98_8_fu_1551_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_8_1_fu_208;
    select_ln98_9_fu_1572_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_reg_2262(0) = '1') else 
        temp_sum_9_1_fu_212;
    select_ln98_fu_1265_p3 <= 
        ap_const_lv32_0 when (icmp_ln98_fu_1240_p2(0) = '1') else 
        temp_sum_0_1_fu_176;
    sext_ln116_1_cast_fu_1878_p3 <= (trunc_ln116_1_fu_1874_p1 & ap_const_lv4_0);
        sext_ln116_fu_1892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln116_fu_1886_p2),64));

    sext_ln72_1_cast_fu_887_p3 <= (trunc_ln72_1_fu_883_p1 & ap_const_lv4_0);
        sext_ln72_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln72_reg_1957_pp0_iter1_reg),64));

    sext_ln84_1_cast_fu_961_p3 <= (trunc_ln84_1_fu_957_p1 & ap_const_lv4_0);
        sext_ln84_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln84_reg_1986_pp1_iter1_reg),64));

        sext_ln99_10_fu_1195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_9_fu_1190_p2),64));

        sext_ln99_11_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_10_fu_1200_p2),64));

        sext_ln99_12_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_11_fu_1245_p2),64));

        sext_ln99_13_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_12_fu_1255_p2),64));

        sext_ln99_14_fu_1388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_13_fu_1383_p2),64));

        sext_ln99_15_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_14_fu_1393_p2),64));

    sext_ln99_1_cast_fu_1081_p3 <= (trunc_ln99_1_fu_1077_p1 & ap_const_lv4_0);
        sext_ln99_1_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_1064_p3),64));

        sext_ln99_2_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_1_fu_1105_p2),64));

        sext_ln99_3_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_2_fu_1115_p2),64));

        sext_ln99_4_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_3_fu_1125_p2),64));

        sext_ln99_5_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_4_fu_1135_p2),64));

        sext_ln99_6_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_5_fu_1150_p2),64));

        sext_ln99_7_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_6_fu_1160_p2),64));

        sext_ln99_8_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_7_fu_1170_p2),64));

        sext_ln99_9_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln99_8_fu_1180_p2),64));

        sext_ln99_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln99_fu_1053_p2),64));


    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_0) and (ap_ext_blocking_n = ap_const_logic_1))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_0) and (ap_int_blocking_n = ap_const_logic_1))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_0) and (ap_str_blocking_n = ap_const_logic_1))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n = ap_const_logic_0) and (ap_ext_blocking_n_reg = ap_const_logic_1))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n = ap_const_logic_0) and (ap_int_blocking_n_reg = ap_const_logic_1))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n = ap_const_logic_0) and (ap_str_blocking_n_reg = ap_const_logic_1))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

    temp_sum_0_fu_1273_p2 <= std_logic_vector(unsigned(mul_ln99_reg_2234) + unsigned(select_ln98_fu_1265_p3));
    temp_sum_10_fu_1628_p2 <= std_logic_vector(unsigned(select_ln98_10_fu_1621_p3) + unsigned(grp_fu_743_p2));
    temp_sum_11_fu_1649_p2 <= std_logic_vector(unsigned(select_ln98_11_fu_1642_p3) + unsigned(grp_fu_748_p2));
    temp_sum_12_fu_1754_p2 <= std_logic_vector(unsigned(select_ln98_12_fu_1747_p3) + unsigned(grp_fu_753_p2));
    temp_sum_13_fu_1775_p2 <= std_logic_vector(unsigned(select_ln98_13_fu_1768_p3) + unsigned(grp_fu_758_p2));
    temp_sum_14_fu_1796_p2 <= std_logic_vector(unsigned(select_ln98_14_fu_1789_p3) + unsigned(grp_fu_763_p2));
    temp_sum_15_fu_1817_p2 <= std_logic_vector(unsigned(select_ln98_15_fu_1810_p3) + unsigned(grp_fu_768_p2));
    temp_sum_1_fu_1295_p2 <= std_logic_vector(unsigned(select_ln98_1_fu_1287_p3) + unsigned(mul_ln99_1_reg_2239));
    temp_sum_2_fu_1317_p2 <= std_logic_vector(unsigned(select_ln98_2_fu_1309_p3) + unsigned(grp_fu_743_p2));
    temp_sum_3_fu_1339_p2 <= std_logic_vector(unsigned(select_ln98_3_fu_1331_p3) + unsigned(grp_fu_748_p2));
    temp_sum_4_fu_1413_p2 <= std_logic_vector(unsigned(select_ln98_4_fu_1406_p3) + unsigned(grp_fu_753_p2));
    temp_sum_5_fu_1434_p2 <= std_logic_vector(unsigned(select_ln98_5_fu_1427_p3) + unsigned(grp_fu_758_p2));
    temp_sum_6_fu_1488_p2 <= std_logic_vector(unsigned(select_ln98_6_fu_1481_p3) + unsigned(grp_fu_763_p2));
    temp_sum_7_fu_1509_p2 <= std_logic_vector(unsigned(select_ln98_7_fu_1502_p3) + unsigned(grp_fu_768_p2));
    temp_sum_8_fu_1558_p2 <= std_logic_vector(unsigned(select_ln98_8_fu_1551_p3) + unsigned(grp_fu_1350_p2));
    temp_sum_9_fu_1579_p2 <= std_logic_vector(unsigned(select_ln98_9_fu_1572_p3) + unsigned(grp_fu_738_p2));
    tmp_10_fu_1539_p3 <= (ap_const_lv29_0 & or_ln102_6_fu_1534_p2);
    tmp_11_fu_1595_p3 <= (ap_const_lv29_0 & or_ln102_7_fu_1590_p2);
    tmp_12_fu_1609_p3 <= (ap_const_lv29_0 & or_ln102_8_fu_1604_p2);
    tmp_13_fu_1665_p3 <= (ap_const_lv29_0 & or_ln102_9_fu_1660_p2);
    tmp_14_fu_1679_p3 <= (ap_const_lv29_0 & or_ln102_10_fu_1674_p2);
    tmp_15_fu_1693_p3 <= (ap_const_lv29_0 & or_ln102_11_fu_1688_p2);
    tmp_16_fu_1707_p3 <= (ap_const_lv29_0 & or_ln102_12_fu_1702_p2);
    tmp_17_fu_1721_p3 <= (ap_const_lv29_0 & or_ln102_13_fu_1716_p2);
    tmp_18_fu_1735_p3 <= (ap_const_lv29_0 & or_ln102_14_fu_1730_p2);
    tmp_19_fu_1064_p3 <= (select_ln89_fu_1021_p3 & ap_const_lv4_0);
    tmp_2_fu_1469_p3 <= (ap_const_lv29_0 & or_ln102_4_fu_1464_p2);
    tmp_5_fu_1525_p3 <= (ap_const_lv29_0 & or_ln102_5_fu_1520_p2);
    tmp_6_fu_1213_p3 <= (select_ln89_1_reg_2128 & ap_const_lv4_0);
    tmp_7_fu_1231_p3 <= (ap_const_lv29_0 & or_ln102_fu_1225_p2);
    tmp_8_fu_1360_p3 <= (ap_const_lv29_0 & or_ln102_1_fu_1355_p2);
    tmp_9_fu_1374_p3 <= (ap_const_lv29_0 & or_ln102_2_fu_1369_p2);
    tmp_s_fu_1455_p3 <= (ap_const_lv29_0 & or_ln102_3_fu_1450_p2);
    trunc_ln102_fu_1037_p1 <= select_ln89_1_fu_1029_p3(6 - 1 downto 0);
    trunc_ln116_1_fu_1874_p1 <= select_ln112_fu_1854_p3(6 - 1 downto 0);
    trunc_ln116_fu_1870_p1 <= select_ln112_1_fu_1862_p3(10 - 1 downto 0);
    trunc_ln72_1_fu_883_p1 <= select_ln68_1_fu_871_p3(6 - 1 downto 0);
    trunc_ln72_fu_879_p1 <= select_ln68_fu_863_p3(10 - 1 downto 0);
    trunc_ln84_1_fu_957_p1 <= select_ln80_1_fu_945_p3(6 - 1 downto 0);
    trunc_ln84_fu_953_p1 <= select_ln80_fu_937_p3(10 - 1 downto 0);
    trunc_ln99_1_fu_1077_p1 <= select_ln89_fu_1021_p3(6 - 1 downto 0);
    trunc_ln99_fu_1049_p1 <= select_ln89_fu_1021_p3(10 - 1 downto 0);
    zext_ln101_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_read_reg_1903),64));
    zext_ln109_fu_1828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(itr5_0_reg_671),32));
    zext_ln65_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(itr_0_reg_594),32));
    zext_ln77_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(itr1_0_reg_627),32));
    zext_ln99_1_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln99_fu_1089_p2),64));
    zext_ln99_cast_fu_1041_p3 <= (trunc_ln102_fu_1037_p1 & ap_const_lv4_0);
    zext_ln99_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1213_p3),64));
end behav;
